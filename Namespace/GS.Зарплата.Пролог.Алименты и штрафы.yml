%YAML 1.1
--- 
StructureVersion: "1.0"
Properties: 
  RUID: 195379689_166214404
  Name: "GS.Зарплата.Пролог.Алименты и штрафы"
  Caption: "Алименты и штрафы"
  Version: "1.0.0.82"
  Optional: False
  Internal: True
  MD5: 7391C5B090527B66081C2ADF978B220F
Uses: 
  - "152690130_258063421 GS.Зарплата.Пролог"
  - "147769863_84733194 Зарплата - Evt_Object"
  - "147737937_43451302 ОК - макросы"
  - "147730392_43451302 Зарплата - макросы"
  - "151049506_187967073 GS.Зарплата.Пролог.Общие"
Objects: 
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 195361376_166214404
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_FeeAlimonyCalc_pl"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include wg_WageSettings
        '
        '#include pl_GetScriptIDByName
        
        Function wg_FeeAlimonyCalc_pl(ByRef wg_EmployeeCharge, ByVal TotalDocKey, ByVal FeeTypeKey, _
                                      ByVal AccountKeyArr, ByVal Scope)
        '
          Dim T, T1, T2
          '
          Dim Creator, IsDebug
          IsDebug = True
          '
          Dim PL, Ret, Pred, Tv, PredFile, Append
          Dim ScriptName', Scope
          'fee_calc_in, fee_calc_prep
          Dim P_in, Tv_in, Q_in, P_prep, Tv_prep, Q_prep
          Dim EmplKey, DateBegin, RoundType, RoundValue
          'fee_calc_run
          Dim P_run, Tv_run, Q_run
          'fee_calc_sql, fee_calc_cmd
          Dim P_sql, Tv_sql, Q_sql, P_cmd, Tv_cmd, Q_cmd
          Dim PredicateName, Arity, SQL
          Dim SQLUpdate
          'fee_calc
          Dim P_main, Tv_main, Q_main
          'fee_calc_out, fee_calc_charge
          Dim P_out, Tv_out, Q_out, P_charge, Tv_charge, Q_charge
          Dim Result, ChargeSum, FeeTypeID, DocKey, AccountKeyIndex
          'fee_calc_debt
          Dim P_debt, Tv_debt, Q_debt
          Dim AlimonyKey, DebtSum, DateDebt
          Dim gdcAlimonyDebt
          'fee_calc_prot
          Dim P_prot, Tv_prot, Q_prot
          Dim ProtText
          Dim gdcTblChargeProt
        
          T1 = Timer
        
          Result = 0
          wg_FeeAlimonyCalc_pl = Result
            
          'init
          Set Creator = New TCreator
          Set PL = Creator.GetObject(nil, "TgsPLClient", "")
          Ret = PL.Initialise("")
          If Not Ret Then
            Exit Function
          End If
          'debug
          PL.Debug = (False And IsDebug And plGlobalDebug)
          'load
          ScriptName = "twg_fee"
          Ret = PL.LoadScript(pl_GetScriptIDByName(ScriptName))
          If Not Ret Then
            Exit Function
          End If
          'Scope = "wg_fee_alimony"
          'debug
          PL.Debug = (True And IsDebug And plGlobalDebug)
        
          'params
          EmplKey = wg_EmployeeCharge.EmployeeKey
          DateBegin = wg_EmployeeCharge.BeginDate
          '
          RoundType = wg_WageSettings.Wage.RoundType
          RoundValue = wg_WageSettings.Wage.RoundValue
        
          'fee_calc_in(Scope, EmplKey, DateBegin, TotalDocKey, FeeTypeKey, RoundType, RoundValue)
          P_in = "fee_calc_in"
          Set Tv_in = Creator.GetObject(7, "TgsPLTermv", "")
          Set Q_in = Creator.GetObject(nil, "TgsPLQuery", "")
          '
          Tv_in.PutAtom 0, Scope
          Tv_in.PutInteger 1, EmplKey
          Tv_in.PutDate 2, DateBegin
          Tv_in.PutInteger 3, TotalDocKey
          Tv_in.PutInteger 4, FeeTypeKey
          Tv_in.PutInteger 5, RoundType
          Tv_in.PutFloat 6, RoundValue
          '
          Q_in.PredicateName = P_in
          Q_in.Termv = Tv_in
          '
          Q_in.OpenQuery
          If Q_in.EOF Then
            Exit Function
          End If
          Q_in.Close
        
          'fee_calc_prep(Scope)
          P_prep = "fee_calc_prep"
          Set Tv_prep = Creator.GetObject(1, "TgsPLTermv", "")
          Set Q_prep = Creator.GetObject(nil, "TgsPLQuery", "")
          '
          Tv_prep.PutAtom 0, Scope
          '
          Q_prep.PredicateName = P_prep
          Q_prep.Termv = Tv_prep
          '
          Q_prep.OpenQuery
          If Q_prep.EOF Then
            Exit Function
          End If
          Q_prep.Close
        
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          'fee_calc_run(Scope, EmplKey)
          P_run = "fee_calc_run"
          Set Tv_run = Creator.GetObject(2, "TgsPLTermv", "")
          Set Q_run = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_run.PredicateName = P_run
          Q_run.Termv = Tv_run
          '
          Tv_run.PutAtom 0, Scope
          '
          Q_run.OpenQuery
          If Q_run.EOF Then
            Exit Function
          End If
        
          'fee_calc_sql(Scope, EmplKey, PredicateName, Arity, SQL)
          P_sql = "fee_calc_sql"
          Set Tv_sql = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_sql = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_sql.PredicateName = P_sql
          Q_sql.Termv = Tv_sql
          'fee_calc_cmd(Scope, EmplKey, PredicateName, Arity, SQL)
          P_cmd = "fee_calc_cmd"
          Set Tv_cmd = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_cmd = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_cmd.PredicateName = P_cmd
          Q_cmd.Termv = Tv_cmd
          '
          Set SQLUpdate = Creator.GetObject(nil, "TIBSQL", "")
          Set SQLUpdate.Transaction = wg_EmployeeCharge.Transaction
        
          Append = False
          '
          Do Until Q_run.EOF
            EmplKey = Tv_run.ReadInteger(1)
            '
            Tv_sql.Reset
            Tv_sql.PutAtom 0, Scope
            Tv_sql.PutInteger 1, EmplKey
            Q_sql.OpenQuery
            '
            Tv_cmd.Reset
            Tv_cmd.PutAtom 0, Scope
            Tv_cmd.PutInteger 1, EmplKey
            Q_cmd.OpenQuery
            '
            Do Until Q_cmd.EOF
              PredicateName = Tv_cmd.ReadAtom(2)
              Arity = Tv_cmd.ReadInteger(3)
              SQL = Tv_cmd.ReadString(4)
              '
              SQLUpdate.SQL.Text = SQL
              SQLUpdate.ExecQuery
              SQLUpdate.Close
              '
              Q_cmd.NextSolution
            Loop
            Q_cmd.Close
            '
            Do Until Q_sql.EOF
              PredicateName = Tv_sql.ReadAtom(2)
              Arity = Tv_sql.ReadInteger(3)
              SQL = Tv_sql.ReadString(4)
              '
              Ret =  PL.MakePredicatesOfSQLSelect _
                        (SQL, _
                        wg_EmployeeCharge.Transaction, _
                        PredicateName, PredicateName, Append)
              '
              Q_sql.NextSolution
            Loop
            Q_sql.Close
            '
            Append = True
            '
            Q_run.NextSolution
          Loop
          Q_run.Close
        
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          'fee_calc(Scope)
          P_main = "fee_calc"
          Set Tv_main = Creator.GetObject(1, "TgsPLTermv", "")
          Set Q_main = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_main.PredicateName = P_main
          Q_main.Termv = Tv_main
          '
          Tv_main.PutAtom 0, Scope
          '
          Q_main.OpenQuery
          If Q_main.EOF Then
            Exit Function
          End If
          Q_main.Close
        
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          'fee_calc_out(Scope, EmplKey, Result)
          P_out = "fee_calc_out"
          Set Tv_out = Creator.GetObject(3, "TgsPLTermv", "")
          Set Q_out = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_out.PredicateName = P_out
          Q_out.Termv = Tv_out
          '
          Tv_out.PutAtom 0, Scope
          '
          Q_out.OpenQuery
          If Q_out.EOF Then
            Exit Function
          End If
        
          'fee_calc_charge(Scope, EmplKey, ChargeSum, FeeTypeID, DocKey, AccountKeyIndex)
          P_charge = "fee_calc_charge"
          Set Tv_charge = Creator.GetObject(6, "TgsPLTermv", "")
          Set Q_charge = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_charge.PredicateName = P_charge
          Q_charge.Termv = Tv_charge
        
          'fee_calc_debt(Scope, EmplKey, AlimonyKey, DebtSum, DateDebt)
          P_debt = "fee_calc_debt"
          Set Tv_debt = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_debt = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_debt.PredicateName = P_debt
          Q_debt.Termv = Tv_debt
          'Журнал долгов по алиментам
          Set gdcAlimonyDebt = Creator.GetObject(nil, "TgdcUserDocument", "")
          Select Case Scope
            Case "wg_fee_alimony"
              gdcAlimonyDebt.SubType = "147072391_453357870"
            Case "wg_fee_fine"
              gdcAlimonyDebt.SubType = "152685574_258063421"
          End Select
          gdcAlimonyDebt.SubSet = "ByID"
          gdcAlimonyDebt.Transaction = wg_EmployeeCharge.Transaction
        
          'fee_calc_prot(Scope, EmplKey, ProtText)
          P_prot = "fee_calc_prot"
          Set Tv_prot = Creator.GetObject(3, "TgsPLTermv", "")
          Set Q_prot = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_prot.PredicateName = P_prot
          Q_prot.Termv = Tv_prot
          'Протокол по начислениям
          Set gdcTblChargeProt = Creator.GetObject(nil, "TgdcAttrUserDefined", "")
          gdcTblChargeProt.SubType = "USR$WG_TBLCHARGE_PROT"
          gdcTblChargeProt.Transaction = wg_EmployeeCharge.Transaction
          gdcTblChargeProt.ExtraConditions.Add _
            ( _
                " Z.USR$EMPLKEY = " & EmplKey & _
            " AND Z.USR$TOTALDOCKEY = " & TotalDocKey & _
            " AND Z.USR$FEETYPEKEY = " & FeeTypeKey _
            )
        
          Do Until Q_out.EOF
            EmplKey = Tv_out.ReadInteger(1)
            Result = Tv_out.ReadFloat(2)
            '
            Tv_charge.Reset
            Tv_charge.PutAtom 0, Scope
            Tv_charge.PutInteger 1, EmplKey
            Q_charge.OpenQuery
            '
            Do Until Q_charge.EOF
              ChargeSum = Tv_charge.ReadFloat(2)
              FeeTypeID = Tv_charge.ReadInteger(3)
              DocKey = Tv_charge.ReadInteger(4)
              AccountKeyIndex = Tv_charge.ReadInteger(5)
              '
              Call wg_EmployeeCharge.AddCharge(0, ChargeSum, Null, TotalDocKey, FeeTypeID, _
                  DocKey, wg_EmployeeCharge.BeginDate, 0, 0)
              Call wg_EmployeeCharge.AddChargeRegNew(0, ChargeSum, TotalDocKey, FeeTypeID, _
                  AccountKeyArr(AccountKeyIndex), wg_EmployeeCharge.BeginDate, DocKey)
              '
              Q_charge.NextSolution
            Loop
            Q_charge.Close
            '
            Tv_debt.Reset
            Tv_debt.PutAtom 0, Scope
            Tv_debt.PutInteger 1, EmplKey
            Q_debt.OpenQuery
            '
            If Not Q_debt.EOF Then
              gdcAlimonyDebt.Open
            End If
            '
            Do Until Q_debt.EOF
              AlimonyKey = Tv_debt.ReadInteger(2)
              DebtSum = Tv_debt.ReadFloat(3)
              DateDebt = Tv_debt.ReadDate(4)
              '
              gdcAlimonyDebt.Insert
              gdcAlimonyDebt.FieldByName("usr$totaldockey").AsInteger = TotalDocKey
              gdcAlimonyDebt.FieldByName("usr$alimonykey").AsInteger = AlimonyKey
              gdcAlimonyDebt.FieldByName("usr$debtsum").AsCurrency = DebtSum
              gdcAlimonyDebt.FieldByName("usr$debtmonth").AsInteger = 0
              gdcAlimonyDebt.FieldByName("usr$datedebt").AsDateTime = DateDebt
              gdcAlimonyDebt.Post
              '
              Q_debt.NextSolution
            Loop
            Q_debt.Close
            '
            Tv_prot.Reset
            Tv_prot.PutAtom 0, Scope
            Tv_prot.PutInteger 1, EmplKey
            Q_prot.OpenQuery
            '
            If Not Q_prot.EOF Then
              gdcTblChargeProt.Open
            End If
            '
            Do Until Q_prot.EOF
              ProtText = Tv_prot.ReadString(2)
              '
              gdcTblChargeProt.Edit
              gdcTblChargeProt.FieldByName("USR$EMPLKEY").AsInteger = EmplKey
              gdcTblChargeProt.FieldByName("USR$TOTALDOCKEY").AsInteger = TotalDocKey
              gdcTblChargeProt.FieldByName("USR$FEETYPEKEY").AsInteger = FeeTypeKey
              gdcTblChargeProt.FieldByName("USR$DESCRIPTION").AsString = ProtText
              gdcTblChargeProt.Post
              '
              Q_prot.NextSolution
            Loop
            Q_prot.Close
            '
            Q_out.NextSolution
          Loop
          Q_out.Close
        
          gdcAlimonyDebt.Close
        
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          wg_FeeAlimonyCalc_pl = Result
        
          T2 = Timer
          T = T2 - T1
        '
        End Function
        
      DISPLAYSCRIPT: | 
        WG_FEEALIMONYCALC_PL
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QRAAAAV0dfRU1QTE9ZRUVDSEFSR0URAAAAV0dfRU1QTE9ZRUVDSEFSR0UAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QLAAAAVE9UQUxET0NLRVkLAAAAVE9UQUxET0NLRVkA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QKAAAARkVFVFlQRUtFWQoAAABGRUVUWVBF
        S0VZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUDQAAAEFDQ09VTlRLRVlBUlINAAAA
        QUNDT1VOVEtFWUFSUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNUUFJTVAUAAABTQ09QRQUA
        AABTQ09QRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNURkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2015-01-27T18:13:31+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
          - 
            ADDFUNCTIONKEY: "151158419_5956463 pl_GetScriptIDByName"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147656112_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "WAGE"
      LANGUAGE: "VBScript"
      NAME: "wg_FeeAlimonyCalc"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_MonthHour
        '#include wg_GetAlimonySum
        '#include wg_CalcTransferSum
        '#include wg_RoundSum
        '#include wg_EmplMoveList
        '#include wg_TblCal
        '#include wg_WageSettings
        '#include wg_GetAccountKey
        '<pl>
        '#include wg_FeeAlimonyCalc_pl
        '</pl>
        function wg_FeeAlimonyCalc(ByRef wg_EmployeeCharge, ByVal TotalDocKey, ByVal FeeTypeKey, ByRef obj_FeeData)
        'Расчет алиментов, долга по алиментам и расходов на их пересылку
          wg_FeeAlimonyCalc = 0
        
          Dim wg_FeeType_TransferDed_ID, wg_FeeType_AlimonyDebt_ID
          Dim AccountKey, AccountKeyDebt, AccountKeyTransf
        
          wg_FeeType_TransferDed_ID = gdcBaseManager.GetIDByRUIDString(wg_FeeType_TransferDed_RUID)
          wg_FeeType_AlimonyDebt_ID = gdcBaseManager.GetIDByRUIDString(wg_FeeType_AlimonyDebt_RUID)
        
          AccountKey = wg_GetAccountKey(FeeTypeKey, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.EndDate)
          AccountKeyDebt = wg_GetAccountKey(wg_FeeType_AlimonyDebt_ID, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.EndDate)
          AccountKeyTransf = wg_GetAccountKey(wg_FeeType_TransferDed_ID, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.EndDate)
        
          '<pl>
          Dim AccountKeyArr
          Dim Scope
          Scope = "wg_fee_alimony"
          '
          AccountKeyArr = Array(AccountKey, AccountKeyDebt, AccountKeyTransf)
        
          Dim frmAlimony, dlgAlimony
          Dim Prolog_Alimony
          '
          Set frmAlimony = _
            Application.FindComponent("gdc_frmUserComplexDocument147567052_119619099")
          '
          If Assigned(frmAlimony) Then
            Set dlgAlimony = _
              frmAlimony.FindComponent("gdc_dlgUserComplexDocument147567052_119619099")
          End If
          '
          If Assigned(dlgAlimony) Then
            Set Prolog_Alimony = dlgAlimony.FindComponent("usrg_Prolog_Alimony")
            If Assigned(Prolog_Alimony) Then
              If Prolog_Alimony.Checked = True Then
                'Расчет через Пролог-скрипт
                wg_FeeAlimonyCalc = _
                  wg_FeeAlimonyCalc_pl(wg_EmployeeCharge, TotalDocKey, FeeTypeKey, AccountKeyArr, Scope)
                Exit Function
              End If
            End If
          Else
            'Расчет через Пролог-скрипт
            wg_FeeAlimonyCalc = _
              wg_FeeAlimonyCalc_pl(wg_EmployeeCharge, TotalDocKey, FeeTypeKey, AccountKeyArr, Scope)
            Exit Function
          End If
          '</pl>
        
        'Удаление результатов прошлого расчета
          set Creator = New TCreator
          set SQLUpdate = Creator.GetObject(nil, "TIBSQL", "")
          set SQLUpdate.Transaction = wg_EmployeeCharge.Transaction
          'Удаление результатов прошлого расчета из журнала долга
          SQLUpdate.SQL.Text = "DELETE " & _
            "FROM usr$wg_alimonydebt aldebt " & _
            "WHERE " & _
            "    usr$totaldockey = :totaldockey " & _
            "  AND aldebt.usr$alimonykey IN " & _
            " (SELECT al.documentkey " & _
            "  FROM usr$wg_alimony al " & _
            "  WHERE al.usr$emplkey = :emplkey) "
        
          SQLUpdate.ParamByName("totaldockey").AsInteger = TotalDocKey
          SQLUpdate.ParamByName("emplkey").AsInteger = wg_EmployeeCharge.EmployeeKey
          SQLUpdate.ExecQuery
          SQLUpdate.Close
          'Удаление результатов прошлого расчета из журнала погашенных месяцев
          SQLUpdate.SQL.Text = "DELETE " & _
            "FROM usr$wg_alimonypayedmonth " & _
            "WHERE " & _
            "  usr$totaldockey = :totaldockey " & _
            "  AND usr$alimonydebtkey IN ( " & _
            "    SELECT aldebt.documentkey " & _
            "    FROM usr$wg_alimonydebt aldebt " & _
            "      JOIN usr$wg_alimony al ON aldebt.usr$alimonykey = al.documentkey AND al.usr$emplkey = :emplkey) "
        
          SQLUpdate.ParamByName("totaldockey").AsInteger = TotalDocKey
          SQLUpdate.ParamByName("emplkey").AsInteger = wg_EmployeeCharge.EmployeeKey
          SQLUpdate.ExecQuery
          SQLUpdate.Close
        
          set MoveCard = wg_EmplMoveList.MoveCardList(wg_EmployeeCharge.EmployeeKey, null)._
            MoveCardByDate(wg_EmployeeCharge.EndDate)
          if Assigned(MoveCard) then
        
            'Журнал долгов по алиментам
            Set gdcAlimonyDebt = Creator.GetObject(nil, "TgdcUserDocument", "")
            gdcAlimonyDebt.SubType = "147072391_453357870"
            gdcAlimonyDebt.Transaction = wg_EmployeeCharge.Transaction
            gdcAlimonyDebt.Open
        
            'Определим кол-во отработанных часов (для определения текущего долга по алиментам в месяцах)
            if wg_WageSettings.Wage.Alimonymonthdebt then
        '      set Tbl = wg_TblCal.EmplTblCal(wg_EmployeeCharge.Employeekey, MoveCard.FirstMoveKey)
        '      AddDebtMontFlg = (Tbl.WorkDuration = 0)
              AddDebtMontFlg = False
            else
              AddDebtMontFlg = False
            end if
        
            'Класс для работы с алиментами
            set wg_Alimony = New Twg_Alimony
        
            wg_EmployeeCharge.FirstMoveKey = MoveCard.FirstMoveKey
            'Класс для расчета формул
            set wg_FoCal = New Twg_FoCal
            set wg_FoCal.ReadTransaction = wg_EmployeeCharge.ReadTransaction
            wg_FoCal.EmplKey   = wg_EmployeeCharge.Employeekey
            wg_FoCal.DateBegin = wg_EmployeeCharge.BeginDate
            wg_FoCal.DateEnd   = wg_EmployeeCharge.EndDate
            'Запрос для добавления погашенных месяцев в отдельный журнал
            SQLUpdate.SQL.Text = " INSERT INTO usr$wg_alimonypayedmonth " & _
              " (usr$totaldockey, usr$alimonydebtkey, usr$payedmonth) " & _
              " VALUES (:totaldockey, :alimonydebtkey, :payedmonth) "
        
            set IBSQL = Creator.GetObject(nil, "TIBSQL", "")
            IBSQL.Transaction = wg_EmployeeCharge.ReadTransaction
            'Выбираем документы о назначении алиментов
            IBSQL.SQL.Text = " SELECT calc.* " & _
              " FROM usr$wg_alimony calc " & _
              " LEFT JOIN GD_DOCUMENT d ON calc.DOCUMENTKEY = d.ID " & _
              " WHERE d.COMPANYKEY = <COMPANYKEY/> AND " & _
              "   calc.usr$emplkey = :emplkey AND " & _
              "   calc.usr$datebegin <= :dateend AND " & _
              "   (calc.usr$dateend >= :datebegin or calc.usr$dateend is NULL) " & _
              "   AND d.documenttypekey = :doctype " & _
              " ORDER BY calc.usr$datebegin "
            IBSQL.ParamByName("DateBegin").AsDateTime = wg_EmployeeCharge.BeginDate
            IBSQL.ParamByName("DateEnd").AsDateTime =  wg_EmployeeCharge.EndDate
            IBSQL.ParamByName("emplkey").AsInteger = wg_EmployeeCharge.Employeekey
            IBSQL.ParamByName("doctype").AsInteger = gdcBaseManager.GetIdByRuidString("147067079_453357870")
            IBSQL.ExecQuery
        
            'Оставшееся деньги
            RestSum = wg_EmployeeCharge.Debit - wg_EmployeeCharge.Credit + wg_EmployeeCharge.PayedOut
        
           'Добавление алиментов в объект класса wg_Alimony
            AlimonyReservAll = 0
            while not IBSQL.Eof
              if AddDebtMontFlg then
              'Накопление долга по алиментам в месяцах, если сотрудник не проработал ни одного часа
                gdcAlimonyDebt.Insert
                gdcAlimonyDebt.FieldByName("usr$totaldockey").AsInteger = TotalDocKey
                gdcAlimonyDebt.FieldByName("usr$alimonykey").AsInteger = IBSQL.FieldByName("documentkey").AsInteger
                gdcAlimonyDebt.FieldByName("usr$debtsum").AsCurrency = 0
                gdcAlimonyDebt.FieldByName("usr$debtmonth").AsInteger = 1
                gdcAlimonyDebt.Post
              else
                FormulaStr = Replace(Replace(IBSQL.FieldByName("usr$formula").AsString, ".", Application.DecimalSeparatorSys), ",", Application.DecimalSeparatorSys)
        
                Sum = wg_GetAlimonySum(wg_FoCal, FormulaStr, _
                      IBSQL.FieldByName("usr$datebegin").AsDateTime, wg_EmployeeCharge.BeginDate)
                'Проверка на бюджет прожиточного минимума
                if wg_EmployeeCharge.BeginDate >= DateSerial(2009, 5, 1) then
                  LivingWage = wg_MonthHour.LivingWage(wg_EmployeeCharge.BeginDate)
                  Count = IBSQL.FieldByName("USR$CHILDCOUNT").AsInteger
                  
                  if IBSQL.FieldByName("USR$LIVINGWAGEPERC").AsCurrency <= 0 then
                    if Count = 1 then
                      LivingWage = LivingWage / 2
                    elseif Count = 2 then
                      LivingWage = LivingWage * 75 / 100
                    elseif Count >= 3 then
        
                    end if
                  else
                    LivingWage = LivingWage *  IBSQL.FieldByName("USR$LIVINGWAGEPERC").AsCurrency / 100
                  end if
                  if Sum < LivingWage then
                    Sum = LivingWage
                  end if
                end if
               'Округление
                Sum = wg_RoundSum(FeeTypeKey, Sum)
                'Суммы для резерва денег по алименты и суммы для их перевода
                if not IBSQL.FieldByName("usr$transfertypekey").isNull then
                  ReservTransferSum = wg_RoundSum(wg_FeeType_TransferDed_ID, Sum * _
                    wg_TransferDed.Types(IBSQL.FieldByName("usr$transfertypekey").AsInteger).GetPercent(wg_EmployeeCharge.EndDate, Sum) / 100)
                else
                  ReservTransferSum = 0
                end if
                'Если резервировать некуда, то ...
                if AlimonyReservAll + Sum + ReservTransferSum > RestSum then
                  SumTmp = RestSum - AlimonyReservAll            'Резервируем все деньги, которые остаются
                else
                  SumTmp = Sum + ReservTransferSum
                end if
                if SumTmp < 0 then
                  SumTmp = 0
                end if
                'Добавление данных по алиментам в экземпляр класса
                call wg_Alimony.Add(IBSQL.FieldByName("documentkey").AsInteger, Sum, _
                               IBSQL.FieldByName("usr$restpercent").AsCurrency, _
                               IBSQL.FieldByName("usr$transfertypekey").Value, SumTmp) 'Sum + ReservTransferSum)
                AlimonyReservAll = AlimonyReservAll + SumTmp 'Sum + ReservTransferSum
              end if
              IBSQL.Next
            wend
            IBSQL.Close
            'Если по сотруднику было накапливание долга по месяцам, то расчет можно завершать
            if AddDebtMontFlg then
              gdcAlimonyDebt.Close
              wg_EmployeeCharge.FirstMoveKey = Null
              exit function
            end if
            'Выборка долгов по алиментам. Сортировка: по долгам в суммах, по дате начала долга
            IBSQL.SQL.Text = "SELECT line.documentkey, IIF(line.usr$debtsum > 0 and line.usr$debtsum > alrest.credit, 0, 1) AS debttype,  " & _
              "  total.usr$datebegin AS thedate, al.documentkey AS alimonykey,  " & _
              "  line.usr$debtsum, alrest.credit, line.usr$debtmonth, pmonth.mcount,  " & _
              "  al.usr$restpercent, al.usr$datebegin, al.usr$transfertypekey, al.usr$formula, al.usr$percent  " & _
              " FROM GD_DOCUMENT d " & _
              " LEFT JOIN usr$wg_alimony al ON al.DOCUMENTKEY = d.ID " & _
              "  LEFT JOIN usr$wg_alimonydebt line ON al.documentkey = line.usr$alimonykey " & _
              "  LEFT JOIN usr$wg_total total ON total.documentkey = line.usr$totaldockey  " & _
              "  LEFT JOIN USR$WG_P_TBLCHARGEBYDOC(al.usr$emplkey, :feetypekey, line.documentkey) alrest ON 1=1  " & _
              "  LEFT JOIN USR$WG_P_ALIMONYPAYEDMONTH(line.documentkey) pmonth ON 1=1  " & _
              "WHERE  " & _
              "  al.usr$emplkey = :emplkey  " & _
              "  AND (alrest.credit < line.usr$debtsum OR line.usr$debtmonth > pmonth.mcount)  " & _
              "  AND d.DOCUMENTTYPEKEY = :ruid  " & _
              "  AND total.USR$DATEBEGIN <= :DB  " & _
              "ORDER BY 2, 3 "
            IBSQL.ParamByName("feetypekey").AsInteger = wg_FeeType_AlimonyDebt_ID
            IBSQL.ParamByName("DB").AsDateTime = wg_EmployeeCharge.BeginDate
            IBSQL.ParamByName("emplkey").AsInteger = wg_EmployeeCharge.Employeekey
            IBSQL.ParamByName("ruid").AsInteger = gdcBaseManager.GetIdByRuidString("147067079_453357870")
            IBSQL.ExecQuery
        '    while not (IBSQL.Eof or RestSum <= MustPaySum)
            'Добавление долгов по алиментам в объект класса wg_Alimony
            while not IBSQL.Eof
        
              if (IBSQL.FieldByName("usr$percent").AsCurrency > 0) and _
                 (IBSQL.FieldByName("usr$percent").AsCurrency < 100) then
                'sum = (RestSum - AlimonyReservAll) * IBSQL.FieldByName("usr$percent").AsCurrency / 100
                sum = (RestSum) * IBSQL.FieldByName("usr$percent").AsCurrency / 100
                if sum > (IBSQL.FieldByName("usr$debtsum").AsCurrency - IBSQL.FieldByName("credit").AsCurrency) then _
                  sum = IBSQL.FieldByName("usr$debtsum").AsCurrency  - IBSQL.FieldByName("credit").AsCurrency
                sum = wg_RoundSum(wg_FeeType_AlimonyDebt_ID, Sum)
              else
                sum = IBSQL.FieldByName("usr$debtsum").AsCurrency - IBSQL.FieldByName("credit").AsCurrency
              end if
              if sum < 0 then sum = 0
              'Если алиментов, по которым есть долг, нет в списке алиментов, то добавим алименты в список
              if not wg_Alimony.Exists(IBSQL.FieldByName("alimonykey").AsInteger) then
                call wg_Alimony.Add(IBSQL.FieldByName("alimonykey").AsInteger, 0, _
                             IBSQL.FieldByName("usr$restpercent").AsCurrency, _
                             IBSQL.FieldByName("usr$transfertypekey").Value, 0)
              end if
              AlimonyKey = IBSQL.FieldByName("alimonykey").AsInteger
              'Долг в месяцах
              DebtMonthCount = IBSQL.FieldByName("usr$debtmonth").AsInteger - IBSQL.FieldByName("mcount").AsInteger
        
              call wg_Alimony.ItemByID(AlimonyKey).Add(_
                IBSQL.FieldByName("documentkey").AsInteger, Sum, DebtMonthCount)
        
              if DebtMonthCount > 0 then
                if wg_Alimony.ItemByID(AlimonyKey).ForDebtMonthSum = 0 then
                  DebtMontSum = wg_GetAlimonySum(wg_FoCal, IBSQL.FieldByName("usr$formula").AsString, _
                        IBSQL.FieldByName("usr$datebegin").AsDateTime, wg_EmployeeCharge.BeginDate)
                 'Округление
                  DebtMontSum = wg_RoundSum(FeeTypeKey, DebtMontSum)
                  wg_Alimony.ItemByID(AlimonyKey).ForDebtMonthSum = DebtMontSum
                  DebtAllMontSum = DebtMontSum * DebtMonthCount
                else
                  DebtAllMontSum = wg_Alimony.ItemByID(AlimonyKey).ForDebtMonthSum * DebtMonthCount
                end if
              else
                DebtAllMontSum = 0
              end if
              wg_Alimony.ItemByID(AlimonyKey).MustPaySum = _
                wg_Alimony.ItemByID(AlimonyKey).MustPaySum + Sum + DebtAllMontSum
              IBSQL.Next
            wend
            IBSQL.Close
        
            AlimonyDebtAllSum = 0
            AlimonyAllSum = 0
            TransferAllSum = 0
            OverReservedSum = 0
            
        '    set gdcAlimonyDebt = Nothing
           'Цикл по алиментам
            for i = 0 to wg_Alimony.Count - 1
            'Определим сумму за перевод и сумму, которую может выплатить сотрудник (с учетом расходов за перевод)
              'Процент остатка. Т.е. процент, который нужно оставить сотруднику
              RestPercentSum = wg_Alimony.Item(i).RestPercent * _
                              (wg_EmployeeCharge.Debit - wg_EmployeeCharge.Credit + wg_EmployeeCharge.PayedOut) / 100
        
              'Сумма для резерва сумм других алиментов. Т.е. сначала нужно выплатить деньги по алиментам, а потом по их долгам
              'Из общей резервной суммы нужно исключить текущие алименты и те, которые уже расчитали
              AlimonyReservAll = AlimonyReservAll - wg_Alimony.Item(i).ReservedSum
        
        '      if AlimonyReservedSum > RestSum then
        '      end if
              OutArray = wg_CalcTransferSum(wg_Alimony.Item(i).MustPaySum, wg_Alimony.Item(i).TransferTypeKey, _
                wg_EmployeeCharge.BeginDate, RestSum - RestPercentSum - AlimonyReservAll)
              CanPaySum = OutArray(0)
              TransferSum = OutArray(1)
              'Занести сумму за пересылку алиментов в начисления по табелю
              if TransferSum > 0 then
                call wg_EmployeeCharge.AddCharge(0, TransferSum, Null, TotalDocKey, wg_FeeType_TransferDed_ID,_
                     wg_Alimony.Item(i).ID, wg_EmployeeCharge.BeginDate, 0, 0)
                     
                call wg_EmployeeCharge.AddChargeRegNew(0, TransferSum, TotalDocKey, wg_FeeType_TransferDed_ID, _
                     AccountKeyTransf, wg_EmployeeCharge.BeginDate, wg_Alimony.Item(i).ID)
        
              end if
        
              'Определение по каким документам возможны выплаты
              'Текущий долг по алиментам
              if wg_Alimony.Item(i).Sum > CanPaySum then
              'Добавление текущего долга в журнал долга по алиментам
        '        if not Assigned(gdcAlimonyDebt) then
        '          set gdcAlimonyDebt = Creator.GetObject(nil, "TgdcUserDocument", "")
        '          gdcAlimonyDebt.SubType = "147072391_453357870"
        '          gdcAlimonyDebt.Transaction = wg_EmployeeCharge.Transaction
        '          gdcAlimonyDebt.Open
        '        end if
                gdcAlimonyDebt.Insert
                gdcAlimonyDebt.FieldByName("usr$totaldockey").AsInteger = TotalDocKey
                gdcAlimonyDebt.FieldByName("usr$alimonykey").AsInteger = wg_Alimony.Item(i).ID
                gdcAlimonyDebt.FieldByName("usr$debtsum").AsCurrency = wg_Alimony.Item(i).Sum - CanPaySum
                gdcAlimonyDebt.FieldByName("usr$debtmonth").AsInteger = 0
                gdcAlimonyDebt.Post
        
                AlimonyDebt = wg_Alimony.Item(i).Sum - CanPaySum
                AlimonySum = CanPaySum
              else
                AlimonySum = wg_Alimony.Item(i).Sum
              end if
              'Занести сумму выплаченных алиментов в начисления по табелю
              if AlimonySum > 0 then
                call wg_EmployeeCharge.AddCharge(0, AlimonySum, Null, TotalDocKey, FeeTypeKey,_
                  wg_Alimony.Item(i).ID, wg_EmployeeCharge.BeginDate, 0, 0)
                call wg_EmployeeCharge.AddChargeRegNew(0, AlimonySum, TotalDocKey, FeeTypeKey, _
                  AccountKey, wg_EmployeeCharge.BeginDate, wg_Alimony.Item(i).ID)
              end if
        
             'Гашение долгов в суммах
              TmpSum = CanPaySum - AlimonySum
              for j = 0 to wg_Alimony.Item(i).Count - 1
                if TmpSum > 0 then
                  if wg_Alimony.Item(i).Item(j).Sum > 0 then
                    if wg_Alimony.Item(i).Item(j).Sum <= TmpSum then
                      AlimonyDebtSum = wg_Alimony.Item(i).Item(j).Sum
                    else
                      AlimonyDebtSum = TmpSum
                    end if
                    'Занести сумму выплаченного долга в начисления по табелю
                    call wg_EmployeeCharge.AddCharge(0, AlimonyDebtSum, Null, TotalDocKey, wg_FeeType_AlimonyDebt_ID,_
                      wg_Alimony.Item(i).Item(j).ID, wg_EmployeeCharge.BeginDate, 0, 0)
                      
                    call wg_EmployeeCharge.AddChargeRegNew(0, AlimonyDebtSum, TotalDocKey, _
                      wg_FeeType_AlimonyDebt_ID, AccountKeyDebt, wg_EmployeeCharge.BeginDate, wg_Alimony.Item(i).Item(j).ID)
        
        
                    AlimonyDebtAllSum = AlimonyDebtAllSum + AlimonyDebtSum
                    TmpSum = TmpSum - AlimonyDebtSum 'wg_Alimony.Item(i).Item(j).Sum
                    end if
                else
                  exit for
                end if
              next
             'Гашение долгов в месяцах
              TmpSum = CanPaySum - AlimonySum - AlimonyDebtSum
              for j = 0 to wg_Alimony.Item(i).Count - 1
                if TmpSum > 0 then
                  if wg_Alimony.Item(i).Item(j).DebtMonth > 0 then
                    'Сумма за все месяцы
                    DebtAllMontSum = wg_Alimony.Item(i).ForDebtMonthSum * wg_Alimony.Item(i).Item(j).DebtMonth
        
                    if DebtAllMontSum <= TmpSum then
                      AlimonyMonthDebtSum = DebtAllMontSum
                      PayedMonthCount = wg_Alimony.Item(i).Item(j).DebtMonth
                    else
                      AlimonyMonthDebtSum = TmpSum
        '              PayedMonthCount = Int(DebtAllMontSum / wg_Alimony.Item(i).ForDebtMonthSum) + 1
                      PayedMonthCount = Int(AlimonyMonthDebtSum / wg_Alimony.Item(i).ForDebtMonthSum)
        
                      if AlimonyMonthDebtSum / wg_Alimony.Item(i).ForDebtMonthSum - PayedMonthCount > 0 then
                        PayedMonthCount = PayedMonthCount + 1
                      end if
        
        
                    end if
                    'Добавим сумму, которую должны выплатить по погашенным месяцам в журнал долгов,
                    ' иначе получится отрицательный кредит по долгу.
                    'TODO: это можно сделать в классе
                    gdcAlimonyDebt.Insert
                    gdcAlimonyDebt.FieldByName("usr$totaldockey").AsInteger = TotalDocKey
                    gdcAlimonyDebt.FieldByName("usr$alimonykey").AsInteger = wg_Alimony.Item(i).ID
                    gdcAlimonyDebt.FieldByName("usr$debtmonth").AsInteger = 0
                    gdcAlimonyDebt.FieldByName("usr$debtsum").AsCurrency = PayedMonthCount * wg_Alimony.Item(i).ForDebtMonthSum
                    gdcAlimonyDebt.Post
                    'Занести сумму выплаченного долга в начисления по табелю на добавленный выше документ
                    call wg_EmployeeCharge.AddCharge(0, AlimonyMonthDebtSum, Null, TotalDocKey, wg_FeeType_AlimonyDebt_ID,_
                      gdcAlimonyDebt.ID, wg_EmployeeCharge.BeginDate, 0, 0)
                      
                    call wg_EmployeeCharge.AddChargeRegNew(0, AlimonyMonthDebtSum, TotalDocKey, _
                      wg_FeeType_AlimonyDebt_ID, AccountKeyDebt, wg_EmployeeCharge.BeginDate, gdcAlimonyDebt.ID)
        
                    'Занести погашенные месяцы в журнал
                    SQLUpdate.ParamByName("totaldockey").AsInteger = TotalDocKey
                    SQLUpdate.ParamByName("alimonydebtkey").AsInteger = wg_Alimony.Item(i).Item(j).ID
                    SQLUpdate.ParamByName("payedmonth").AsInteger = PayedMonthCount
                    SQLUpdate.ExecQuery
                    SQLUpdate.Close
        
                    AlimonyDebtAllSum = AlimonyDebtAllSum + AlimonyMonthDebtSum
                    TmpSum = TmpSum - AlimonyMonthDebtSum
                  end if
                else
                  exit for
                end if
              next
        
              AlimonyAllSum = AlimonyAllSum + AlimonySum
              TransferAllSum = TransferAllSum + TransferSum
              RestSum = RestSum - AlimonySum - AlimonyDebtSum - TransferSum
            next
        
        '  'Добавление сумм в журнал начислений
        '    'Алименты
        '    if AlimonyAllSum > 0 then
        '      AccountKey = wg_GetAccountKey(FeeTypeKey, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.EndDate)
        '      call wg_EmployeeCharge.AddChargeReg(0, AlimonyAllSum, TotalDocKey, FeeTypeKey, AccountKey, Null)
        '    end if
        '    'Выплаты долга по алиментам
        '    if AlimonyDebtAllSum > 0 then               'Сумма выплаты по долгу за алименты
        '      AccountKey = wg_GetAccountKey(wg_FeeType_AlimonyDebt_ID, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.BeginDate)
        '      call wg_EmployeeCharge.AddChargeReg(0, AlimonyDebtAllSum, TotalDocKey, wg_FeeType_AlimonyDebt_ID, AccountKey, Null)
        '    end if
        '    'За почтовый перевод
        '    if TransferAllSum <> 0 then
        '      AccountKey = wg_GetAccountKey(wg_FeeType_TransferDed_ID, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.BeginDate)
        '      call wg_EmployeeCharge.AddChargeReg(0, TransferAllSum, TotalDocKey, wg_FeeType_TransferDed_ID, AccountKey, Null)
        '    end if
        
            gdcAlimonyDebt.Close
        
            wg_FeeAlimonyCalc = AlimonyAllSum + AlimonyDebtAllSum + TransferAllSum
            wg_EmployeeCharge.FirstMoveKey = Null
          end if
        end function
        
        
      DISPLAYSCRIPT: | 
        WG_FEEALIMONYCALC
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: "Алименты, расчет"
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QRAAAAV0dfRU1QTE9ZRUVDSEFSR0URAAAAV0dfRU1QTE9ZRUVDSEFSR0UAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QLAAAAVE9UQUxET0NLRVkLAAAAVE9UQUxET0NLRVkA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QKAAAARkVFVFlQRUtFWQoAAABGRUVUWVBF
        S0VZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUCwAAAE9CSl9GRUVEQVRBCwAAAE9C
        Sl9GRUVEQVRBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2015-01-06T15:10:26+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019334_119619099 wg_MonthHour"
          - 
            ADDFUNCTIONKEY: "147168466_481542897 wg_GetAlimonySum"
          - 
            ADDFUNCTIONKEY: "147166442_481542897 wg_CalcTransferSum"
          - 
            ADDFUNCTIONKEY: "147804276_375143752 wg_RoundSum"
          - 
            ADDFUNCTIONKEY: "147743985_374487969 wg_EmplMoveList"
          - 
            ADDFUNCTIONKEY: "147170974_274788016 wg_TblCal"
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
          - 
            ADDFUNCTIONKEY: "147269378_531940465 wg_GetAccountKey"
          - 
            ADDFUNCTIONKEY: "195361376_166214404 wg_FeeAlimonyCalc_pl"
  - 
    Properties: 
      Class: "TgdcMacrosGroup"
      RUID: 147014502_256548741
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 198477540_219712981
    Fields: 
      HASCHILDREN: 1
      OBJECTNAME: "gdc_frmAttrUserDefinedUSR_WG_TBLCHARGE"
      OBJECTPARENT: ~
      CLASSNAME: ""
      SUBTYPE: ""
      PARENT: ~
      NAME: "Локальные макросы"
      ISGLOBAL: 0
      DESCRIPTION: ~
      EDITIONDATE: 2004-10-20T15:07:58+03:00
  - 
    Properties: 
      Class: "TgdcReportGroup"
      RUID: 147014503_256548741
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 198477540_219712981
    Fields: 
      HASCHILDREN: 1
      PARENT: ~
      NAME: "Отчеты(gdc_frmAttrUserDefinedUSR_WG_TBLCHARGE)"
      DESCRIPTION: ~
      USERGROUPNAME: "147014503_256548741"
      EDITIONDATE: 2000-01-01T00:00:00+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147014287_256548741
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 198477540_219712981
    Fields: 
      NAME: "gdc_frmAttrUserDefinedUSR_WG_TBLCHARGE"
      DESCRIPTION: ~
      PARENT: ~
      OBJECTTYPE: 0
      MACROSGROUPKEY: "147014502_256548741 Локальные макросы"
      REPORTGROUPKEY: "147014503_256548741 Отчеты(gdc_frmAttrUserDefinedUSR_WG_TBLCHARGE)"
      CLASSNAME: ""
      OBJECTNAME: "gdc_frmAttrUserDefinedUSR_WG_TBLCHARGE"
      SUBTYPE: ""
      EDITIONDATE: 2004-10-20T15:07:58+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 198477541_219712981
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 198477540_219712981
    Fields: 
      OBJECTNAME: "gdc_frmAttrUserDefinedUSR_WG_TBLCHARGE"
      MODULE: "REPORTMAIN"
      LANGUAGE: "VBScript"
      NAME: "rp_FeeCalc_Prot"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        Function rp_FeeCalc_Prot(OwnerForm)
          Dim qProt
          Dim gdcObject, EmplKey, TotalDocKey, FeeTypeKey
        
          Set gdcObject = OwnerForm.gdcObject
          EmplKey = gdcObject.FieldByName("USR$EMPLKEY").AsInteger
          TotalDocKey = gdcObject.FieldByName("USR$TOTALDOCKEY").AsInteger
          FeeTypeKey = gdcObject.FieldByName("USR$FEETYPEKEY").AsInteger
          
          BaseQueryList.Clear
          Set qProt = BaseQueryList.Query(BaseQueryList.Add("Prot", 0))
          qProt.SQL = _
            " SELECT * FROM USR$WG_TBLCHARGE_PROT" & _
            " WHERE" & _
            "       USR$EMPLKEY = " & EmplKey & _
            "   AND USR$TOTALDOCKEY = " & TotalDocKey & _
            "   AND USR$FEETYPEKEY = " & FeeTypeKey
          qProt.Open
        
          Set rp_FeeCalc_Prot = BaseQueryList
        End Function
        
      DISPLAYSCRIPT: | 
        RP_FEECALC_PROT
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147014287_256548741 gdc_frmAttrUserDefinedUSR_WG_TBLCHARGE"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNURkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-09-09T12:30:03+03:00
  - 
    Properties: 
      Class: "TgdcTemplate"
      RUID: 199205137_234369940
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 199204906_234369940
    Fields: 
      NAME: "Зарплата.Начисления.Протокол"
      DESCRIPTION: ~
      TEMPLATEDATA: | 
        <?xml version="1.0" encoding="utf-8"?>
        <Tgs_fr4SingleReport Version="4.12.6" DotMatrixReport="False" IniFile="\Software\Fast Reports" PreviewOptions.Buttons="4095" PreviewOptions.Zoom="1" PrintOptions.Printer="По умолчанию" PrintOptions.PrintOnSheet="0" ReportOptions.CreateDate="41891,5121925926" ReportOptions.Description.Text="" ReportOptions.LastChange="41891,518099456" ScriptLanguage="PascalScript" ScriptText.Text="begin&#13;&#10;&#13;&#10;end." PropData="08446174617365747301010C2200000020446174615365743D2250524F542220446174615365744E616D653D2250524F54220000095661726961626C65730100055374796C650100">
          <TfrxDataPage Name="Data" Height="1000" Left="0" Top="0" Width="1000"/>
          <TfrxReportPage Name="Page1" PaperWidth="210" PaperHeight="297" PaperSize="9" LeftMargin="10" RightMargin="10" TopMargin="10" BottomMargin="10" ColumnWidth="0" ColumnPositions.Text="" HGuides.Text="" VGuides.Text="">
            <TfrxMasterData Name="MasterData1" Height="18,89765" Left="0" Top="18,89765" Width="718,1107" ColumnWidth="0" ColumnGap="0" DataSetName="PROT" RowCount="0" Stretched="True">
              <TfrxMemoView Name="PROTUSRDESCRIPTION" Left="3,77953" Top="0" Width="185,19697" Height="18,89765" ShowHint="False" StretchMode="smActualHeight" AutoWidth="True" AllowExpressions="False" DataField="USR$DESCRIPTION" DataSetName="PROT" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Courier New" Font.Style="0" ParentFont="False" Text="[PROT.&#34;USR$DESCRIPTION&#34;]"/>
            </TfrxMasterData>
          </TfrxReportPage>
        </Tgs_fr4SingleReport>
        
      TEMPLATETYPE: "FR4"
      EDITIONDATE: 2014-09-09T12:30:03+03:00
  - 
    Properties: 
      Class: "TgdcReport"
      RUID: 198477540_219712981
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "Протокол начисления/удержания"
      DESCRIPTION: ~
      FRQREFRESH: 1
      REPORTGROUPKEY: "147014503_256548741 Отчеты(gdc_frmAttrUserDefinedUSR_WG_TBLCHARGE)"
      PARAMFORMULAKEY: ~
      MAINFORMULAKEY: "198477541_219712981 rp_FeeCalc_Prot"
      EVENTFORMULAKEY: ~
      TEMPLATEKEY: "199205137_234369940 Зарплата.Начисления.Протокол"
      ISREBUILD: 1
      SERVERKEY: ~
      ISLOCALEXECUTE: 1
      PREVIEW: 1
      GLOBALREPORTKEY: ~
      EDITIONDATE: 2014-09-09T12:30:03+03:00
      DISPLAYINMENU: 1
      FOLDERKEY: ~
      MODALPREVIEW: 0
  - 
    Properties: 
      Class: "TgdcMacrosGroup"
      RUID: 147067101_481542897
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 199204906_234369940
    Fields: 
      HASCHILDREN: ~
      OBJECTNAME: "gdc_frmUserSimpleDocument147067079_453357870"
      OBJECTPARENT: ~
      CLASSNAME: ""
      SUBTYPE: ""
      PARENT: ~
      NAME: "Локальные макросы"
      ISGLOBAL: 0
      DESCRIPTION: ~
      EDITIONDATE: 2005-10-14T10:56:53+03:00
  - 
    Properties: 
      Class: "TgdcReportGroup"
      RUID: 147067102_481542897
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 199204906_234369940
    Fields: 
      HASCHILDREN: 1
      PARENT: ~
      NAME: "Отчеты(gdc_frmUserSimpleDocument147067079_453357870)1"
      DESCRIPTION: ~
      USERGROUPNAME: "147067102_453357870"
      EDITIONDATE: 2000-01-01T00:00:00+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147067094_453357870
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 199204906_234369940
    Fields: 
      NAME: "gdc_frmUserSimpleDocument147067079_453357870"
      DESCRIPTION: ~
      PARENT: ~
      OBJECTTYPE: 0
      MACROSGROUPKEY: "147067101_481542897 Локальные макросы"
      REPORTGROUPKEY: "147067102_481542897 Отчеты(gdc_frmUserSimpleDocument147067079_453357870)1"
      CLASSNAME: ""
      OBJECTNAME: "gdc_frmUserSimpleDocument147067079_453357870"
      SUBTYPE: ""
      EDITIONDATE: 2005-10-14T10:56:53+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 199204907_234369940
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 199204906_234369940
    Fields: 
      OBJECTNAME: "gdc_frmUserSimpleDocument147067079_453357870"
      MODULE: "REPORTMAIN"
      LANGUAGE: "VBScript"
      NAME: "rp_Alimony_Prot"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        Function rp_Alimony_Prot(OwnerForm, TotalDocKey)
          Dim qProt
          Dim gdcObject, EmplKey, FeeTypeKey
        
          Set gdcObject = OwnerForm.gdcObject
          EmplKey = gdcObject.FieldByName("USR$EMPLKEY").AsInteger
          FeeTypeKey = gdcBaseManager.GetIDByRUIDString(wg_FeeType_Alimony_RUID)
        
          BaseQueryList.Clear
          Set qProt = BaseQueryList.Query(BaseQueryList.Add("Prot", 0))
          qProt.SQL = _
            " SELECT * FROM USR$WG_TBLCHARGE_PROT" & _
            " WHERE" & _
            "       USR$EMPLKEY = " & EmplKey & _
            "   AND USR$TOTALDOCKEY = " & TotalDocKey(0) & _
            "   AND USR$FEETYPEKEY = " & FeeTypeKey
          qProt.Open
        
          Set rp_Alimony_Prot = BaseQueryList
        End Function
        
      DISPLAYSCRIPT: | 
        RP_ALIMONY_PROT
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147067094_453357870 gdc_frmUserSimpleDocument147067079_453357870"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNUUFJTVAsAAABUT1RBTERPQ0tFWRMAAADI8u7j7uLu5SDt4Pfo8evl7ejlDAAAAFVTUiRX
        R19UT1RBTAgAAABVU1IkTkFNRQsAAABET0NVTUVOVEtFWQcdAAAAVVNSJERBVEVCRUdJTiA+PSAn
        MjAxNC0wMS0wMScAAAAAAgAAAF5ERk5TVEZMUFI=
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-09-09T12:26:47+03:00
  - 
    Properties: 
      Class: "TgdcReport"
      RUID: 199204906_234369940
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "Протокол удержания алиментов"
      DESCRIPTION: ~
      FRQREFRESH: 1
      REPORTGROUPKEY: "147067102_481542897 Отчеты(gdc_frmUserSimpleDocument147067079_453357870)1"
      PARAMFORMULAKEY: ~
      MAINFORMULAKEY: "199204907_234369940 rp_Alimony_Prot"
      EVENTFORMULAKEY: ~
      TEMPLATEKEY: "199205137_234369940 Зарплата.Начисления.Протокол"
      ISREBUILD: 1
      SERVERKEY: ~
      ISLOCALEXECUTE: 1
      PREVIEW: 1
      GLOBALREPORTKEY: ~
      EDITIONDATE: 2014-09-09T12:26:47+03:00
      DISPLAYINMENU: 1
      FOLDERKEY: ~
      MODALPREVIEW: 0
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147051490_1011422021
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "WAGE"
      LANGUAGE: "VBScript"
      NAME: "wg_FeeFineCalc"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_GetAlimonySum
        '#include wg_CalcTransferSum
        '#include wg_RoundSum
        '#include wg_EmplMoveList
        '#include wg_GetAccountKey
        '<pl>
        '#include wg_FeeAlimonyCalc_pl
        '</pl>
        function wg_FeeFineCalc(ByRef wg_EmployeeCharge, ByVal TotalDocKey, ByVal FeeTypeKey, ByRef obj_FeeData)
        'Расчет штрафов и расходов на их пересылку
          wg_FeeFineCalc = 0
        
          Dim wg_FeeType_TransferDed_ID, wg_FeeType_AlimonyDebt_ID
          Dim AccountKey, AccountKeyDebt, AccountKeyTransf
        
          wg_FeeType_TransferDed_ID = gdcBaseManager.GetIDByRUIDString(wg_FeeType_TransferDed_RUID)
          wg_FeeType_AlimonyDebt_ID = gdcBaseManager.GetIDByRUIDString("147049310_1011422021")
        
          AccountKey = wg_GetAccountKey(FeeTypeKey, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.EndDate)
          AccountKeyDebt = wg_GetAccountKey(wg_FeeType_AlimonyDebt_ID, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.EndDate)
          AccountKeyTransf = wg_GetAccountKey(wg_FeeType_TransferDed_ID, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.EndDate)
        
          '<pl>
          Dim AccountKeyArr
          '
          AccountKeyArr = Array(AccountKey, AccountKeyDebt, AccountKeyTransf)
        
          Dim frmAlimony, dlgAlimony
          Dim Prolog_Alimony
          Dim Scope
          Scope = "wg_fee_fine"
          '
          Set frmAlimony = _
            Application.FindComponent("gdc_frmUserComplexDocument147567052_119619099")
            '
          If Assigned(frmAlimony) Then
            Set dlgAlimony = _
              Application.FindComponent("gdc_dlgUserSimpleDocument147050774_1011422021")
          End If
          '
          If Assigned(dlgAlimony) Then
            Set Prolog_Alimony = dlgAlimony.FindComponent("usrg_Prolog_Alimony")
            If Assigned(Prolog_Alimony) Then
              If Prolog_Alimony.Checked = True Then
                'Расчет через Пролог-скрипт
                wg_FeeFineCalc = _
                  wg_FeeAlimonyCalc_pl(wg_EmployeeCharge, TotalDocKey, FeeTypeKey, AccountKeyArr, Scope)
                Exit Function
              End If
            End If
          Else
            'Расчет через Пролог-скрипт
            wg_FeeFineCalc = _
              wg_FeeAlimonyCalc_pl(wg_EmployeeCharge, TotalDocKey, FeeTypeKey, AccountKeyArr, Scope)
            Exit Function
          End If
          '</pl>
        
          dim Creator
          set Creator = New TCreator
        
          set MoveCard = wg_EmplMoveList.MoveCardList(wg_EmployeeCharge.EmployeeKey, null)._
            MoveCardByDate(wg_EmployeeCharge.EndDate)
            
          if Assigned(MoveCard) then
            wg_FeeType_TransferDed_ID = gdcBaseManager.GetIDByRUIDString(wg_FeeType_TransferDed_RUID)
        
            set wg_Alimony = New Twg_Alimony
        
            wg_EmployeeCharge.FirstMoveKey = MoveCard.FirstMoveKey
            'Класс для расчета формул
            set wg_FoCal = New Twg_FoCal
            set wg_FoCal.ReadTransaction = wg_EmployeeCharge.ReadTransaction
            wg_FoCal.EmplKey   = wg_EmployeeCharge.Employeekey
            wg_FoCal.DateBegin = wg_EmployeeCharge.BeginDate
            wg_FoCal.DateEnd   = wg_EmployeeCharge.EndDate
        
            set IBSQL = Creator.GetObject(nil, "TIBSQL", "")
            IBSQL.Transaction = wg_EmployeeCharge.ReadTransaction
            'Выбираем документы о назначении штрафа
            IBSQL.SQL.Text = " SELECT calc.* " & _
              " FROM GD_DOCUMENT d " & _
              " LEFT JOIN usr$wg_alimony calc ON calc.DOCUMENTKEY = d.ID " & _
              " WHERE d.DOCUMENTTYPEKEY = :doctype AND " & _
              "   calc.usr$emplkey = :emplkey AND " & _
              "   calc.usr$datebegin <= :dateend AND " & _
              "   (calc.usr$dateend >= :datebegin or calc.usr$dateend is NULL) " & _
              " ORDER BY calc.usr$datebegin "
            IBSQL.ParamByName("DateBegin").AsDateTime = wg_EmployeeCharge.BeginDate
            IBSQL.ParamByName("DateEnd").AsDateTime =  wg_EmployeeCharge.EndDate
            IBSQL.ParamByName("emplkey").AsInteger = wg_EmployeeCharge.Employeekey
            IBSQL.ParamByName("doctype").AsInteger = gdcBaseManager.GetIdByRuidString("147050774_1011422021")
            IBSQL.ExecQuery
        
            'Оставшееся деньги
            RestSum = wg_EmployeeCharge.Debit - wg_EmployeeCharge.Credit + wg_EmployeeCharge.PayedOut
        
           'Добавление алиментов в объект класса wg_Alimony
            FineReservAll = 0
            while not IBSQL.Eof
        
                Sum = wg_GetAlimonySum(wg_FoCal, IBSQL.FieldByName("usr$formula").AsString, _
                      IBSQL.FieldByName("usr$datebegin").AsDateTime, wg_EmployeeCharge.BeginDate)
               'Округление
                Sum = wg_RoundSum(FeeTypeKey, Sum)
                'Суммы для резерва денег по штрафам и суммы для их перевода
                if not IBSQL.FieldByName("usr$transfertypekey").isNull then
                  ReservTransferSum = wg_RoundSum(wg_FeeType_TransferDed_ID, Sum * _
                    wg_TransferDed.Types(IBSQL.FieldByName("usr$transfertypekey").AsInteger).GetPercent(wg_EmployeeCharge.EndDate, Sum) / 100)
                else
                  ReservTransferSum = 0
                end if
                'Если резервировать некуда, то ...
                if FineReservAll + Sum + ReservTransferSum > RestSum then
                  SumTmp = RestSum - FineReservAll            'Резервируем все деньги, которые остаются
                else
                  SumTmp = Sum + ReservTransferSum
                end if
                if SumTmp < 0 then
                  SumTmp = 0
                end if
                'Добавление данных в экземпляр класса  ?
                call wg_Alimony.Add(IBSQL.FieldByName("documentkey").AsInteger, Sum, _
                               IBSQL.FieldByName("usr$restpercent").AsCurrency, _
                               IBSQL.FieldByName("usr$transfertypekey").Value, SumTmp)
                               'Sum + ReservTransferSum)
                FineReservAll =  FineReservAll + SumTmp
                'Sum + ReservTransferSum
              'end if
              IBSQL.Next
            wend
            IBSQL.Close
        
            FineDebtAllSum = 0
            FineAllSum = 0
            TransferAllSum = 0
            OverReservedSum = 0
            
            'dim AccountKey, AccountKeyTransf
            'AccountKey = wg_GetAccountKey(FeeTypeKey, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.EndDate)
            'AccountKeyTransf = wg_GetAccountKey(wg_FeeType_TransferDed_ID, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.BeginDate)
        
            
        '    set gdcAlimonyDebt = Nothing
           'Цикл по штрафам
            for i = 0 to wg_Alimony.Count - 1
            'Определим сумму за перевод и сумму, которую может выплатить сотрудник (с учетом расходов за перевод)
              'Процент остатка. Т.е. процент, который нужно оставить сотруднику
              RestPercentSum = wg_Alimony.Item(i).RestPercent * _
                              (wg_EmployeeCharge.Debit - wg_EmployeeCharge.Credit + wg_EmployeeCharge.PayedOut) / 100
        
              'Сумма для резерва сумм других выплат. Т.е. сначала нужно выплатить деньги по , а потом по их долгам
              'Из общей резервной суммы нужно исключить текущие штрафы и те, которые уже расчитали
              FineReservAll = FineReservAll - wg_Alimony.Item(i).ReservedSum
        
        '      if AlimonyReservedSum > RestSum then
        '      end if
              OutArray = wg_CalcTransferSum(wg_Alimony.Item(i).MustPaySum, wg_Alimony.Item(i).TransferTypeKey, _
                wg_EmployeeCharge.BeginDate, RestSum - RestPercentSum - FineReservAll)
              CanPaySum = OutArray(0)
              TransferSum = OutArray(1)
              'Занести сумму за пересылку штрафов в начисления по табелю
              if TransferSum > 0 then
                call wg_EmployeeCharge.AddCharge(0, TransferSum, Null, TotalDocKey, wg_FeeType_TransferDed_ID,_
                     wg_Alimony.Item(i).ID, wg_EmployeeCharge.BeginDate, 0, 0)
                     
                call wg_EmployeeCharge.AddChargeRegNew(0, TransferSum, TotalDocKey, _
                     wg_FeeType_TransferDed_ID, AccountKeyTransf, Null, wg_Alimony.Item(i).ID)
        
              end if
        
           ''   'Определение по каким документам возможны выплаты
        
              if wg_Alimony.Item(i).Sum > CanPaySum then
        
                FineSum = CanPaySum
              else
                FineSum = wg_Alimony.Item(i).Sum
              end if
              'Занести сумму выплаченных алиментов в начисления по табелю
              if FineSum > 0 then
                call wg_EmployeeCharge.AddCharge(0, FineSum, Null, TotalDocKey, FeeTypeKey,_
                  wg_Alimony.Item(i).ID, wg_EmployeeCharge.BeginDate, 0, 0)
                call wg_EmployeeCharge.AddChargeRegNew(0, FineSum, TotalDocKey, _
                     FeeTypeKey, AccountKey, Null, wg_Alimony.Item(i).ID)
              end if
        
             'Гашение долгов в суммах
              TmpSum = CanPaySum - FineSum
        
              FineAllSum = FineAllSum + FineSum
              TransferAllSum = TransferAllSum + TransferSum
              RestSum = RestSum - FineSum  - TransferSum
            next
        
        '  'Добавление сумм в журнал начислений
        '    'штрафы
        '    if FineAllSum > 0 then
        '      AccountKey = wg_GetAccountKey(FeeTypeKey, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.EndDate)
        '      call wg_EmployeeCharge.AddChargeReg(0, FineAllSum, TotalDocKey, FeeTypeKey, AccountKey, Null)
        '    end if
        '
        '    'За почтовый перевод
        '    if TransferAllSum <> 0 then
        '      AccountKey = wg_GetAccountKey(wg_FeeType_TransferDed_ID, wg_EmployeeCharge.EmployeeKey, wg_EmployeeCharge.FirstMoveKey, wg_EmployeeCharge.BeginDate)
        '      call wg_EmployeeCharge.AddChargeReg(0, TransferAllSum, TotalDocKey, wg_FeeType_TransferDed_ID, AccountKey, Null)
        '    end if
        
            wg_FeeFineCalc = FineAllSum + TransferAllSum
            wg_EmployeeCharge.FirstMoveKey = Null
          end if
        end function
        
        
        
      DISPLAYSCRIPT: | 
        WG_FEEFINECALC
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: "Штрафы, расчет"
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QRAAAAV0dfRU1QTE9ZRUVDSEFSR0URAAAAV0dfRU1QTE9ZRUVDSEFSR0UAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QLAAAAVE9UQUxET0NLRVkLAAAAVE9UQUxET0NLRVkA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QKAAAARkVFVFlQRUtFWQoAAABGRUVUWVBF
        S0VZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUCwAAAE9CSl9GRUVEQVRBCwAAAE9C
        Sl9GRUVEQVRBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2015-01-06T12:19:42+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147168466_481542897 wg_GetAlimonySum"
          - 
            ADDFUNCTIONKEY: "147166442_481542897 wg_CalcTransferSum"
          - 
            ADDFUNCTIONKEY: "147804276_375143752 wg_RoundSum"
          - 
            ADDFUNCTIONKEY: "147743985_374487969 wg_EmplMoveList"
          - 
            ADDFUNCTIONKEY: "147269378_531940465 wg_GetAccountKey"
          - 
            ADDFUNCTIONKEY: "195361376_166214404 wg_FeeAlimonyCalc_pl"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 152689242_258063421
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 152689241_258063421
    Fields: 
      OBJECTNAME: "gdc_frmUserSimpleDocument147050774_1011422021"
      MODULE: "REPORTMAIN"
      LANGUAGE: "VBScript"
      NAME: "rp_Fine_Prot"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        Function rp_Fine_Prot(OwnerForm, TotalDocKey)
          Dim qProt
          Dim gdcObject, EmplKey, FeeTypeKey
        
          Set gdcObject = OwnerForm.gdcObject
          EmplKey = gdcObject.FieldByName("USR$EMPLKEY").AsInteger
          FeeTypeKey = gdcBaseManager.GetIDByRUIDString("147049310_1011422021")
        
          BaseQueryList.Clear
          Set qProt = BaseQueryList.Query(BaseQueryList.Add("Prot", 0))
          qProt.SQL = _
            " SELECT * FROM USR$WG_TBLCHARGE_PROT" & _
            " WHERE" & _
            "       USR$EMPLKEY = " & EmplKey & _
            "   AND USR$TOTALDOCKEY = " & TotalDocKey(0) & _
            "   AND USR$FEETYPEKEY = " & FeeTypeKey
          qProt.Open
        
          Set rp_Fine_Prot = BaseQueryList
        End Function
        
      DISPLAYSCRIPT: | 
        RP_FINE_PROT
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147050778_1011422021 gdc_frmUserSimpleDocument147050774_1011422021"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNUUFJTVAsAAABUT1RBTERPQ0tFWRMAAADI8u7j7uLu5SDt4Pfo8evl7ejlDAAAAFVTUiRX
        R19UT1RBTAgAAABVU1IkTkFNRQsAAABET0NVTUVOVEtFWQcdAAAAVVNSJERBVEVCRUdJTiA+PSAn
        MjAxNC0wMS0wMScAAAAAAgAAAF5ERk5TVEZMUFI=
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2015-01-08T16:57:13+03:00
  - 
    Properties: 
      Class: "TgdcReport"
      RUID: 152689241_258063421
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "Протокол удержания штрафов"
      DESCRIPTION: ~
      FRQREFRESH: 1
      REPORTGROUPKEY: "147050783_1011422021 Отчеты(gdc_frmUserSimpleDocument147050774_1011422021)"
      PARAMFORMULAKEY: ~
      MAINFORMULAKEY: "152689242_258063421 rp_Fine_Prot"
      EVENTFORMULAKEY: ~
      TEMPLATEKEY: "199205137_234369940 Зарплата.Начисления.Протокол"
      ISREBUILD: 1
      SERVERKEY: ~
      ISLOCALEXECUTE: 1
      PREVIEW: 1
      GLOBALREPORTKEY: ~
      EDITIONDATE: 2015-01-08T16:57:13+03:00
      DISPLAYINMENU: 1
      FOLDERKEY: ~
      MODALPREVIEW: 0