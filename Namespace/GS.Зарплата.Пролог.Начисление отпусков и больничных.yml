%YAML 1.1
--- 
StructureVersion: "1.0"
Properties: 
  RUID: 528622143_99701464
  Name: "GS.Зарплата.Пролог.Начисление отпусков и больничных"
  Caption: "Начисление отпусков и больничных"
  Version: "1.0.0.46"
  Optional: False
  Internal: True
Objects: 
  - 
    Properties: 
      Class: "TgdcStoredProc"
      RUID: 151162335_5956463
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      RDB$DESCRIPTION: | 
        USR$WG_TBLCALDAY_P
      PROCEDURENAME: "USR$WG_TBLCALDAY_P"
      PROCEDURESOURCE: | 
        CREATE OR ALTER PROCEDURE USR$WG_TBLCALDAY_P (
            IN_EMPLKEY INTEGER,
            IN_FIRSTMOVE INTEGER,
            IN_DATEFROM DATE,
            IN_DATETO DATE)
        RETURNS ( 
            EMPLKEY INTEGER,
            FIRSTMOVEKEY INTEGER,
            THEDAY DATE,
            WYEAR INTEGER,
            WMONTH INTEGER,
            WDAY INTEGER,
            WDURATION INTEGER,
            WORKDAY INTEGER,
            SCHEDULEKEY INTEGER)
         AS
         BEGIN
        FOR
        
        SELECT * FROM
        (
        SELECT
          ml.USR$EMPLKEY,
          ml.USR$FIRSTMOVE AS FirstMoveKey,
          tcd.THEDAY,
          EXTRACT(YEAR FROM tcd.THEDAY) AS WYEAR,
          EXTRACT(MONTH FROM tcd.THEDAY) AS WMONTH,
          EXTRACT(DAY FROM tcd.THEDAY) AS WDAY,
          tcd.WDURATION,
          tcd.WORKDAY,
          ml.USR$SCHEDULEKEY
        FROM
          (
          SELECT FIRST 1 * FROM USR$WG_MOVEMENTLINE
          WHERE
            USR$EMPLKEY = :IN_EMPLKEY
            AND
            USR$FIRSTMOVE = :IN_FIRSTMOVE
          ORDER BY USR$DATEBEGIN
          ) ml
        JOIN
          WG_TBLCAL tc
            ON tc.ID = ml.USR$SCHEDULEKEY
        JOIN
          WG_TBLCALDAY tcd
            ON tcd.TBLCALKEY = tc.ID
        WHERE
          ml.USR$EMPLKEY = :IN_EMPLKEY
          AND
          ml.USR$FIRSTMOVE = :IN_FIRSTMOVE
          AND
          COALESCE(tcd.WDURATION, 0) > 0
          AND
          tcd.THEDAY >= :IN_DATEFROM
          AND
          tcd.THEDAY < :IN_DATETO
          AND
          tcd.THEDAY < ml.USR$DATEBEGIN
        UNION ALL
        SELECT
          ml.USR$EMPLKEY,
          ml.USR$FIRSTMOVE AS FirstMoveKey,
          tcd.THEDAY,
          EXTRACT(YEAR FROM tcd.THEDAY) AS WYEAR,
          EXTRACT(MONTH FROM tcd.THEDAY) AS WMONTH,
          EXTRACT(DAY FROM tcd.THEDAY) AS WDAY,
          tcd.WDURATION,
          tcd.WORKDAY,
          ml.USR$SCHEDULEKEY
        FROM
          USR$WG_MOVEMENTLINE ml
        RIGHT JOIN
          WG_TBLCAL tc
            ON tc.ID = ml.USR$SCHEDULEKEY
        JOIN
          WG_TBLCALDAY tcd
            ON tcd.TBLCALKEY = tc.ID
        WHERE
          ml.USR$EMPLKEY = :IN_EMPLKEY
          AND
          ml.USR$FIRSTMOVE = :IN_FIRSTMOVE
          AND
          ml.USR$DATEBEGIN < :IN_DATETO
          AND
          COALESCE(tcd.WDURATION, 0) > 0
          AND
          tcd.THEDAY >= :IN_DATEFROM
          AND
          tcd.THEDAY < :IN_DATETO
          AND
          tcd.THEDAY >= ml.USR$DATEBEGIN
          AND
          tcd.THEDAY <
            COALESCE(
              (
              SELECT
                FIRST 1
                ml_next.USR$DATEBEGIN
              FROM
                USR$WG_MOVEMENTLINE ml_next
              WHERE
                ml_next.USR$EMPLKEY = :IN_EMPLKEY
                AND
                ml_next.USR$FIRSTMOVE = :IN_FIRSTMOVE
                AND
                ml_next.USR$DATEBEGIN > ml.USR$DATEBEGIN
              ORDER BY
                ml_next.USR$DATEBEGIN
              ),
            :IN_DATETO
            )
        ) ml_union
        ORDER BY
          THEDAY
        
        INTO
            :EMPLKEY,
            :FirstMoveKey,
            :THEDAY,
            :WYEAR,
            :WMONTH,
            :WDAY,
            :WDURATION,
            :WORKDAY,
            :SCHEDULEKEY
        DO
          SUSPEND;
        
        END
        
      EDITIONDATE: 2013-11-18T12:13:11+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151158415_5956463
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "CONST"
      LANGUAGE: "VBScript"
      NAME: "pl_Const"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        'Константы и переменные Prolog
        
        Public Const scrPrologModuleName = "PROLOG"
        
        'TERM-TYPE CONSTANTS
        Public Const PL_VARIABLE = 1
        Public Const PL_ATOM = 2
        Public Const PL_INTEGER = 3
        Public Const PL_FLOAT = 4
        Public Const PL_STRING = 5
        Public Const PL_TERM = 6
        '
        
        'for Function wg_Prolog
        Public wg_Prolog_
        Set wg_Prolog_ = Nothing
        '
        
        
      DISPLAYSCRIPT: ~
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: ~
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-03-26T12:01:03+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151189468_18175251
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151189370_18175251
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "PROLOG"
      LANGUAGE: "VBScript"
      NAME: "params"
      COMMENT: ~
      SCRIPT: | 
        % params
        
        %:- [lib].
        /* member_list */
        
        :-
            dynamic(param_list/3),
            multifile(param_list/3),
            discontiguous(param_list/3).
        
        % param_list(?Scope, ?Type, ?Pairs)
        %   Scope - name of context
        %   Type  - protocol support
        %       Client: in; data; got; restart; test; ...
        %       Server: run; query; temp; log; out; clean; error; ...
        %   Pairs - list of pairs Key-Value or mixed with other
        
        % new_param_list(+Scope, +Type, +Pairs)
        new_param_list(Scope, Type, Pairs) :-
            \+ param_list(Scope, Type, Pairs),
            assertz( param_list(Scope, Type, Pairs) ),
            !.
        new_param_list(_, _, _) :-
            !.
        
        % dispose_param_list(?Scope, ?Type, ?Pairs)
        dispose_param_list(Scope, Type, Pairs) :-
            retractall( param_list(Scope, Type, Pairs) ),
            !.
        
        % get_param(?Scope, ?Type, ?Param)
        get_param(Scope, Type, Param) :-
            param_list(Scope, Type, Pairs),
            memberchk(Param, Pairs).
        % get_param(?Scope, ?Type, ?Param, ?Pairs)
        get_param(Scope, Type, Param, Pairs) :-
            param_list(Scope, Type, Pairs),
            memberchk(Param, Pairs).
        
        % get_param_list(?Scope, ?Type, ?Params)
        get_param_list(Scope, Type, Params) :-
            param_list(Scope, Type, Pairs),
            member_list(Params, Pairs).
        % get_param_list(?Scope, ?Type, ?Params, ?Pairs)
        get_param_list(Scope, Type, Params, Pairs) :-
            param_list(Scope, Type, Pairs),
            member_list(Params, Pairs).
        
        %
        get_scope(Scope) :-
            setof(Scope, Type^Pairs^param_list(Scope, Type, Pairs), ScopeList),
            member(Scope, ScopeList).
        
        %
        get_scope_list(ScopeList) :-
            setof(Scope, Type^Pairs^param_list(Scope, Type, Pairs), ScopeList),
            !.
        
        %
        get_type(Type) :-
            setof(Type, Scope^Pairs^param_list(Scope, Type, Pairs), TypeList),
            member(Type, TypeList).
        
        %
        get_type_list(TypeList) :-
            setof(Type, Scope^Pairs^param_list(Scope, Type, Pairs), TypeList),
            !.
        
        %
        get_scope_type(Scope-Type) :-
            setof(Scope-Type, Pairs^param_list(Scope, Type, Pairs), ScopeTypeList),
            member(Scope-Type, ScopeTypeList).
        
        %
        get_scope_type_list(ScopeTypeList) :-
            setof(Scope-Type, Pairs^param_list(Scope, Type, Pairs), ScopeTypeList),
            !.
        
        %
        
        
      DISPLAYSCRIPT: ~
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: ~
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-04-17T11:11:57+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151189469_18175251
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151189370_18175251
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "PROLOG"
      LANGUAGE: "VBScript"
      NAME: "lib"
      COMMENT: ~
      SCRIPT: | 
        % lib
        
        % день недели
        weekday(date(Year, Month, Day), WeekDay) :-
            A is (14 - Month) // 12,
            Y is Year - A,
            M is Month + 12 * A - 2,
            WeekDay0 is (7000 + (Day + Y + Y // 4 - Y // 100 + Y // 400 + (31 * M) // 12)) mod 7,
            WeekDay is WeekDay0 + 1,
            !.
        weekday(Date, WeekDay) :-
            atom_date(Date, date(Year, Month, Day)),
            weekday(date(Year, Month, Day), WeekDay),
            !.
        
        % подготовка SQL-строки
        prepare_sql(InSQL, [], InSQL) :-
            !.
        prepare_sql(InSQL,[Key-Value|Pairs], OutSQL) :-
            replace_all(InSQL, Key, Value, InSQL1),
            !,
            prepare_sql(InSQL1, Pairs, OutSQL).
        
        % to_currency(+NumIn, -NumOut)
        to_currency(NumIn, NumOut) :-
            to_currency(NumIn, NumOut, 4),
            !.
        % to_currency(+NumIn, -NumOut, +Round)
        to_currency(NumIn, NumOut, Round) :-
            number(NumIn), integer(Round),
            NumOut is float( round( NumIn * (10 ** Round) ) / (10 ** Round) ),
            !.
        
        % make_list(+Num, -List)
        make_list(Num, List) :-
            integer(Num),
            make_list(Num, List, 0),
            !.
        
        make_list(Num, [], Num) :-
            !.
        make_list(Num, [_|Tail], Zero) :-
            Num1 is Num - 1,
            !,
            make_list(Num1, Tail, Zero).
        
        
        % exist_in(+Search, +In)
        exist_in(Search, In) :-
            text_list([Search, In], [SearchCodes, InCodes]),
            append(_, MiddleCodes, InCodes),
            append(SearchCodes, _, MiddleCodes),
            !.
        
        % replace_all(+In, +Search, +Replace, -Out)
        replace_all(In, Search, Replace, Out) :-
            replace(In, Search, Replace, In1),
            \+ In = In1,
            !,
            replace_all(In1, Search, Replace, Out).
        replace_all(In, _, _, In).
        
        % replace(+In, +Search, +Replace, -Out)
        replace(In, Search, Replace, Out) :-
            text_list([In, Search, Replace], [InCodes, SearchCodes, ReplaceCodes]),
            append(Part1, MiddleCodes, InCodes),
            append(SearchCodes, Part2, MiddleCodes),
            append([Part1, ReplaceCodes, Part2], OutCodes),
            text_in_out(In, OutCodes, Out),
            !.
        replace(In, _, _, In).
        
        %
        text_list([], []) :-
            !.
        text_list([Head|Teil], [Head1|Rest]) :-
            text_in_out(Head, Head1, Head),
            !,
            text_list(Teil, Rest).
        
        %
        text_in_out(In, OutCodes, Out) :-
            ( atom(In), atom_codes(Out, OutCodes)
            ; string(In), string_codes(Out, OutCodes)
            ; number(In), number_codes(Out, OutCodes)
            ; integer_list(In), Out = In ),
            !.
        
        %
        integer_list([]) :-
            !.
        integer_list([Head|Tail]) :-
            integer(Head),
            !,
            integer_list(Tail).
        
        %
        member_list([], _) :-
            !.
        member_list([Head|Tail], List) :-
            memberchk(Head, List),
            !,
            member_list(Tail, List).
        
        %
        
        
      DISPLAYSCRIPT: ~
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: ~
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-04-17T11:11:35+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151189470_18175251
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151189370_18175251
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "PROLOG"
      LANGUAGE: "VBScript"
      NAME: "twg_avg_wage_sql"
      COMMENT: ~
      SCRIPT: | 
        %% twg_avg_wage_sql
        %  спецификации и sql-шаблоны для базы знаний twg_avg_wage
        %
        
        :-
            GetSQL = [gd_pl_ds/5, get_sql/5],
            %dynamic(GetSQL),
            multifile(GetSQL),
            discontiguous(GetSQL).
        
        %
        wg_valid_sql([
                    % section twg_avg_wage
                    %  05. Начисление отпусков
                    -usr_wg_DbfSums/6, % 05, 06, 12
                    usr_wg_MovementLine/15, % 05, 06, 12
                    usr_wg_FCRate/4,
                    usr_wg_TblCalDay/9, % 05, 06, 12
                    -usr_wg_TblDayNorm/8, % 05, 06
                    -usr_wg_TblYearNorm/5,
                    usr_wg_TblCalLine/7, % 05, 06, 12
                    usr_wg_TblCal_FlexLine/68, % 05, 06, 12
                    usr_wg_HourType/13, % 05, 06
                    usr_wg_TblCharge/10, % 05, 06, 12
                    usr_wg_FeeType/5, % 05, 06, 12
                    usr_wg_FeeTypeNoCoef/4,
                    usr_wg_BadHourType/3,
                    usr_wg_BadFeeType/3,
                    usr_wg_SpecDep/3,
                    %  06. Начисление больничных
                    usr_wg_AvgWage/6,
                    usr_wg_FeeTypeProp/4,
                    wg_holiday/1,
                    usr_wg_ExclDays/6,
                    % 12. Начисление по-среднему
                    usr_wg_TblChargeBonus/8,
                    % section twg_struct
                    %wg_holiday/1,
                    wg_vacation_slice/2,
                    gd_const_budget/2,
                    gd_const_AvgSalaryRB/2,
                    %usr_wg_TblDayNorm/8,
                    wg_job_ill_type/1,
                    -
                    ]).
        
        %
        is_valid_sql(Functor/Arity) :-
            wg_valid_sql(ValidSQL),
            memberchk(Functor/Arity, ValidSQL),
            !.
        
        %  05. Начисление отпусков
        gd_pl_ds(wg_avg_wage_vacation, kb, usr_wg_DbfSums, 6, [
            fEmplKey-integer, fInSum-float, fInHoures-float,
            fInYear-integer, fInMonth-integer, fDateBegin-date
            ]).
        % usr_wg_DbfSums(EmplKey, InSum, InHoures, InYear, InMonth, DateBegin)
        get_sql(wg_avg_wage_vacation, kb, usr_wg_DbfSums/6,
        "SELECT \c
          Z.USR$EMPLKEY, \c
          COALESCE(Z.USR$SUM, 0) AS INSUM, \c
          COALESCE(Z.USR$MID_HOW, 0) AS INHOURES, \c
          EXTRACT(YEAR FROM IDK.USR$DATEBEGIN) AS InYear, \c
          EXTRACT(MONTH FROM IDK.USR$DATEBEGIN) AS InMonth, \c
          IDK.USR$DATEBEGIN \c
        FROM \c
          USR$GMK_SUMS Z \c
        JOIN \c
          USR$WG_TOTAL IDK \c
            ON IDK.DOCUMENTKEY  =  Z.USR$INDOCKEY \c
        WHERE \c
          Z.USR$EMPLKEY = pEmplKey \c
          AND \c
          IDK.USR$DATEBEGIN >= \'pDateCalcFrom\' \c
          AND \c
          IDK.USR$DATEBEGIN < \'pDateCalcTo\' \c
        ORDER BY \c
          Z.USR$EMPLKEY, \c
          IDK.USR$DATEBEGIN \c
        ",
            [
            pEmplKey-_, pDateCalcFrom-_, pDateCalcTo-_
            ]).
        
        gd_pl_ds(Scope, kb, usr_wg_MovementLine, 15, [
            fEmplKey-integer, fDocumentKey-integer, fFirstMoveKey-integer,
            fMoveYear-integer, fMoveMonth-integer, fDateBegin-date,
            fScheduleKey-integer, fMovementType-integer,
            fRate-float, fListNumber-string, fMSalary-float,
            fPayFormKey-integer, fSalaryKey-integer, fTSalary-float, fAvgWageRate-float
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg,
                wg_struct_sick
                ]).
        % usr_wg_MovementLine(EmplKey, DocumentKey, FirstMoveKey,
        %   MoveYear, MoveMonth, DateBegin,
        %   ScheduleKey, MovementType, Rate, ListNumber, MSalary,
        %   PayFormKey, SalaryKey, TSalary, AvgWageRate)
        get_sql(Scope, kb, usr_wg_MovementLine/15,
        "SELECT \c
          ml.USR$EMPLKEY, \c
          ml.DOCUMENTKEY, \c
          ml.USR$FIRSTMOVE AS FirstMoveKey, \c
          EXTRACT(YEAR FROM ml.USR$DATEBEGIN) AS MoveYear, \c
          EXTRACT(MONTH FROM ml.USR$DATEBEGIN) AS MoveMonth, \c
          ml.USR$DATEBEGIN, \c
          ml.USR$SCHEDULEKEY, \c
          ml.USR$MOVEMENTTYPE, \c
          COALESCE(ml.USR$RATE, 0) AS Rate, \c
          ml.USR$LISTNUMBER, \c
          COALESCE(ml.USR$MSALARY, 0) AS MSalary, \c
          COALESCE(ml.USR$PAYFORMKEY, 0) AS PayFormKey, \c
          (SELECT id FROM GD_P_GETID(pPayFormSalary_ruid)) AS SalaryKey, \c
          COALESCE(ml.USR$TSALARY, 0) AS TSalary, \c
          8 * COALESCE(USR$THOURRATE, 0) AS AvgWageRate \c
        FROM \c
          USR$WG_MOVEMENTLINE ml \c
        WHERE \c
          ml.USR$EMPLKEY = pEmplKey \c
          AND \c
          ml.USR$FIRSTMOVE = pFirstMoveKey \c
        ORDER BY \c
          ml.USR$EMPLKEY, \c
          ml.USR$FIRSTMOVE, \c
          ml.USR$DATEBEGIN \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pPayFormSalary_ruid-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg,
                wg_struct_sick
                ]).
        
        gd_pl_ds(wg_avg_wage_vacation, kb, usr_wg_FCRate, 4, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fDate-date, fFCRateSum-float
            ]).
        % usr_wg_FCRate(EmplKey, FirstMoveKey, Date, FCRateSum)
        get_sql(wg_avg_wage_vacation, kb, usr_wg_FCRate/4,
        "SELECT \c
          pEmplKey AS EmplKey, \c
          pFirstMoveKey AS FirstMoveKey, \c
          fc.USR$WG_DATE, \c
          fc.USR$WG_FCRATESUM \c
        FROM \c
          USR$WG_FCRATE fc \c
        ORDER BY \c
          fc.USR$WG_DATE \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_
            ]).
        
        gd_pl_ds(Scope, kb, usr_wg_TblCalDay, 9, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fTheDay-date, fWYear-integer, fWMonth-integer, fWDay-integer,
            fWDuration-float, fWorkDay-integer, fScheduleKey-integer
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg,
                wg_struct_sick
                ]).
        % usr_wg_TblCalDay(EmplKey, FirstMoveKey, TheDay, WYear, WMonth, WDay,
        %    WDuration, WorkDay, ScheduleKey)
        get_sql(Scope, kb, usr_wg_TblCalDay/9,
        "SELECT \c
          ml.USR$EMPLKEY, \c
          ml.USR$FIRSTMOVE AS FirstMoveKey, \c
          tcd.THEDAY, \c
          EXTRACT(YEAR FROM tcd.THEDAY) AS WYEAR, \c
          EXTRACT(MONTH FROM tcd.THEDAY) AS WMONTH, \c
          EXTRACT(DAY FROM tcd.THEDAY) AS WDAY, \c
          tcd.WDURATION, \c
          tcd.WORKDAY, \c
          ml.USR$SCHEDULEKEY \c
        FROM \c
        ( \c
        SELECT DISTINCT \c
          USR$EMPLKEY, \c
          USR$FIRSTMOVE, \c
          USR$SCHEDULEKEY \c
        FROM \c
          USR$WG_MOVEMENTLINE \c
        WHERE \c
          USR$EMPLKEY = pEmplKey \c
          AND \c
          USR$FIRSTMOVE = pFirstMoveKey \c
        ) ml \c
        JOIN \c
          WG_TBLCAL tc \c
            ON tc.ID = ml.USR$SCHEDULEKEY \c
        JOIN \c
          WG_TBLCALDAY tcd \c
            ON tcd.TBLCALKEY = tc.ID \c
        WHERE \c
          COALESCE(tcd.WDURATION, 0) > 0 \c
          AND \c
          (tcd.THEDAY >= \'pDateCalcFrom\' OR tcd.THEDAY >= \'pDateNormFrom\') \c
          AND \c
          (tcd.THEDAY < \'pDateCalcTo\' OR tcd.THEDAY < \'pDateNormTo\') \c
        ORDER BY \c
          tcd.THEDAY \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_,
            pDateCalcFrom-_, pDateCalcTo-_,
            pDateNormFrom-_, pDateNormTo-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg,
                wg_struct_sick
                ]).
        
        gd_pl_ds(Scope, kb, usr_wg_TblDayNorm, 8, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fWYear-integer, fWMonth-integer, fTheDay-date, fWDay-integer,
            fWDuration-float, fWorkDay-integer
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        % usr_wg_TblDayNorm(EmplKey, FirstMoveKey, WYear, WMonth, TheDay, WDay, WDuration, WorkDay)
        get_sql(Scope, kb, usr_wg_TblDayNorm/8,
        "\c
        SELECT EmplKey, FirstMoveKey, WYear, WMonth, TheDay, WDay, WDuration, WorkDay \c
        FROM USR$WG_TBLCALDAY_P(pEmplKey, pFirstMoveKey, \'pDateCalcFrom\', \'pDateCalcTo\') \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pDateCalcFrom-_, pDateCalcTo-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        
        gd_pl_ds(wg_avg_wage_vacation, kb, usr_wg_TblYearNorm, 5,
            [
            fEmplKey-integer, fFirstMoveKey-integer,
            fWYear-integer,
            fWHoures-float, fWDays-integer
            ]).
        % usr_wg_TblYearNorm(EmplKey, FirstMoveKey, WYear, WHoures, WDays)
        get_sql(wg_avg_wage_vacation, kb, usr_wg_TblYearNorm/5,
        "\c
        SELECT EmplKey, FirstMoveKey, WYear, SUM(WDuration) AS WHoures, SUM(WorkDay) AS WDays \c
        FROM USR$WG_TBLCALDAY_P(pEmplKey, pFirstMoveKey, \'pDateNormFrom\', \'pDateNormTo\') \c
        GROUP BY EmplKey, FirstMoveKey, WYear \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pDateNormFrom-_, pDateNormTo-_
            ]).
        
        gd_pl_ds(Scope, kb, usr_wg_TblCalLine, 7, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fCalYear-integer, fCalMonth-integer, fDate-date,
            fDuration-float, fHoureType-integer
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        % usr_wg_TblCalLine(EmplKey, FirstMoveKey, CalYear, CalMonth, Date, Duration, HoureType)
        get_sql(Scope, kb, usr_wg_TblCalLine/7,
        "SELECT \c
          tc.USR$EMPLKEY, \c
          tc.USR$FIRSTMOVEKEY, \c
          EXTRACT(YEAR FROM tcl.USR$DATE) AS CalYear, \c
          EXTRACT(MONTH FROM tcl.USR$DATE) AS CalMonth, \c
          tcl.USR$DATE, \c
          tcl.USR$DURATION, \c
          tcl.USR$HOURTYPE \c
        FROM \c
          USR$WG_TBLCAL tc \c
        JOIN \c
          USR$WG_TBLCALLINE tcl \c
            ON tcl.MASTERKEY = tc.DOCUMENTKEY \c
        WHERE \c
          tc.USR$EMPLKEY = pEmplKey \c
          AND \c
          tc.USR$FIRSTMOVEKEY = pFirstMoveKey \c
          AND \c
          tcl.USR$DATE >= \'pDateCalcFrom\' \c
          AND \c
          tcl.USR$DATE < \'pDateCalcTo\' \c
        ORDER BY \c
          tc.USR$EMPLKEY, \c
          tc.USR$FIRSTMOVEKEY, \c
          tcl.USR$DATE \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pDateCalcFrom-_, pDateCalcTo-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        
        gd_pl_ds(Scope, kb, usr_wg_TblCal_FlexLine, 68, [
            fFlexType-string,
            fEmplKey-integer, fFirstMoveKey-integer,
            fCalYear-integer, fCalMonth-integer, fDateBegin-date,
            fS1-variant, fH1-variant, fS2-variant, fH2-variant,
            fS3-variant, fH3-variant, fS4-variant, fH4-variant,
            fS5-variant, fH5-variant, fS6-variant, fH6-variant,
            fS7-variant, fH7-variant, fS8-variant, fH8-variant,
            fS9-variant, fH9-variant, fS10-variant, fH10-variant,
            fS11-variant, fH11-variant, fS12-variant, fH12-variant,
            fS13-variant, fH13-variant, fS14-variant, fH14-variant,
            fS15-variant, fH15-variant, fS16-variant, fH16-variant,
            fS17-variant, fH17-variant, fS18-variant, fH18-variant,
            fS19-variant, fH19-variant, fS20-variant, fH20-variant,
            fS21-variant, fH21-variant, fS22-variant, fH22-variant,
            fS23-variant, fH23-variant, fS24-variant, fH24-variant,
            fS25-variant, fH25-variant, fS26-variant, fH26-variant,
            fS27-variant, fH27-variant, fS28-variant, fH28-variant,
            fS29-variant, fH29-variant, fS30-variant, fH30-variant,
            fS31-variant, fH31-variant
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg,
                wg_struct_sick
                ]).
        % usr_wg_TblCal_FlexLine(FlexType, EmplKey, FirstMoveKey, CalYear, CalMonth, DateBegin, S1, H1, ..., S31, H31)
        get_sql(Scope, kb, usr_wg_TblCal_FlexLine/68,
        "SELECT \c
          CASE gd.DOCUMENTTYPEKEY \c
            WHEN \c
              (SELECT id FROM GD_P_GETID(pTblCal_DocType_Plan_ruid)) \c
                THEN \'plan\' \c
            WHEN \c
              (SELECT id FROM GD_P_GETID(pTblCal_DocType_Fact_ruid)) \c
                THEN \'fact\' \c
            ELSE \c
                \'unknown\' \c
          END \c
            AS FlexType, \c
          tcfl.USR$EMPLKEY, \c
          tcfl.USR$FIRSTMOVEKEY, \c
          EXTRACT(YEAR FROM t.USR$DATEBEGIN) AS CalYear, \c
          EXTRACT(MONTH FROM t.USR$DATEBEGIN) AS CalMonth, \c
          t.USR$DATEBEGIN, \c
          tcfl.USR$S1, tcfl.USR$H1, tcfl.USR$S2, tcfl.USR$H2, \c
          tcfl.USR$S3, tcfl.USR$H3, tcfl.USR$S4, tcfl.USR$H4, \c
          tcfl.USR$S5, tcfl.USR$H5, tcfl.USR$S6, tcfl.USR$H6, \c
          tcfl.USR$S7, tcfl.USR$H7, tcfl.USR$S8, tcfl.USR$H8, \c
          tcfl.USR$S9, tcfl.USR$H9, tcfl.USR$S10, tcfl.USR$H10, \c
          tcfl.USR$S11, tcfl.USR$H11, tcfl.USR$S12, tcfl.USR$H12, \c
          tcfl.USR$S13, tcfl.USR$H13, tcfl.USR$S14, tcfl.USR$H14, \c
          tcfl.USR$S15, tcfl.USR$H15, tcfl.USR$S16, tcfl.USR$H16, \c
          tcfl.USR$S17, tcfl.USR$H17, tcfl.USR$S18, tcfl.USR$H18, \c
          tcfl.USR$S19, tcfl.USR$H19, tcfl.USR$S20, tcfl.USR$H20, \c
          tcfl.USR$S21, tcfl.USR$H21, tcfl.USR$S22, tcfl.USR$H22, \c
          tcfl.USR$S23, tcfl.USR$H23, tcfl.USR$S24, tcfl.USR$H24, \c
          tcfl.USR$S25, tcfl.USR$H25, tcfl.USR$S26, tcfl.USR$H26, \c
          tcfl.USR$S27, tcfl.USR$H27, tcfl.USR$S28, tcfl.USR$H28, \c
          tcfl.USR$S29, tcfl.USR$H29, tcfl.USR$S30, tcfl.USR$H30, \c
          tcfl.USR$S31, tcfl.USR$H31 \c
        FROM \c
          GD_DOCUMENT gd \c
        JOIN \c
          USR$WG_TBLCAL_FLEXLINE tcfl \c
            ON gd.ID = tcfl.DOCUMENTKEY \c
        JOIN \c
          USR$WG_TBLCAL_FLEX tcf \c
            ON tcf.DOCUMENTKEY = tcfl.MASTERKEY \c
        JOIN \c
          USR$WG_TOTAL t \c
            ON t.DOCUMENTKEY = tcf.USR$TOTALDOCKEY \c
        WHERE \c
          tcfl.USR$EMPLKEY = pEmplKey \c
          AND \c
          tcfl.USR$FIRSTMOVEKEY = pFirstMoveKey \c
          AND \c
          t.USR$DATEBEGIN >= \'pDateCalcFrom\' \c
          AND \c
          t.USR$DATEBEGIN < \'pDateCalcTo\' \c
         ORDER BY \c
           tcfl.USR$EMPLKEY, \c
           tcfl.USR$FIRSTMOVEKEY, \c
           t.USR$DATEBEGIN \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pDateCalcFrom-_, pDateCalcTo-_,
            pTblCal_DocType_Plan_ruid-_, pTblCal_DocType_Fact_ruid-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg,
                wg_struct_sick
                ]).
        
        gd_pl_ds(Scope, kb, usr_wg_HourType, 13, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fID-integer, fCode-string, fDigitCode-string,
            fDiscription-string, fIsWorked-integer, fShortName-string,
            fForCalFlex-integer, fForOverTime-integer, fForFlex-integer,
            fExcludeForSickList-integer, fExclType-string
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick
                ]).
        % usr_wg_HourType(EmplKey, FirstMoveKey,
        %   ID, Code, DigitCode, Description, IsWorked, ShortName,
        %   ForCalFlex, ForOverTime, ForFlex, ExcludeForSickList, ExclType)
        get_sql(Scope, kb, usr_wg_HourType/13,
        "SELECT \c
          pEmplKey AS EmplKey, \c
          pFirstMoveKey AS FirstMoveKey, \c
          ht.ID, \c
          ht.USR$CODE, \c
          ht.USR$DIGITCODE, \c
          ht.USR$DISCRIPTION \c,
          ht.USR$ISWORKED, \c
          ht.USR$SHORTNAME, \c
          ht.USR$FORCALFLEX, \c
          ht.USR$FOROVERTIME, \c
          ht.USR$FORFLEX, \c
          ht.USR$WG_EXCLUDEFORSICKLIST, \c
          CASE ht.ID \c
            WHEN \c
              (SELECT id FROM GD_P_GETID(pKindDayHourType_ruid)) \c
                THEN \'kind_day\' \c
            ELSE \c
                \'unknown\' \c
          END \c
            AS ExclType \c
        FROM \c
          USR$WG_HOURTYPE ht \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pKindDayHourType_ruid-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick
                ]).
        
        gd_pl_ds(Scope, kb, usr_wg_TblCharge, 10, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fCalYear-integer, fCalMonth-integer, fDateBegin-date,
            fDebit-float, fFeeTypeKey-integer, fDOW-float, fHOW-float,
            fPayPeriod-integer
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        % usr_wg_TblCharge(EmplKey, FirstMoveKey, CalYear, CalMonth, DateBegin,
        %   Debit, FeeTypeKey, DOW, HOW, PayPeriod)
        get_sql(Scope, kb, usr_wg_TblCharge/10,
        "SELECT \c
          tch.USR$EMPLKEY, \c
          tch.USR$FIRSTMOVEKEY, \c
          EXTRACT(YEAR FROM tch.USR$DATEBEGIN) AS CalYear, \c
          EXTRACT(MONTH FROM tch.USR$DATEBEGIN) AS CalMonth, \c
          tch.USR$DATEBEGIN, \c
          tch.USR$DEBIT, \c
          tch.USR$FEETYPEKEY, \c
          tch.USR$DOW, \c
          tch.USR$HOW, \c
          COALESCE(ft.USR$PAYPERIOD, 0) AS PayPeriod \c
        FROM \c
          USR$WG_TBLCHARGE tch \c
        JOIN \c
          USR$WG_FEETYPE ft \c
            ON ft.ID = tch.USR$FEETYPEKEY \c
        WHERE \c
          tch.USR$EMPLKEY = pEmplKey \c
          AND \c
          NOT tch.USR$DEBIT = 0 \c
          AND \c
          tch.USR$DATEBEGIN >= \'pDateCalcFrom\' \c
          AND \c
          tch.USR$DATEBEGIN < \'pDateCalcTo\' \c
          AND \c
          COALESCE(ft.USR$PAYPERIOD, 0) >= 0 \c
        ORDER BY \c
          tch.USR$EMPLKEY, \c
          tch.USR$DATEBEGIN \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pDateCalcFrom-_, pDateCalcTo-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        
        gd_pl_ds(Scope, kb, usr_wg_TblChargeBonus, 8, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fCalYear-integer, fCalMonth-integer, fDateBegin-date,
            fDebit-float, fFeeTypeKey-integer,
            fPayPeriod-integer
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_avg
                ]).
        % usr_wg_TblChargeBonus(EmplKey, FirstMoveKey, CalYear, CalMonth, DateBegin,
        %   Debit, FeeTypeKey, PayPeriod)
        get_sql(Scope, kb, usr_wg_TblChargeBonus/8,
        "SELECT \c
          tch.USR$EMPLKEY, \c
          tch.USR$FIRSTMOVEKEY, \c
          EXTRACT(YEAR FROM tch.USR$DATEBEGIN) AS CalYear, \c
          EXTRACT(MONTH FROM tch.USR$DATEBEGIN) AS CalMonth, \c
          tch.USR$DATEBEGIN, \c
          tch.USR$DEBIT, \c
          tch.USR$FEETYPEKEY, \c
          COALESCE(ft.USR$PAYPERIOD, 0) AS PayPeriod \c
        FROM \c
          USR$WG_TBLCHARGE tch \c
        JOIN \c
          USR$WG_FEETYPE ft \c
            ON ft.ID = tch.USR$FEETYPEKEY \c
        WHERE \c
          tch.USR$EMPLKEY = pEmplKey \c
          AND \c
          NOT tch.USR$DEBIT = 0 \c
          AND \c
          tch.USR$DATEBEGIN >= \'pDateBonusFrom\' \c
          AND \c
          tch.USR$DATEBEGIN < \'pDateBonusTo\' \c
          AND \c
          COALESCE(ft.USR$PAYPERIOD, 0) > 1 \c
        ORDER BY \c
          tch.USR$EMPLKEY, \c
          tch.USR$DATEBEGIN \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pDateBonusFrom-_, pDateBonusTo-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_avg
                ]).
        
        gd_pl_ds(Scope, kb, usr_wg_FeeType, 5, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fFeeGroupKey-integer, fFeeTypeKey-integer,
            fAvgDayHOW-integer
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        % usr_wg_FeeType(EmplKey, FirstMoveKey, FeeGroupKey, FeeTypeKey, AvgDayHOW)
        get_sql(Scope, kb, usr_wg_FeeType/5,
        "SELECT \c
          pEmplKey AS EmplKey,  \c
          pFirstMoveKey AS FirstMoveKey, \c
          ft.USR$WG_FEEGROUPKEY, \c
          ft.USR$WG_FEETYPEKEY, \c
          ft_avg.USR$AVGDAYHOW \c
        FROM \c
          USR$CROSS179_256548741 ft \c
        JOIN \c
          USR$WG_FEETYPE ft_avg \c
            ON ft_avg.ID = ft.USR$WG_FEETYPEKEY \c
        WHERE \c
          ft.USR$WG_FEEGROUPKEY IN \c
        (SELECT id FROM GD_P_GETID(pFeeGroupKey_ruid)) \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pFeeGroupKey_ruid-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        
        gd_pl_ds(wg_avg_wage_vacation, kb, usr_wg_FeeTypeNoCoef, 4, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fFeeGroupKeyNoCoef-integer, fFeeTypeKeyNoCoef-integer
            ]).
        % usr_wg_FeeTypeNoCoef(EmplKey, FirstMoveKey, FeeGroupKeyNoCoef, FeeTypeKeyNoCoef)
        get_sql(wg_avg_wage_vacation, kb, usr_wg_FeeTypeNoCoef/4,
        "SELECT \c
          pEmplKey AS EmplKey,  \c
          pFirstMoveKey AS FirstMoveKey, \c
          ft.USR$WG_FEEGROUPKEY, \c
          ft.USR$WG_FEETYPEKEY \c
        FROM \c
          USR$CROSS179_256548741 ft \c
        JOIN \c
          USR$WG_FEETYPE ft_avg \c
            ON ft_avg.ID = ft.USR$WG_FEETYPEKEY \c
        WHERE \c
          ft.USR$WG_FEEGROUPKEY IN \c
        (SELECT id FROM GD_P_GETID(pFeeGroupKeyNoCoef_ruid)) \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pFeeGroupKeyNoCoef_ruid-_
            ]).
        
        gd_pl_ds(wg_avg_wage_vacation, kb, usr_wg_BadHourType, 3, [
            fEmplKey-integer, fFirstMoveKey-integer, fID-integer
            ]).
        % usr_wg_BadHourType(EmplKey, FirstMoveKey, ID)
        get_sql(wg_avg_wage_vacation, kb, usr_wg_BadHourType/3,
        "SELECT \c
          pEmplKey AS EmplKey, pFirstMoveKey AS FirstMoveKey, id \c
        FROM USR$WG_HOURTYPE \c
        WHERE id IN \c
        (SELECT id FROM gd_ruid \c
        WHERE xid IN (pBadHourType_xid_IN) \c
        AND dbid = pBadHourType_dbid \c
        ) \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pBadHourType_xid_IN-_, pBadHourType_dbid-_
            ]).
        
        gd_pl_ds(wg_avg_wage_vacation, kb, usr_wg_BadFeeType, 3, [
            fEmplKey-integer, fFirstMoveKey-integer, fID-integer
            ]).
        % usr_wg_BadFeeType(EmplKey, FirstMoveKey, ID)
        get_sql(wg_avg_wage_vacation, kb, usr_wg_BadFeeType/3,
        "SELECT \c
          pEmplKey AS EmplKey, pFirstMoveKey AS FirstMoveKey, id \c
        FROM USR$WG_FEETYPE \c
        WHERE id IN \c
        (SELECT id FROM gd_ruid \c
        WHERE xid IN (pBadFeeType_xid_IN) \c
        AND dbid = pBadFeeType_dbid \c
        ) \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pBadFeeType_xid_IN-_, pBadFeeType_dbid-_
            ]).
        
        gd_pl_ds(wg_avg_wage_vacation, kb, usr_wg_SpecDep, 3, [
            fEmplKey-integer, fFirstMoveKey-integer, fID-integer
            ]).
        % usr_wg_SpecDep(EmplKey, FirstMoveKey, ID)
        get_sql(wg_avg_wage_vacation, kb, usr_wg_SpecDep/3,
        "SELECT \c
          pEmplKey AS EmplKey, pFirstMoveKey AS FirstMoveKey, id \c
        FROM \c
          GD_P_GETID(pSpecDep_ruid) \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pSpecDep_ruid-_
            ]).
        
        %  06. Начисление больничных
        gd_pl_ds(Scope, kb, usr_wg_DbfSums, 6, [
            fEmplKey-integer, fInSum-float, fInHoures-float,
            fInYear-integer, fInMonth-integer, fDateBegin-date
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        % usr_wg_DbfSums(EmplKey, InSum, InHoures, InYear, InMonth, DateBegin)
        get_sql(Scope, kb, usr_wg_DbfSums/6,
        "SELECT \c
          Z.USR$EMPLKEY, \c
          COALESCE(Z.USR$SUMSICK, 0) AS INSUM, \c
          COALESCE(Z.USR$MID_HOW, 0) AS INHOURES, \c
          EXTRACT(YEAR FROM IDK.USR$DATEBEGIN) AS InYear, \c
          EXTRACT(MONTH FROM IDK.USR$DATEBEGIN) AS InMonth, \c
          IDK.USR$DATEBEGIN \c
        FROM \c
          USR$GMK_SUMS Z \c
        JOIN \c
          USR$WG_TOTAL IDK \c
            ON IDK.DOCUMENTKEY  =  Z.USR$INDOCKEY \c
        WHERE \c
          Z.USR$EMPLKEY = pEmplKey \c
          AND \c
          IDK.USR$DATEBEGIN >= \'pDateCalcFrom\' \c
          AND \c
          IDK.USR$DATEBEGIN < \'pDateCalcTo\' \c
        ORDER BY \c
          Z.USR$EMPLKEY, \c
          IDK.USR$DATEBEGIN \c
        ",
            [
            pEmplKey-_, pDateCalcFrom-_, pDateCalcTo-_
            ]) :-
            memberchk(Scope, [
                wg_avg_wage_sick, wg_avg_wage_avg
                ]).
        
        gd_pl_ds(wg_avg_wage_sick, kb, usr_wg_AvgWage, 6, [
            fAvgType-string,
            fEmplKey-integer, fFirstMoveKey-integer,
            fCalYear-integer, fCalMonth-integer,
            fAvgSumma-float
            ]).
        % usr_wg_AvgWage(AvgType, EmplKey, FirstMoveKey, CalYear, CalMonth, AvgSumma)
        get_sql(wg_avg_wage_sick, kb, usr_wg_AvgWage/6,
        "SELECT \c
          \'vacation\' AS AvgType, \c
          v.USR$EMPLKEY, \c
          v.USR$FIRSTMOVEKEY, \c
          EXTRACT(YEAR FROM vl.USR$DATEBEGIN) AS CalYear, \c
          EXTRACT(MONTH FROM vl.USR$DATEBEGIN) AS CalMonth, \c
          v.USR$AVGSUMMA \c
        FROM \c
          USR$WG_VACATION v \c
        JOIN \c
          USR$WG_VACATIONLINE vl \c
            ON vl.MASTERKEY = v.DOCUMENTKEY \c
        WHERE \c
          v.USR$EMPLKEY = pEmplKey \c
          AND \c
          v.USR$FIRSTMOVEKEY = pFirstMoveKey \c
          AND \c
          vl.USR$DATEBEGIN >= \'pDateCalcFrom\' \c
          AND \c
          vl.USR$DATEBEGIN < \'pDateCalcTo\' \c
        UNION ALL \c
        SELECT \c
          \'sick\' AS AvgType, \c
          s.USR$EMPLKEY, \c
          s.USR$FIRSTMOVEKEY, \c
          EXTRACT(YEAR FROM sl.USR$DATEBEGIN) AS CalYear, \c
          EXTRACT(MONTH FROM sl.USR$DATEBEGIN) AS CalMonth, \c
          s.USR$AVGSUMMA \c
        FROM \c
          USR$WG_SICKLIST s \c
        JOIN \c
          USR$WG_SICKLISTLINE sl \c
            ON sl.MASTERKEY = s.DOCUMENTKEY \c
        WHERE \c
          s.USR$EMPLKEY = pEmplKey \c
          AND \c
          s.USR$FIRSTMOVEKEY = pFirstMoveKey \c
          AND \c
          sl.USR$DATEBEGIN >= \'pDateCalcFrom\' \c
          AND \c
          sl.USR$DATEBEGIN < \'pDateCalcTo\' \c
        UNION ALL \c
        SELECT \c
          \'avg\' AS AvgType, \c
          al.USR$EMPLKEY, \c
          al.USR$FIRSTMOVEKEY, \c
          EXTRACT(YEAR FROM t.USR$DATEBEGIN) AS CalYear, \c
          EXTRACT(MONTH FROM t.USR$DATEBEGIN) AS CalMonth, \c
          8 * COALESCE(al.USR$AVGSUM, 0) AS AvgSumma \c
        FROM \c
          USR$WG_AVGADDPAYLINE al \c
        JOIN \c
          USR$WG_AVGADDPAY a \c
            ON a.DOCUMENTKEY = al.MASTERKEY \c
        JOIN \c
          USR$WG_TOTAL t \c
            ON t.DOCUMENTKEY = a.USR$TOTALDOCKEY \c
        WHERE \c
          al.USR$EMPLKEY = pEmplKey \c
          AND \c
          al.USR$FIRSTMOVEKEY = pFirstMoveKey \c
          AND \c
          t.USR$DATEBEGIN >= \'pDateCalcFrom\' \c
          AND \c
          t.USR$DATEBEGIN < \'pDateCalcTo\' \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pDateCalcFrom-_, pDateCalcTo-_
            ]).
        
        gd_pl_ds(wg_avg_wage_sick, kb, usr_wg_FeeTypeProp, 4, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fFeeGroupKeyProp-integer, fFeeTypeKeyProp-integer
            ]).
        % usr_wg_FeeTypeProp(EmplKey, FirstMoveKey, FeeGroupKeyProp, FeeTypeKeyProp)
        get_sql(wg_avg_wage_sick, kb, usr_wg_FeeTypeProp/4,
        "SELECT \c
          pEmplKey AS EmplKey, \c
          pFirstMoveKey AS FirstMoveKey, \c
          ft.USR$WG_FEEGROUPKEY, \c
          ft.USR$WG_FEETYPEKEY \c
        FROM \c
          USR$CROSS179_256548741 ft \c
        JOIN \c
          USR$WG_FEETYPE ft_avg \c
            ON ft_avg.ID = ft.USR$WG_FEETYPEKEY \c
        WHERE \c
          ft.USR$WG_FEEGROUPKEY = (SELECT id FROM GD_P_GETID(pFeeGroupKeyProp_ruid)) \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pFeeGroupKeyProp_ruid-_
            ]).
        
        gd_pl_ds(wg_avg_wage_sick, kb, wg_holiday, 1, [
            fHolidayDate-date
            ]).
        % wg_holiday(HolidayDate)
        get_sql(wg_avg_wage_sick, kb, wg_holiday/1,
        "SELECT \c
          h.holidaydate \c
        FROM \c
          wg_holiday h \c
        WHERE \c
          h.holidaydate BETWEEN \'pDateCalcFrom\' AND \'pDateCalcTo\' \c
          AND COALESCE(h.disabled, 0) = 0 \c
        ",
            [
            pDateCalcFrom-_, pDateCalcTo-_
            ]).
        
        gd_pl_ds(wg_avg_wage_sick, kb, usr_wg_ExclDays, 6, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fExclType-string, fExclWeekDay-integer,
            fFromDate-date, fToDate-date
            ]).
        % usr_wg_ExclDays(EmplKey, FirstMoveKey, ExclType, ExclWeekDay, FromDate, ToDate)
        get_sql(wg_avg_wage_sick, kb, usr_wg_ExclDays/6,
        "SELECT \c
          EmplKey, FirstMoveKey, ExclType, ExclWeekDay, FromDate, ToDate \c
        FROM ( \c
        SELECT \c
          pEmplKey AS EmplKey, \c
          pFirstMoveKey AS FirstMoveKey, \c
          \'LIGHTWORKLINE\' AS ExclType, \c
          0 AS ExclWeekDay, \c
          CAST( IIF(lw.USR$DATEBEGIN < \'pDateCalcFrom\', \'pDateCalcFrom\', lw.USR$DATEBEGIN) AS DATE) AS FromDate, \c
          CAST( IIF(lw.USR$DATEEND IS NULL, \'pDateCalcTo\', IIF(lw.USR$DATEEND > \'pDateCalcTo\', \'pDateCalcTo\', lw.USR$DATEEND)) AS DATE) AS ToDate \c
        FROM USR$WG_LIGHTWORKLINE lw \c
        WHERE lw.USR$FIRSTMOVEKEY = pFirstMoveKey \c
          AND lw.USR$EMPLKEY = pEmplKey \c
          AND lw.USR$DATEBEGIN <= \'pDateCalcTo\' \c
          AND COALESCE(lw.USR$DATEEND, \'pDateCalcTo\') >= \'pDateCalcFrom\' \c
        UNION ALL \c
        SELECT \c
          pEmplKey AS EmplKey, \c
          pFirstMoveKey AS FirstMoveKey, \c
          \'LEAVEDOCLINE\' AS ExclType, \c
          0 AS ExclWeekDay, \c
          CAST( IIF(ld.USR$DATEBEGIN < \'pDateCalcFrom\', \'pDateCalcFrom\', ld.USR$DATEBEGIN) AS DATE) AS FromDate, \c
          CAST( IIF(ld.USR$DATEEND IS NULL, \'pDateCalcTo\', IIF(ld.USR$DATEEND > \'pDateCalcTo\', \'pDateCalcTo\', ld.USR$DATEEND)) AS DATE) AS ToDate \c
        FROM USR$WG_LEAVEDOCLINE ld \c
        LEFT JOIN USR$WG_VACATIONTYPE t ON t.ID = ld.USR$VACATIONTYPEKEY \c
        WHERE ld.USR$FIRSTMOVEKEY = pFirstMoveKey \c
          AND ld.USR$EMPLKEY = pEmplKey \c
          AND ld.USR$DATEBEGIN <= \'pDateCalcTo\' \c
          AND COALESCE(ld.USR$DATEEND, \'pDateCalcTo\') >= \'pDateCalcFrom\' \c
          AND COALESCE(t.USR$EXCLUDEFORSICKLIST, 0) = 1 \c
        UNION ALL \c
        SELECT \c
          pEmplKey AS EmplKey, \c
          pFirstMoveKey AS FirstMoveKey, \c
          \'SICKLISTJOURNAL\' AS ExclType, \c
          0 AS ExclWeekDay, \c
          CAST( IIF(s.USR$DATEBEGIN < \'pDateCalcFrom\', \'pDateCalcFrom\', s.USR$DATEBEGIN) AS DATE) AS FromDate, \c
          CAST( IIF(s.USR$DATEEND IS NULL, \'pDateCalcTo\', IIF(s.USR$DATEEND > \'pDateCalcTo\', \'pDateCalcTo\', s.USR$DATEEND)) AS DATE) AS ToDate \c
        FROM USR$WG_SICKLISTJOURNAL s \c
        WHERE s.USR$EMPLKEY = pEmplKey \c
          AND s.USR$DATEBEGIN <= \'pDateCalcTo\' \c
          AND COALESCE(s.USR$DATEEND, \'pDateCalcTo\') >= \'pDateCalcFrom\' \c
        UNION ALL \c
        SELECT \c
          pEmplKey AS EmplKey, \c
          pFirstMoveKey AS FirstMoveKey, \c
          \'LEAVEEXTDOC\' AS ExclType, \c
          0 AS ExclWeekDay, \c
          CAST( IIF(ext.USR$DATEBEGIN < \'pDateCalcFrom\', \'pDateCalcFrom\', ext.USR$DATEBEGIN) AS DATE) AS FromDate, \c
          CAST( IIF(ext.USR$DATEEND IS NULL, \'pDateCalcTo\', IIF(ext.USR$DATEEND > \'pDateCalcTo\', \'pDateCalcTo\', ext.USR$DATEEND)) AS DATE) AS ToDate \c
        FROM USR$WG_LEAVEEXTDOC ext \c
        WHERE ext.USR$EMPLKEY = pEmplKey \c
          AND ext.USR$DATEBEGIN <= \'pDateCalcTo\' \c
          AND COALESCE(ext.USR$DATEEND, \'pDateCalcTo\') >= \'pDateCalcFrom\' \c
        UNION ALL \c
        SELECT \c
          pEmplKey AS EmplKey, \c
          pFirstMoveKey AS FirstMoveKey, \c
          \'KINDDAYLINE\' AS ExclType, \c
          kdl.USR$DAY AS ExclWeekDay, \c
          CAST( IIF(kdl.USR$DATEBEGIN < \'pDateCalcFrom\', \'pDateCalcFrom\', kdl.USR$DATEBEGIN) AS DATE) AS FromDate, \c
          CAST( IIF(kdl.USR$DATEEND IS NULL, \'pDateCalcTo\', IIF(kdl.USR$DATEEND > \'pDateCalcTo\', \'pDateCalcTo\', kdl.USR$DATEEND)) AS DATE) AS ToDate \c
        FROM USR$WG_KINDDAYLINE kdl \c
        WHERE kdl.USR$EMPLKEY = pEmplKey \c
          AND kdl.USR$DATEBEGIN <= \'pDateCalcTo\' \c
          AND COALESCE(kdl.USR$DATEEND, \'pDateCalcTo\') >= \'pDateCalcFrom\' \c
        ) \c
        ORDER BY \c
          ExclWeekDay, \c
          FromDate \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pDateCalcFrom-_, pDateCalcTo-_
            ]).
        
        % twg_struct
        
        gd_pl_ds(wg_struct_vacation, kb, wg_holiday, 1, [
            fHolidayDate-date
            ]).
        % wg_holiday(HolidayDate)
        get_sql(wg_struct_vacation, kb, wg_holiday/1,
        "SELECT \c
          h.holidaydate \c
        FROM \c
          wg_holiday h \c
        WHERE \c
          h.holidaydate BETWEEN \'pDateBegin\' AND \'pDateEnd\' \c
          AND COALESCE(h.disabled, 0) = 0 \c
        ",
            [
            pDateBegin-_, pDateEnd-_
            ]).
        
        gd_pl_ds(wg_struct_vacation, kb, wg_vacation_slice, 2, [
            fVcType-integer, fSlice-float
            ]).
        % wg_vacation_slice(VcType, Slice)
        get_sql(wg_struct_vacation, kb, wg_vacation_slice/2,
        "SELECT \c
          0 AS VcType, COALESCE(USR$DURATION,0) AS Slice \c
        FROM \c
          USR$WG_VACATION \c
        WHERE \c
          DOCUMENTKEY = pDocKey \c
        UNION ALL \c
        SELECT \c
          1 AS VcType, COALESCE(USR$EXTRADURATION,0) AS Slice \c
        FROM \c
          USR$WG_VACATION \c
        WHERE \c
          DOCUMENTKEY = pDocKey \c
        --UNION ALL \c
        SELECT \c
          2 AS VcType, COALESCE(USR$UNHEALTHY,0) AS Slice \c
        FROM \c
          USR$WG_VACATION \c
        WHERE \c
          DOCUMENTKEY = pDocKey \c
        UNION ALL \c
        SELECT \c
          3 AS VcType, COALESCE(USR$UNFIXED,0) AS Slice \c
        FROM \c
          USR$WG_VACATION \c
        WHERE \c
          DOCUMENTKEY = pDocKey \c
        UNION ALL \c
        SELECT \c
          4 AS VcType, COALESCE(USR$COMPENSATIONDAY,0) AS Slice \c
        FROM \c
          USR$WG_VACATION \c
        WHERE \c
          DOCUMENTKEY = pDocKey \c
        ",
            [
            pDocKey-_
            ]).
        
        gd_pl_ds(wg_struct_sick, kb, gd_const_budget, 2, [
            fConstDate-date, fBudget-float
            ]).
        % gd_const_budget(ConstDate, Budget)
        get_sql(wg_struct_sick, kb, gd_const_budget/2,
        "SELECT \c
          cv.CONSTDATE, \c
          CAST(cv.CONSTVALUE AS DECIMAL(15,4)) AS Budget \c
        FROM \c
          GD_CONSTVALUE cv \c
        JOIN \c
          GD_CONST c \c
            ON c.ID  =  cv.CONSTKEY \c
        WHERE \c
          cv.CONSTKEY = (SELECT id FROM GD_P_GETID(pBudget_ruid)) \c
        ORDER BY \c
          cv.CONSTDATE \c
        ",
            [
            pBudget_ruid-_
            ]).
        
        gd_pl_ds(wg_struct_sick, kb, gd_const_AvgSalaryRB, 2, [
            fConstDate-date, fAvgSalaryRB-float
            ]).
        % gd_const_AvgSalaryRB(ConstDate, AvgSalaryRB)
        get_sql(wg_struct_sick, kb, gd_const_AvgSalaryRB/2,
        "SELECT \c
          cv.CONSTDATE, \c
          CAST(cv.CONSTVALUE AS DECIMAL(15,4)) AS AvgSalaryRB \c
        FROM \c
          GD_CONSTVALUE cv \c
        JOIN \c
          GD_CONST c \c
            ON c.ID  =  cv.CONSTKEY \c
        WHERE \c
          cv.CONSTKEY = (SELECT id FROM GD_P_GETID(pAvgSalaryRB_ruid)) \c
        ORDER BY \c
          cv.CONSTDATE \c
        ",
            [
            pAvgSalaryRB_ruid-_
            ]).
        
        gd_pl_ds(wg_struct_sick, kb, usr_wg_TblDayNorm, 8, [
            fEmplKey-integer, fFirstMoveKey-integer,
            fWYear-integer, fWMonth-integer, fTheDay-date, fWDay-integer,
            fWDuration-float, fWorkDay-integer
            ]).
        % usr_wg_TblDayNorm(EmplKey, FirstMoveKey, WYear, WMonth, TheDay, WDay, WDuration, WorkDay)
        get_sql(wg_struct_sick, kb, usr_wg_TblDayNorm/8,
        "\c
        SELECT EmplKey, FirstMoveKey, WYear, WMonth, TheDay, WDay, WDuration, WorkDay \c
        FROM USR$WG_TBLCALDAY_P(pEmplKey, pFirstMoveKey, \'pDateCalcFrom\', \'pDateCalcTo\') \c
        ",
            [
            pEmplKey-_, pFirstMoveKey-_, pDateCalcFrom-_, pDateCalcTo-_
            ]).
        
        gd_pl_ds(wg_struct_sick, kb, wg_job_ill_type, 1, [
            fJobIllType-integer
            ]).
        % wg_job_ill_type(ID)
        get_sql(wg_struct_sick, kb, wg_job_ill_type/1,
        "\c
        SELECT id FROM GD_P_GETID(pJobIllType_ruid) \c
        ",
            [
            pJobIllType_ruid-_
            ]).
        
         %
        %%
        
        
      DISPLAYSCRIPT: ~
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: ~
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-06-05T15:51:55+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151189471_18175251
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151189370_18175251
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "PROLOG"
      LANGUAGE: "VBScript"
      NAME: "twg_avg_wage_in_params"
      COMMENT: ~
      SCRIPT: | 
        %% twg_avg_wage_in_params
        %  входные параметры для twg_avg_wage
        %
        
        %:- ['../common/lib', '../common/params'].
        
        twg_avg_wage_in_params:-
            member(Scope, [
                wg_avg_wage_vacation,
                wg_avg_wage_sick,
                wg_avg_wage_avg,
                wg_struct_sick
                ]),
            new_param_list(Scope, in, [
                pCommon-1,
                pPayFormSalary_ruid-'147009181,119619099',
                pTblCal_DocType_Plan_ruid-'147567935,1514418708',
                pTblCal_DocType_Fact_ruid-'187613422,1596169984'
                ]),
            fail.
        twg_avg_wage_in_params:-
            new_param_list(wg_avg_wage_vacation, in, [
                pMonthQty-12, pAvgDays-29.7,
                pFeeGroupKey_ruid-'147071456,274788016',
                pFeeGroupKeyNoCoef_ruid-'147757383,84733194',
                pBadHourType_xid_IN-'147650804, 147650786, 147650802',
                pBadHourType_dbid-119619099,
                pBadFeeType_xid_IN-'151000730',
                pBadFeeType_dbid-2109681374,
                pSpecDep_ruid-'156913837,131572570'
                ]),
            fail.
        twg_avg_wage_in_params:-
            new_param_list(wg_avg_wage_sick, in, [
                pMonthQty-6,
                pFeeGroupKey_ruid-'147071457,274788016',
                pFeeGroupKeyProp_ruid-'147119175,1354510846',
                pKindDayHourType_ruid-'147650798,119619099'
                ]),
            fail.
        twg_avg_wage_in_params:-
            new_param_list(wg_avg_wage_avg, in, [
                pMonthQty-2, pMonthBonusQty-12, pMonthLimitQty-2,
                pFeeGroupKey_ruid-'147113780,1354510846'
                ]),
            fail.
        twg_avg_wage_in_params:-
            new_param_list(wg_struct_vacation, in, [
                ]),
            fail.
        twg_avg_wage_in_params:-
            new_param_list(wg_struct_sick, in, [
                pBudgetPart-0.5,
                pFirstCalcType-0, pFirstDuration-12, pFirstPart-0.8,
                pJobIllType_ruid-'147036273,151520244',
                pBudget_ruid-'147073065,1224850260',
                pAvgSalaryRB_ruid-'147445419,274788016',
                pAvgSalaryRB_Coef-3
                ]),
            fail.
        twg_avg_wage_in_params :-
            member([CutCalcType, CutDuration, CutPart], [[2, 6, 0.5], [3, 0, 0.5]]),
            new_param_list(wg_struct_sick, in,
                [pCutCalcType-CutCalcType, pCutDuration-CutDuration, pCutPart-CutPart]),
            fail.
        twg_avg_wage_in_params.
        
        :- twg_avg_wage_in_params.
        
         %
        %%
        
        
      DISPLAYSCRIPT: ~
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: ~
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-06-05T15:15:55+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151189370_18175251
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "PROLOG"
      LANGUAGE: "VBScript"
      NAME: "twg_avg_wage"
      COMMENT: ~
      SCRIPT: | 
        %% twg_avg_wage
        % Зарплата и Отдел кадров -> Зарплата -> 03. Начисление зарплаты
        %   05. Начисление отпусков
        %   06. Начисление больничных
        %   12. Начисление по-среднему
        %
        
        :- retractall(debug_mode).
        
        % ! при использовании в ТП Гедымин
        % ! для begin & end debug mode section
        % ! убрать символ процента из первой позиции
        /* %%% begin debug mode section
        
        %% saved state
        :- ['../gd_pl_state/load_atom', '../gd_pl_state/date', '../gd_pl_state/dataset'].
        %%
        
        %% include
        %#INCLUDE lib
        :- ['../common/lib'].
        %#INCLUDE params
        :- ['../common/params'].
        %#INCLUDE twg_avg_wage_sql
        :- [twg_avg_wage_sql].
        %#INCLUDE twg_avg_wage_in_params
        %:- [twg_avg_wage_in_params].
        %%
        
        %% facts
        :-  init_data,
            [
            % section twg_avg_wage
            %  05. Начисление отпусков
            usr_wg_DbfSums, % 05, 06, 12
            usr_wg_MovementLine, % 05, 06, 12
            usr_wg_FCRate,
            usr_wg_TblCalDay, % 05, 06, 12
            %usr_wg_TblDayNorm, % 05, 06, 12
            %usr_wg_TblYearNorm,
            usr_wg_TblCalLine, % 05, 06, 12
            usr_wg_TblCal_FlexLine, % 05, 06, 12
            usr_wg_HourType, % 05, 06
            usr_wg_TblCharge, % 05, 06, 12
            usr_wg_FeeType, % 05, 06, 12
            usr_wg_FeeTypeNoCoef,
            usr_wg_BadHourType,
            usr_wg_BadFeeType,
            usr_wg_SpecDep,
            %  06. Начисление больничных
            usr_wg_AvgWage,
            usr_wg_FeeTypeProp,
            wg_holiday,
            usr_wg_ExclDays,
            % 12. Начисление по-среднему
            usr_wg_TblChargeBonus,
            % section twg_struct
            %wg_holiday,
            wg_vacation_slice,
            gd_const_budget,
            gd_const_AvgSalaryRB,
            %usr_wg_TblDayNorm,
            wg_job_ill_type
            ].
        %%
        
        %% dynamic state
        :- [param_list].
        %%
        
        %% flag
        :- assertz(debug_mode).
        %%
        
        % ! при использовании в ТП Гедымин
        % ! для begin & end debug mode section
        % ! убрать символ процента из первой позиции
        */ %%% end debug mode section
        
        :- ps32k_lgt(64, 128, 64).
        
        % section twg_avg_wage
        % среднедневной заработок
        % - для отпусков
        % - для больничных
        % - для начисления по-среднему
        %
        
        /* реализация - секция правил */
        
        %% варианты правил расчета
        %  - для отпусков
        % [по расчетным месяцам, по среднечасовому]
        wg_valid_rules([by_calc_month, by_avg_houre]).
        %% варианты правил включения месяца в расчет
        % табель за месяц покрывает график [по дням и часам, по часам, по дням]
        wg_valid_rules([by_days_houres, by_houres, by_days]).
        %% дополнительные правила для включения месяца в расчет
        % [заработок за месяц не меньше любого из полных месяцев]
        % (для одинаковых коэфициентов осовременивания)
        wg_valid_rules([by_month_wage_any]).
        % [заработок за месяц не меньше каждого из полных месяцев]
        % (для одинаковых коэфициентов осовременивания)
        wg_valid_rules([-by_month_wage_all]).
        % [отсутствие в месяце плохих типов начислений и часов]
        wg_valid_rules([-by_month_no_bad_type]).
        
        %% варианты правил расчета
        %  - для больничных
        % [по расчетным дням, по расчетным дням со справкой]
        wg_valid_rules([by_calc_days, by_calc_days_doc]).
        % [от БПМ, по среднему заработку]
        wg_valid_rules([by_budget, by_avg_wage]).
        % [от ставки, по не полным месяцам]
        wg_valid_rules([by_rate, -by_not_full]).
        %% варианты правил для исключения дней
        % [по табелю мастера, по табелю, по приказам]
        wg_valid_rules([by_cal_flex, by_cal, by_orders]).
        %% дополнительные правила для учета расчетных дней
        % [хотя бы один месяц полный, все месяцы полные]
        wg_valid_rules([by_calc_days_any, -by_calc_days_all]).
        
        %% варианты правил полных месяцев
        %  - для отпусков
        % табель за месяц покрывает график [по дням и часам, по часам, по дням]
        wg_full_month_rules([by_days_houres, by_houres, by_days]).
        
        % правила запрещены по признаку
        %  - для отпусков
        wg_deny_flag_rules(flag_spec_dep, [by_days_houres, by_houres, by_days]).
        wg_deny_flag_rules(flag_spec_dep, [by_month_wage_all]).
        wg_deny_flag_rules(flag_spec_dep, [by_month_wage_any]).
        
        % правило действительно
        is_valid_rule(Scope, PK, Y-M, Rule) :-
            wg_valid_rules(ValidRules),
            member(Rule, ValidRules),
            \+ is_deny_rule(Scope, PK, Y-M, Rule),
            !.
        
        % правило отвергается по признаку
        is_deny_rule(Scope, PK, Y-M, Rule) :-
            get_flag_rule(Scope, PK, Y-M, Flag),
            wg_deny_flag_rules(Flag, FlagRules),
            member(Rule, FlagRules),
            !.
        
        % получить признак
        get_flag_rule(Scope, PK, _, Flag) :-
            Flag = flag_spec_dep,
            % последний график рабочего времени
            get_last_schedule(Scope, PK, ScheduleKey),
            % равен графику специального отдела
            get_spec_dep(Scope, PK, ScheduleKey),
            !.
        
        % взять последний график рабочего времени
        get_last_schedule(Scope, PK, ScheduleKey) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять график
            findall( ScheduleKey0,
                     % для движения по сотруднику
                     get_data(Scope, kb, usr_wg_MovementLine, [
                                 fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                                 fScheduleKey-ScheduleKey0]),
            % в список графиков
            ScheduleKeyList ),
            % определить последний график рабочего времени
            last(ScheduleKeyList, ScheduleKey),
            !.
        
        % взять график специального отдела
        get_spec_dep(Scope, PK, SpecDepKey) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять данные по графику специального отдела
            get_data(Scope, kb, usr_wg_SpecDep, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fID-SpecDepKey]),
            !.
        
        /* реализация - расчет */
        
        % среднедневной заработок
        % Scope: wg_avg_wage_vacation ; wg_avg_wage_sick ; wg_avg_wage_avg
        %        для отпусков ; для больничных ; для начисления по-среднему
        avg_wage(Scope) :-
            % взять локальное время
            get_local_date_time(DT),
            % записать отладочную информацию
            new_param_list(Scope, debug, [start-Scope-DT]),
            % шаблон первичного ключа
            PK = [pEmplKey-_, pFirstMoveKey-_],
            % для каждого первичного ключа расчета из входных параметров
            get_param_list(Scope, in, PK),
            % запустить цикл механизма подготовки данных
            engine_loop(Scope, in, PK),
            % выполнить расчет
            eval_avg_wage(Scope, PK),
            % найти альтернативу
            fail.
        avg_wage(_) :-
            % больше альтернатив нет
            !.
        
        % выполнить расчет
        eval_avg_wage(Scope, PK) :-
            % взять локальное время
            get_local_date_time(DT1),
            % записать отладочную информацию
            new_param_list(Scope, debug, [begin-DT1|PK]),
            % удалить временные данные по расчету
            forall( get_param_list(Scope, temp, PK, Pairs),
                    dispose_param_list(Scope, temp, Pairs) ),
            % вычислить среднедневной заработок по сотруднику
            calc_avg_wage(Scope, PK, AvgWage, Variant),
            % записать результат
            ret_avg_wage(Scope, PK, AvgWage, Variant),
            % взять локальное время
            get_local_date_time(DT2),
            % записать отладочную информацию
            new_param_list(Scope, debug, [end-DT2|PK]),
            !.
        
        % записать результат
        ret_avg_wage(Scope, PK, AvgWage, Variant) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять дополнительные данные из первого движения
            get_data(Scope, kb, usr_wg_MovementLine, [
                        fEmplKey-EmplKey,
                        fDocumentKey-FirstMoveKey, fFirstMoveKey-FirstMoveKey,
                        fDateBegin-DateBegin, fMovementType-1,
                        fListNumber-ListNumber
                 ]),
            % для даты последнего приема на работу
            get_last_hire(Scope, PK, DateBegin),
            % записать выходные данные
            append(PK, [pListNumber-ListNumber,
                        pAvgWage-AvgWage, pVariant-Variant],
                    OutPairs),
            new_param_list(Scope, out, OutPairs),
            !.
        
        % среднедневной заработок по сотруднику
        calc_avg_wage(Scope, PK, AvgWage, Rule) :-
            % - для отпусков (по расчетным месяцам)
            Scope = wg_avg_wage_vacation, Rule = by_calc_month,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % подготовка временных данных для расчета
            prep_avg_wage(Scope, PK, Periods),
            % проверка по табелю
            check_month_tab(Scope, PK, Periods),
                    % если есть хотя бы один расчетный месяц
            once( ( once( get_month_incl(Scope, PK, _, _, _) ),
                    % то проверка по заработку
                    check_month_wage(Scope, PK, Periods)
                    % иначе далее
                  ; true )
                ),
            % проверка на отсутствие плохих типов начислений и часов
            check_month_no_bad_type(Scope, PK, Periods),
            % есть хотя бы один расчетный месяц
            once( get_month_incl(Scope, PK, _, _, _) ),
            % взять заработок
            findall( Wage,
                       % за каждый расчетный месяц
                     ( get_month_incl(Scope, PK, Y, M, _),
                       % взять данные по заработку
                       get_month_wage(Scope, PK, Y, M, _, Wage) ),
            % в список заработков
            Wages ),
            % итоговый заработок за расчетные месяцы
            sum_list(Wages, Amount),
            % количество расчетных месяцев
            length(Wages, Num),
            % среднемесячное количество календарных дней
            get_param(Scope, in, pAvgDays-AvgDays),
            % среднедневной заработок
            catch( AvgWage0 is Amount / Num / AvgDays, _, fail ),
            AvgWage is round(AvgWage0),
            !.
        calc_avg_wage(Scope, PK, AvgWage, Rule) :-
            % - для отпусков (по среднечасовому)
            Scope = wg_avg_wage_vacation, Rule = by_avg_houre,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % подготовка временных данных для расчета
            prep_avg_wage(Scope, PK, Periods),
            % взять заработок
            findall( Wage,
                       % за каждый период проверки
                     ( member(Y1-M1, Periods),
                       % взять данные по заработку
                       get_month_wage(Scope, PK, Y1, M1, _, Wage) ),
            % в список заработков
            Wages ),
            % итоговый заработок
            sum_list(Wages, Amount),
            % взять часы
            findall( THoures,
                       % за период проверки
                     ( member(Y2-M2, Periods),
                       % взять данные по часам за месяц
                       get_month_norm_tab(Scope, PK, Y2-M2, _, _, _, THoures) ),
            % в список часов
            Durations),
            % всего часов по табелю
            sum_list(Durations, TotalTab),
            % среднечасовой заработок
            catch( AvgHoureWage is Amount / TotalTab, _, fail ),
            % расчитать график за год
            calc_year_norm(Scope, PK, NormDays),
            % сумма дней и часов по графику
            sum_days_houres(NormDays, _, TotalNorm),
            % среднемесячное количество расчетных рабочих часов
            AvgMonthNorm is TotalNorm / 12,
            % среднемесячное количество календарных дней
            get_param(Scope, in, pAvgDays-AvgDays),
            % среднедневной заработок
            catch( AvgWage0 is AvgHoureWage * AvgMonthNorm / AvgDays, _, fail ),
            AvgWage is round(AvgWage0),
            !.
        calc_avg_wage(Scope, PK, AvgWage, Rule) :-
            % - для больничных (по расчетным дням / со справкой)
            Scope = wg_avg_wage_sick, Rule1 = by_calc_days, Rule2 = by_calc_days_doc,
            % подготовка временных данных для расчета
            prep_avg_wage(Scope, PK, Periods),
            % есть рабочие периоды
            \+ Periods = [],
            % если определяется вариант
            ( % по расчетным дням
              Rule = Rule1,
              % правило действительно
              is_valid_rule(Scope, PK, _, Rule1),
              % если есть требуемое количество месяцев
              get_param(Scope, run, pMonthQty-MonthQty),
              length(Periods, MonthQty),
              % и выполняется одно из правил по полноте месяца
              rule_month_days_sick(Scope, PK, Periods, _)
            ;
              % или по расчетным дням со справкой
              Rule = Rule2,
              % правило действительно
              is_valid_rule(Scope, PK, _, Rule2),
              % если есть признак Справка
              append(PK, [pIsAvgWageDoc-1], Pairs),
              get_param_list(Scope, run, Pairs),
              % и выполняется одно из правил по полноте месяца
              rule_month_days_sick(Scope, PK, Periods, _)
            ),
            % то выполнить расчет
            % взять заработок
            findall( Wage,
                       % за каждый период проверки
                     ( member(Y1-M1, Periods),
                       % взять данные по заработку
                       get_month_wage(Scope, PK, Y1, M1, _, Wage) ),
            % в список заработков
            Wages ),
            % итоговый заработок
            sum_list(Wages, Amount),
            % взять расчетные дни
            findall( CalcDays,
                       % за каждый период проверки
                     ( member(Y2-M2, Periods),
                       % взять данные по расчетным дням
                       get_month_days_sick(Scope, PK, Y2, M2, _, CalcDays, _, _) ),
            % в список расчетных дней
            CalcDaysList ),
            % всего расчетных дней
            sum_list(CalcDaysList, TotalCalcDays),
            % среднедневной заработок
            catch( AvgWage0 is Amount / TotalCalcDays, _, fail ),
            AvgWage is round(AvgWage0),
            !.
        calc_avg_wage(Scope, PK, AvgWage, Rule) :-
            % - для больничных (от ставки без периодов со справкой)
            Scope = wg_avg_wage_sick, Rule = by_rate,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % подготовка временных данных для расчета
            prep_avg_wage(Scope, PK, Periods),
            % не выполняется одно из правил по полноте месяца
            \+ rule_month_days_sick(Scope, PK, Periods, _),
            % есть признак Справка
            append(PK, [pIsAvgWageDoc-1], Pairs),
            get_param_list(Scope, run, Pairs),
            % расчет от ставки
            calc_avg_wage_sick(Scope, PK, Periods, AvgWage, Rule),
            !.
        calc_avg_wage(Scope, PK, AvgWage, Rule) :-
            % - для больничных (от БПМ)
            Scope = wg_avg_wage_sick, Rule = by_budget,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % подготовка временных данных для расчета
            prep_avg_wage(Scope, PK, Periods),
            % нет требуемого количества месяцев
            get_param(Scope, run, pMonthQty-MonthQty),
            \+ length(Periods, MonthQty),
            % расчет от БПМ при формировании структуры
            AvgWage is 0,
            !.
        calc_avg_wage(Scope, PK, AvgWage, Rule) :-
            % - для больничных (по среднему заработку)
            Scope = wg_avg_wage_sick, Rule = by_avg_wage,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % подготовка временных данных для расчета
            prep_avg_wage(Scope, PK, Periods),
            % есть требуемое количество месяцев
            get_param(Scope, run, pMonthQty-MonthQty),
            length(Periods, MonthQty),
            % расчет по среднему заработку
            calc_avg_wage_sick(Scope, PK, Periods, AvgWage, Rule),
            !.
        calc_avg_wage(Scope, PK, AvgWage, Rule) :-
            % - для больничных (от ставки / по не полным месяцам)
            Scope = wg_avg_wage_sick, Rule1 = by_rate, Rule2 = by_not_full,
            % подготовка временных данных для расчета
            prep_avg_wage(Scope, PK, Periods),
            % расчет по разным вариантам
            % от ставки
            once( ( calc_avg_wage_sick(Scope, PK, Periods, AvgWage1, Rule1)
                  ; AvgWage1 = 0 )
                ),
            % по не полным месяцам
            once( ( calc_avg_wage_sick(Scope, PK, Periods, AvgWage2, Rule2)
                  ; AvgWage2 = 0 )
                ),
            \+ [AvgWage1, AvgWage2] = [0, 0],
            % выбор варианта расчета
            ( AvgWage1 >= AvgWage2,
              % от ставки
              Rule = Rule1,
              AvgWage = AvgWage1
            ;
              % по не полным месяцам
              Rule = Rule2,
              AvgWage = AvgWage2 ),
            !.
        calc_avg_wage(Scope, PK, AvgWage, Variant) :-
            % - для начисления по-среднему (по часам или дням)
            Scope = wg_avg_wage_avg,
            % подготовка временных данных для расчета
            prep_avg_wage(Scope, PK, Periods),
            % взять заработок
            findall( Wage1,
                       % за каждый период проверки
                     ( member(Y1-M1, Periods),
                       % взять данные по заработку
                       get_month_wage(Scope, PK, Y1, M1, _, Wage1),
                       % где значение больше 0
                       Wage1 > 0 ),
            % в список заработков
            Wages ),
            % есть требуемое количество месяцев
            get_param(Scope, run, pMonthQty-MonthQty),
            length(Wages, MonthQty),
            % итоговый заработок
            sum_list(Wages, Amount),
            % взять часы
            findall( THoures,
                       % за период проверки
                     ( member(Y2-M2, Periods),
                       % взять данные по часам за месяц
                       get_month_norm_tab(Scope, PK, Y2-M2, _, _, _, THoures),
                       % для заработка
                       get_month_wage(Scope, PK, Y2, M2, _, Wage2),
                       % значение которого больше 0
                       Wage2 > 0 ),
            % в список часов
            Durations),
            % всего часов по табелю
            sum_list(Durations, TotalTab),
            % среднечасовой заработок
            catch( AvgHoureWage is Amount / TotalTab, _, fail ),
            get_param(Scope, run, pCalcByHoure-CalcByHoure),
            % расчет по часам или дням
            ( CalcByHoure = 1, AvgWage is round(AvgHoureWage), Variant = avg_houre
            ; AvgWage is round(8 * AvgHoureWage), Variant = avg_day
            ),
            !.
        calc_avg_wage(Scope, PK, AvgWage, Variant) :-
            % - для начисления по-среднему (нужно больше месяцев)
            Scope = wg_avg_wage_avg,
            % периоды для проверки
            get_periods(Scope, PK, [Y-M|_]),
            atom_date(FirstDate, date(Y, M, 1)),
            % для даты последнего приема на работу
            get_last_hire(Scope, PK, DateBegin),
            % если дата последнего приема на работу меньше первой даты расчета
            DateBegin @< FirstDate,
            % и не превышен лимит
            get_param_list(Scope, run, [pMonthLimitQty-MonthLimitQty, pMonthBefore-MonthBefore]),
            \+ MonthBefore > MonthLimitQty,
            % то для расчета нужно больше месяцев
            AvgWage = 0, Variant = need_more,
            !.
        calc_avg_wage(Scope, PK, AvgWage, Variant) :-
            % - для начисления по-среднему (нет требуемого количества месяцев)
            Scope = wg_avg_wage_avg,
            % периоды для проверки
            get_periods(Scope, PK, [Y-M|_]),
            atom_date(FirstDate, date(Y, M, 1)),
            % взять дату последнего приема на работу
            get_last_hire(Scope, PK, DateBegin),
            % если дата последнего приема на работу не меньше первой даты расчета
            \+ DateBegin @< FirstDate,
            % то для расчета нет требуемого количества месяцев
            AvgWage = 0, Variant = no_data,
            !.
        
        % выбор варианта расчета среднедневного заработка
        % - для больничных
        calc_avg_wage_sick(Scope, PK, Periods, AvgWage, Rule) :-
            % по среднему заработку
            Rule = by_avg_wage,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять данные по среднедневному заработку
            findall( AvgSumma,
                     ( member(Y-M, Periods),
                       get_data(Scope, kb, usr_wg_AvgWage, [
                                   fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                                   fCalYear-Y, fCalMonth-M, fAvgSumma-AvgSumma])
                     ),
            % в список среднедневных заработков
            AvgSummaList),
            % максимальный среднедневной заработок
            max_list(AvgSummaList, MaxAvgSumma),
            AvgWage is round(MaxAvgSumma),
            !.
        calc_avg_wage_sick(Scope, PK, Periods, AvgWage, Rule) :-
            % от ставки
            Rule = by_rate,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % взять расчетную дату
            append(PK, [pDateCalc-DateCalc], Pairs),
            get_param_list(Scope, run, Pairs),
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять данные по ставке
            findall( PayFormKey0-SalaryKey0-TSalary0-AvgWageRate0,
                       % из данных по движению
                     ( get_data(Scope, kb, usr_wg_MovementLine, [
                                 fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                                 fDateBegin-DateBegin,
                                 fPayFormKey-PayFormKey0, fSalaryKey-SalaryKey0,
                                 fTSalary-TSalary0, fAvgWageRate-AvgWageRate0 ]),
                       % где дата меньше или равна расчетной
                       DateBegin @=< DateCalc ),
            % в список ставок
            RateList ),
            % взять последние данные по ставке
            last(RateList, PayFormKey-SalaryKey-TSalary-AvgWageRate),
              % если форма оплаты оклад, то расчет по тарифному окладу
            ( PayFormKey = SalaryKey,
              % сформировать список заработков по тарифному окладу
              findall( TSalary, member(_-_, Periods), Wages ),
              % итоговый заработок
              sum_list(Wages, Amount),
              % сформировать список расчетных дней по календарным дням месяца
              findall( CalcDays,
                       ( member(Y-M, Periods), month_days(Y, M, CalcDays) ),
              CalcDaysList ),
              % всего расчетных дней
              sum_list(CalcDaysList, TotalCalcDays),
              % среднедневной заработок
              catch( AvgWage0 is Amount / TotalCalcDays, _, fail ),
              AvgWage is round(AvgWage0)
            ;
              % иначе, расчет от часовой тарифной ставки
              AvgWage is round(AvgWageRate) ),
            !.
        calc_avg_wage_sick(Scope, PK, Periods, AvgWage, Rule) :-
            % по не полным месяцам
            Rule = by_not_full,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % если есть требуемое количество месяцев
            get_param(Scope, run, pMonthQty-MonthQty),
            length(Periods, MonthQty),
            % то выполнить расчет
            % взять заработок
            findall( Wage,
                       % за каждый период проверки
                     ( member(Y1-M1, Periods),
                       % взять данные по заработку
                       get_month_wage(Scope, PK, Y1, M1, _, Wage) ),
            % в список заработков
            Wages ),
            % итоговый заработок
            sum_list(Wages, Amount),
            % взять расчетные дни
            findall( CalcDays,
                       % за каждый период проверки
                     ( member(Y2-M2, Periods),
                       % взять данные по расчетным дням
                       get_month_days_sick(Scope, PK, Y2, M2, _, CalcDays, _, _) ),
            % в список расчетных дней
            CalcDaysList ),
            % всего расчетных дней
            sum_list(CalcDaysList, TotalCalcDays),
            % среднедневной заработок
            catch( AvgWage0 is Amount / TotalCalcDays, _, fail ),
            AvgWage is round(AvgWage0),
            !.
        
        % правила для учета расчетных дней
        % - для больничных
        rule_month_days_sick(Scope, PK, Periods, Rule) :-
            Rule = by_calc_days_any,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % есть хотя бы один полный месяц
            member(Y-M, Periods),
            get_month_days_sick(Scope, PK, Y, M, _, _, IsFullMonth, IsSpecMonth),
            ( IsFullMonth = 1 ; IsSpecMonth = 1 ),
            !.
        rule_month_days_sick(Scope, PK, Periods, Rule) :-
            Rule = by_calc_days_all,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % есть рабочие периоды
            \+ Periods = [],
            % все месяцы полные
            is_full_all_month_sick(Scope, PK, Periods),
            !.
        
        % все месяцы полные
        % - для больничных
        is_full_all_month_sick(_, _, []):-
            % все месяцы проверены
            !.
        is_full_all_month_sick(Scope, PK, [Y-M|Periods]) :-
            % есть данные по расчетным дням для полного месяца
            get_month_days_sick(Scope, PK, Y, M, _, _, IsFullMonth, IsSpecMonth),
            ( IsFullMonth = 1 ; IsSpecMonth = 1 ),
            !,
            % проверить остальные месяцы
            is_full_all_month_sick(Scope, PK, Periods).
        
        % подготовка временных данных для расчета
        prep_avg_wage(Scope, PK, Periods) :-
            % формирование временных данных по графику работы
            make_schedule(Scope, PK),
            % периоды для проверки
            get_periods(Scope, PK, Periods),
            % добавление временных данных по расчету дней и часов
            add_month_norm_tab(Scope, PK, Periods),
            % подготовка дополнительных временных данных
            prep_avg_wage_extra(Scope, PK, Periods),
            % добавление временных данных по расчету заработков
            add_month_wage(Scope, PK, Periods),
            !.
        
        % подготовка дополнительных временных данных
        prep_avg_wage_extra(Scope, _, _) :-
            % - для отпусков
            Scope = wg_avg_wage_vacation,
            !.
        prep_avg_wage_extra(Scope, PK, Periods) :-
            % - для больничных
            Scope = wg_avg_wage_sick,
            % добавление временных данных по расчетным дням
            add_month_days_sick(Scope, PK, Periods),
            !.
        prep_avg_wage_extra(Scope, PK, _) :-
            % - для начисления по-среднему
            Scope = wg_avg_wage_avg,
            % подготовка фактов по начислениям
            prep_TblCharge(Scope, PK),
            !.
        
        % подготовка фактов по начислениям
        prep_TblCharge(Scope, PK) :-
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            PredName/Arity = usr_wg_TblCharge/10,
            once( gd_pl_ds(Scope, kb, PredName, Arity, _) ),
            Args = [EmplKey, FirstMoveKey, _, _, DateBegin,
                    Debit, FeeTypeKey, DOW, HOW, PayPeriod],
            Term =.. [PredName|Args],
            catch( Term, _, fail ), \+ PayPeriod < 2,
            Debit1 is round(Debit / PayPeriod),
            % добавление фактов по начислениям
            add_TblCharge(PayPeriod, [PredName, EmplKey, FirstMoveKey],
                            DateBegin, [Debit1, FeeTypeKey], DOW, HOW),
            fail.
        prep_TblCharge(Scope, PK) :-
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            PredName/Arity = usr_wg_TblChargeBonus/8,
            once( gd_pl_ds(Scope, kb, PredName, Arity, _) ),
            PredName1/Arity1 = usr_wg_TblCharge/10,
            once( gd_pl_ds(Scope, kb, PredName1, Arity1, _) ),
            Args = [EmplKey, FirstMoveKey, _, _, DateBegin,
                    Debit, FeeTypeKey, PayPeriod],
            Term =.. [PredName|Args],
            catch( Term, _, fail ), \+ PayPeriod < 2,
            Debit1 is round(Debit / PayPeriod),
            % добавление фактов по начислениям
            add_TblCharge(PayPeriod, [PredName1, EmplKey, FirstMoveKey],
                            DateBegin, [Debit1, FeeTypeKey], 0, 0),
            fail.
        prep_TblCharge(_, _) :-
            !.
        
        % добавление фактов по начислениям
        add_TblCharge(0, _, _, _, _, _) :-
            !.
        add_TblCharge(PayPeriod, List1, DateBegin, List3, DOW, HOW) :-
            atom_date(DateBegin, date(CalYear, CalMonth, _)),
            List2 = [CalYear, CalMonth, DateBegin],
            append([List1, List2, List3, [DOW, HOW, 1]], List),
            Term =.. List, assertz( Term ),
            PayPeriod1 is PayPeriod - 1,
            date_add(DateBegin, 1, month, DateBegin1),
            !,
            add_TblCharge(PayPeriod1, List1, DateBegin1, List3, 0, 0).
        
        % формирование временных данных по графику работы
        make_schedule(Scope, PK) :-
            % временные данные по графику работы уже есть
            get_param_list(Scope, temp, [pScheduleKey-_|PK]),
            !.
        make_schedule(Scope, PK) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять данные по движению
            findall( Date-ScheduleKey,
                     get_data(Scope, kb, usr_wg_MovementLine, [
                                 fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                                 fDateBegin-Date, fScheduleKey-ScheduleKey]),
            MoveList ),
            % взять дату ограничения расчета
            get_param_list(Scope, run, [pDateCalcTo-DateCalcTo|PK]),
            % добавить временные данные по графику работы
            add_schedule(Scope, PK, MoveList, DateCalcTo),
            !.
        
        % добавить временные данные по графику работы
        add_schedule(_, _, [], _) :-
            !.
        add_schedule(Scope, PK, [DateFrom-ScheduleKey], DateCalcTo) :-
            append(PK,
                    [pDateFrom-DateFrom, pDateTo-DateCalcTo, pScheduleKey-ScheduleKey],
                        Pairs),
            new_param_list(Scope, temp, Pairs),
            !.
        add_schedule(Scope, PK, [DateFrom-ScheduleKey, DateTo-ScheduleKey1 | MoveList], DateCalcTo) :-
            append(PK,
                    [pDateFrom-DateFrom, pDateTo-DateTo, pScheduleKey-ScheduleKey],
                        Pairs),
            new_param_list(Scope, temp, Pairs),
            !,
            add_schedule(Scope, PK, [DateTo-ScheduleKey1 | MoveList], DateCalcTo).
        
        % периоды для проверки
        get_periods(Scope, PK, Periods) :-
            % взять временные данные по списку периодов
            get_param_list(Scope, temp, [pPeriods-Periods|PK]),
            !.
        get_periods(Scope, PK, Periods) :-
            % взять даты ограничения расчета
            append(PK, [pDateCalcFrom-DateFrom, pDateCalcTo-DateTo], Pairs1),
            get_param_list(Scope, run, Pairs1),
            % сформировать список периодов
            make_periods(Scope, PK, DateFrom, DateTo, Periods),
            % добавить временные данные по списку периодов
            append(PK, [pPeriods-Periods], Pairs2),
            new_param_list(Scope, temp, Pairs2),
            !.
        
        % сформировать список периодов
        make_periods(_, _, DateFrom, DateTo, []) :-
            DateFrom @>= DateTo,
            !.
        make_periods(Scope, PK, DateFrom, DateTo, [Y-M|Periods]) :-
            atom_date(DateFrom, date(Y, M, _)),
            % период является рабочим
            is_work_period(Scope, PK, Y-M),
            % добавить месяц
            date_add(DateFrom, 1, month, DateFrom1),
            !,
            make_periods(Scope, PK, DateFrom1, DateTo, Periods).
        make_periods(Scope, PK, DateFrom, DateTo, Periods) :-
            % добавить месяц
            date_add(DateFrom, 1, month, DateFrom1),
            !,
            make_periods(Scope, PK, DateFrom1, DateTo, Periods).
        
        %  период является рабочим
        is_work_period(Scope, PK, Y-M) :-
            % календарных дней в месяце
            month_days(Y, M, MonthDays),
            % последняя дата месяца
            atom_date(LastMonthDate, date(Y, M, MonthDays)),
            % определить дату последнего приема на работу
            get_last_hire(Scope, PK, DateIn),
            % если дата приема на работу не больше последней даты месяца
            DateIn @=< LastMonthDate,
            % то период является рабочим
            !.
        
        % взять дату последнего приема на работу
        get_last_hire(Scope, PK, DateIn) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять даты
            findall( DateIn0,
                     % для первого движения по типу 1 (прием на работу)
                     get_data(Scope, kb, usr_wg_MovementLine, [
                                 fEmplKey-EmplKey,
                                 fDocumentKey-FirstMoveKey, fFirstMoveKey-FirstMoveKey,
                                 fDateBegin-DateIn0, fMovementType-1 ]),
            % в список дат приема на работу
            DateInList ),
            % определить дату последнего приема на работу
            last(DateInList, DateIn),
            !.
        
        % добавление временных данных по расчету дней и часов
        add_month_norm_tab(_, _, []):-
            % больше месяцев для проверки нет
            !.
        add_month_norm_tab(Scope, PK, [Y-M|Periods]) :-
            % проверить данные по графику и табелю за месяц
            get_month_norm_tab(Scope, PK, Y-M, _, _, _, _),
            !,
            % проверить остальные месяцы
            add_month_norm_tab(Scope, PK, Periods).
        add_month_norm_tab(Scope, PK, [_|Periods]) :-
            !,
            % проверить остальные месяцы
            add_month_norm_tab(Scope, PK, Periods).
        
        % добавление временных данных по расчету заработков
        add_month_wage(_, _, []):-
            % больше месяцев для проверки нет
            !.
        add_month_wage(Scope, PK, [Y-M|Periods]) :-
            % проверить данные по заработку
            get_month_wage(Scope, PK, Y, M, _, _),
            !,
            % проверить остальные месяцы
            add_month_wage(Scope, PK, Periods).
        add_month_wage(Scope, PK, [_|Periods]) :-
            !,
            % проверить остальные месяцы
            add_month_wage(Scope, PK, Periods).
        
        % взять данные по заработку за месяц
        get_month_wage(Scope, PK, Y, M, MonthModernCoef, ModernWage) :-
            % - для отпусков
            Scope = wg_avg_wage_vacation,
            % взять из временных параметров данные по заработку
            append(PK, [pYM-Y-M, pModernCoef-MonthModernCoef, pModernWage-ModernWage],
                    Pairs),
            get_param_list(Scope, temp, Pairs),
            !.
        get_month_wage(Scope, PK, Y, M, MonthModernCoef, ModernWage) :-
            % - для отпусков
            Scope = wg_avg_wage_vacation,
            % расчитать заработок за месяц
            cacl_month_wage(Scope, PK, Y, M, Wage, MonthModernCoef, ModernWage, SalaryOld, SalaryNew),
            % записать во временные параметры данные по заработку
            append(PK, [pYM-Y-M,
                        pWage-Wage, pModernCoef-MonthModernCoef, pModernWage-ModernWage,
                        pSalaryOld-SalaryOld, pSalaryNew-SalaryNew],
                    Pairs),
            new_param_list(Scope, temp, Pairs),
            !.
        get_month_wage(Scope, PK, Y, M, 1.0, Wage) :-
            % - для больничных
            Scope = wg_avg_wage_sick,
            % взять из временных параметров данные по заработку
            append(PK, [pYM-Y-M, pWage-Wage],
                    Pairs),
            get_param_list(Scope, temp, Pairs),
            !.
        get_month_wage(Scope, PK, Y, M, 1.0, Wage) :-
            % - для больничных
            Scope = wg_avg_wage_sick,
            % расчитать заработок за месяц
            cacl_month_wage_sick(Scope, PK, Y, M, Wage),
            % записать во временные параметры данные по заработку
            append(PK, [pYM-Y-M, pWage-Wage], Pairs),
            new_param_list(Scope, temp, Pairs),
            !.
        get_month_wage(Scope, PK, Y, M, 1.0, Wage) :-
            % - для начисления по-среднему
            Scope = wg_avg_wage_avg,
            % взять из временных параметров данные по заработку
            append(PK, [pYM-Y-M, pWage-Wage],
                    Pairs),
            get_param_list(Scope, temp, Pairs),
            !.
        get_month_wage(Scope, PK, Y, M, 1.0, Wage) :-
            % - для начисления по-среднему
            Scope = wg_avg_wage_avg,
            % расчитать заработок за месяц
            cacl_month_wage_avg(Scope, PK, Y, M, Wage),
            % записать во временные параметры данные по заработку
            append(PK, [pYM-Y-M, pWage-Wage], Pairs),
            new_param_list(Scope, temp, Pairs),
            !.
        
        % расчитать заработок за месяц
        % - для отпусков
        cacl_month_wage(Scope, PK, Y, M, Wage, MonthModernCoef, ModernWage, SalaryOld, SalaryNew) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % параметры выбора начислений
            member(ChargeOption, [tbl_charge, dbf_sums]),
            % взять начисления
            findall( Debit-ModernCoef-SalaryOld0-SalaryNew0,
                  % для начисления по одному из параметров
                  % где дата совпадает с проверяемым месяцем
                  ( usr_wg_TblCharge_mix(Scope, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fCalYear-Y, fCalMonth-M, fDateBegin-TheDay,
                        fDebit-Debit, fFeeTypeKey-FeeTypeKey ],
                                            ChargeOption),
                  % и соответствующего типа
                  once( ( var(FeeTypeKey)
                        ; get_data(Scope, kb, usr_wg_FeeType, [
                                    fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                                    fFeeTypeKey-FeeTypeKey ])
                        )
                      ),
                  % с коэффициентом осовременивания
                  get_modern_coef(Scope, PK, TheDay, FeeTypeKey, ModernCoef, SalaryOld0, SalaryNew0)
                  ),
            % в список начислений
            Debits ),
            % проверить список начислений
            \+ Debits = [],
            % всего за месяц
            sum_month_debit(Debits, Wage, ModernWage0),
            % средний за месяц коэффициент осовременивания
            catch( MonthModernCoef0 is ModernWage0 / Wage, _, fail),
            to_currency(MonthModernCoef0, MonthModernCoef, 2),
            % осовремененный заработок
            ModernWage is round(Wage * MonthModernCoef),
            % старый и новый оклады
            ( setof( SalaryOld0-SalaryNew0,
                    Debit ^ ModernCoef ^ member(Debit-ModernCoef-SalaryOld0-SalaryNew0, Debits),
                    [SalaryOld-SalaryNew]
                   )
            ; [SalaryOld-SalaryNew] = [0-0]
            ),
            !.
        
        % итого зарплата и осовремененная зарплата за месяц
        % - для отпусков
        sum_month_debit(Debits, Wage, ModernWage) :-
            sum_month_debit(Debits, Wage, ModernWage, 0, 0),
            !.
        %
        sum_month_debit([], Wage, ModernWage, Wage, ModernWage) :-
            !.
        sum_month_debit([Debit-ModernCoef-_-_ | Debits], Wage, ModernWage, Wage0, ModernWage0) :-
            Wage1 is Wage0 + Debit,
            ModernWage1 is ModernWage0 + Debit * ModernCoef,
            !,
            sum_month_debit(Debits, Wage, ModernWage, Wage1, ModernWage1).
        
        % коэффициент осовременивания
        get_modern_coef(Scope, PK, _, FeeTypeKey, 1.0, 0, 0) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % проверить тип начисления на исключение для осовременивания
            get_data(Scope, kb, usr_wg_FeeTypeNoCoef, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fFeeTypeKeyNoCoef-FeeTypeKey ]),
            !.
        get_modern_coef(Scope, PK, TheDay, _, ModernCoef, SalaryOld, SalaryNew) :-
            % взять параметр коэфициента и дату ограничения расчета
            append(PK, [pDateCalcTo-DateTo, pCoefOption-CoefOption], Pairs),
            get_param_list(Scope, run, Pairs),
            % сформировать дату ограничения выплаты
            date_add(DateTo, 1, month, DateTo1),
            % сформировать список движений дата-сумма
            findall( Date-Amount,
                     get_modern_coef_data(PK, Scope, Date, Amount, CoefOption, DateTo1),
            Movements ),
            % вычислить коэффициент
            calc_modern_coef(TheDay, Movements, ModernCoef, SalaryOld, SalaryNew),
            !.
        
        % взять данные для расчета коэфициента осовременивания
        %
        get_modern_coef_data(PK, Scope, Date, FCRateSum, CoefOption, DateTo) :-
            % справочник базовых величин - тарифная ставка 1-го разряда
            nonvar(CoefOption), CoefOption = fc_fcratesum,
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять данные из справочника по ставке
            get_data(Scope, kb, usr_wg_FCRate, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fDate-Date, fFCRateSum-FCRateSum ]),
            % где дата меньше расчетной
            Date @< DateTo.
        %
        get_modern_coef_data(PK, Scope, DateBegin, Rate, CoefOption, DateTo) :-
            % движение - тарифная ставка 1-го разряда
            nonvar(CoefOption), CoefOption = ml_rate,
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять данные из движения по ставке
            get_data(Scope, kb, usr_wg_MovementLine, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fDateBegin-DateBegin, fRate-Rate ]),
            % где дата меньше расчетной
            DateBegin @< DateTo.
        %
        get_modern_coef_data(PK, Scope, DateBegin, MSalary, CoefOption, DateTo) :-
            % движение - оклад
            nonvar(CoefOption), CoefOption = ml_msalary,
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять данные из движения по окладу
            get_data(Scope, kb, usr_wg_MovementLine, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fDateBegin-DateBegin, fMSalary-MSalary ]),
            % где дата меньше расчетной
            DateBegin @< DateTo.
        
        % вычислить коэффициент
        calc_modern_coef(_, [ _-Rate | [] ], 1.0, Rate, Rate) :-
            % если последнее движение, то коэффициент 1
            !.
        calc_modern_coef(TheDay, [ Date1-Rate1, Date2-Rate2 | Movements ], ModernCoef, Rate1, RateLast) :-
            % если проверяемая дата больше или равна даты текущего движения
            TheDay @>= Date1,
            % и меньше даты следующего движения
            TheDay @< Date2,
            % то взять последнюю ставку из следующего и всех оставшихся движений
            last([Date2-Rate2 | Movements], _-RateLast),
            % и вычислить коэффициент для текущего движения
            catch( ModernCoef0 is RateLast / Rate1, _, fail),
            ( ModernCoef0 < 1.0, ModernCoef = 1.0 ; ModernCoef = ModernCoef0 ),
            !.
        calc_modern_coef(TheDay, [ _ | Movements ], ModernCoef, Rate, RateLast) :-
            % проверить для остальных движений
            !,
            calc_modern_coef(TheDay, Movements, ModernCoef, Rate, RateLast).
        
        % расчитать заработок за месяц
        % - для больничных
        cacl_month_wage_sick(Scope, PK, Y, M, Wage) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % параметры выбора начислений
            member(ChargeOption, [tbl_charge, dbf_sums]),
            % взять начисления
            findall( Debit-FeeTypeKey,
                  % для начисления по одному из параметров
                  % где дата совпадает с проверяемым месяцем
                  ( usr_wg_TblCharge_mix(Scope, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fCalYear-Y, fCalMonth-M, fDateBegin-_,
                        fDebit-Debit, fFeeTypeKey-FeeTypeKey ],
                                            ChargeOption),
                  % и соответствующего типа
                  once( ( var(FeeTypeKey)
                        ; get_data(Scope, kb, usr_wg_FeeType, [
                                    fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                                    fFeeTypeKey-FeeTypeKey ])
                        )
                      )
                  ),
            % в список начислений
            Debits ),
            % проверить список начислений
            \+ Debits = [],
            % всего за месяц
            sum_month_debit_sick(Scope, PK, Y, M, Debits, Wage),
            !.
        cacl_month_wage_sick(_, _, _, _, 0.0) :-
            !.
        
        % итого зарплата за месяц
        % - для больничных
        sum_month_debit_sick(Scope, PK, Y, M, Debits, Wage) :-
            % расчитать сумму начислений
            sum_month_debit_sick(Scope, PK, Y, M, Debits, Wage, 0.0),
            !.
        %
        sum_month_debit_sick(_, _, _, _, [], Wage, Wage) :-
            !.
        sum_month_debit_sick(Scope, PK, Y, M, [Debit-FeeTypeKey | Debits], Wage, Wage0) :-
            nonvar(FeeTypeKey),
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % тип начисления для пропорционального расчета
            once( get_data(Scope, kb, usr_wg_FeeTypeProp, [
                            fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                            fFeeTypeKeyProp-FeeTypeKey ]) ),
            % взять коэфициент для пропорционального начисления
            get_prop_coef(Scope, PK, Y, M, PropCoef),
            % пропорциональный расчет
            Debit1 is round(Debit * PropCoef),
            Wage1 is Wage0 + Debit1,
            !,
            sum_month_debit_sick(Scope, PK, Y, M, Debits, Wage, Wage1).
        sum_month_debit_sick(Scope, PK, Y, M, [Debit-_ | Debits], Wage, Wage0) :-
            % обычный расчет
            Wage1 is Wage0 + Debit,
            !,
            sum_month_debit_sick(Scope, PK, Y, M, Debits, Wage, Wage1).
        
        % взять коэфициент для пропорционального начисления
        get_prop_coef(Scope, PK, Y, M, PropCoef) :-
            % взять данные по графику и табелю за месяц
            get_month_norm_tab(Scope, PK, Y-M, NDays, TDays, NHoures, THoures),
            % расчитать коэфициент для пропорционального начисления
            calc_prop_coef(TDays, NDays, THoures, NHoures, PropCoef),
            !.
        
        % расчитать коэфициент для пропорционального начисления
        calc_prop_coef(TabDays, NormDays, _, _, 1.0) :-
            TabDays >= NormDays,
            !.
        calc_prop_coef(_, _, TabHoures, NormHoures, 1.0) :-
            TabHoures >= NormHoures,
            !.
        calc_prop_coef(TabDays, NormDays, TabHoures, NormHoures, PropCoef) :-
            catch( PropCoef1 is TabDays / NormDays, _, fail ),
            catch( PropCoef2 is TabHoures / NormHoures, _, fail ),
            PropCoef is max(PropCoef1, PropCoef2),
            \+ PropCoef > 1.0,
            !.
        calc_prop_coef(_, _, _, _, 1.0) :-
            !.
        
        % добавление временных данных по расчетным дням
        % - для больничных
        add_month_days_sick(_, _, []):-
            % больше месяцев для проверки нет
            !.
        add_month_days_sick(Scope, PK, [Y-M|Periods]) :-
            % проверить данные по расчетным дням
            get_month_days_sick(Scope, PK, Y, M, _, _, _, _),
            !,
            % проверить остальные месяцы
            add_month_days_sick(Scope, PK, Periods).
        add_month_days_sick(Scope, PK, [_|Periods]) :-
            !,
            % проверить остальные месяцы
            add_month_days_sick(Scope, PK, Periods).
        
        % взять данные по расчетным дням
        % - для больничных
        get_month_days_sick(Scope, PK, Y, M, MonthDays, CalcDays, IsFullMonth, IsSpecMonth) :-
            % взять из временных параметров данные по расчетным дням
            append(PK, [pYM-Y-M, pRule-_,
                        pMonthDays-MonthDays, pExclDays-_,
                        pCalcDays-CalcDays, pIsFullMonth-IsFullMonth,
                        pIsSpecMonth-IsSpecMonth],
                    Pairs),
            get_param_list(Scope, temp, Pairs),
            !.
        get_month_days_sick(Scope, PK, Y, M, MonthDays, CalcDays, IsFullMonth, IsSpecMonth) :-
            % календарных дней в месяце
            month_days(Y, M, MonthDays),
            % исключаемые из месяца дни по правилам
            excl_month_days_sick(Scope, PK, Y, M, ExclDays0, SpecExclDays, Variant),
            % исключаемые из первого месяца работы дни
            excl_first_month_days_sick(Scope, PK, Y, M, ExclDays1),
            % исключаемые дни
            ExclDays is ExclDays0 + ExclDays1,
            % расчетные дни
            CalcDays is MonthDays - ExclDays,
            % полнота месяца
            ( CalcDays = MonthDays -> IsFullMonth = 1 ; IsFullMonth = 0 ),
            % все дни для исключения специальные
            ( ExclDays = SpecExclDays -> IsSpecMonth = 1 ; IsSpecMonth = 0 ),
            % записать во временные параметры данные по расчетным дням
            append(PK, [pYM-Y-M, pRule-Variant,
                        pMonthDays-MonthDays, pExclDays-ExclDays,
                        pCalcDays-CalcDays, pIsFullMonth-IsFullMonth,
                        pIsSpecMonth-IsSpecMonth],
                    Pairs),
            new_param_list(Scope, temp, Pairs),
            !.
        
        % исключаемые из месяца дни
        % - для больничных
        excl_month_days_sick(Scope, PK, Y, M, ExclDays, SpecExclDays, Rule) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % параметры выбора табеля
            member(TabelOption-Rule, [tbl_cal_flex-by_cal_flex, tbl_cal-by_cal]),
            % есть данные в табеле
            usr_wg_TblCalLine_mix(Scope, PK, Y-M, _, _, _, _, TabelOption),
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % взять данные из табеля
            findall( ExclType,
                      % для проверяемого месяца
                    ( usr_wg_TblCalLine_mix(Scope, PK, Y-M, _, _, _, HoureType, TabelOption),
                      % с контролем наличия типа часов
                      HoureType > 0,
                      % по типу часов для исключения из расчета
                      once( get_data(Scope, kb, usr_wg_HourType, [
                                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                                        fID-HoureType, fExcludeForSickList-1,
                                        fExclType-ExclType] ) )
                    ),
            % в список дней для исключения
            ExclDaysList),
            % проверить список дней для исключения
            \+ ExclDaysList = [],
            % всего дней для исключения
            length(ExclDaysList, ExclDays),
            % сбор специальных исключаемых дней
            findall( SpecExclType,
                    ( member(SpecExclType, ExclDaysList),
                      memberchk(SpecExclType, ["kind_day"]) ),
            SpecExclDaysList),
            % всего специальных дней для исключения
            length(SpecExclDaysList, SpecExclDays),
            !.
        excl_month_days_sick(Scope, PK, Y, M, ExclDays, SpecExclDays, Rule) :-
            Rule = by_orders,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % нет данных в табеле
            \+ usr_wg_TblCalLine_mix(Scope, PK, Y-M, _, _, _, _, tbl_cal_flex),
            \+ usr_wg_TblCalLine_mix(Scope, PK, Y-M, _, _, _, _, tbl_cal),
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять данные
            findall( FromDate-ToDate-ExclType-ExclWeekDay,
                     % из приказов по дням исключения
                     get_data(Scope, kb, usr_wg_ExclDays, [
                                fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                                fExclType-ExclType, fExclWeekDay-ExclWeekDay,
                                fFromDate-FromDate, fToDate-ToDate] ),
            % в список периодов для исключения
            ExclPeriods),
            % сбор исключаемых дней по списку периодов
            collect_excl_days(ExclPeriods, Y, M, [], LogDays, []),
            % всего дней для исключения
            length(LogDays, ExclDays),
            \+ ExclDays =:= 0,
            % сбор специальных исключаемых дней по списку периодов
            collect_excl_days(ExclPeriods, Y, M, [], LogSpecDays, ["KINDDAYLINE"]),
            % всего специальных дней для исключения
            length(LogSpecDays, SpecExclDays),
            !.
        excl_month_days_sick(_, _, _, _, 0, 0, none) :-
            !.
        
        % сбор исключаемых дней по списку периодов
        collect_excl_days([], _, _, LogDays, LogDays, _) :-
            !.
        collect_excl_days([ExclPeriod|ExclPeriods], Y, M, LogDays0, LogDays2, SpecList) :-
            % сбор исключаемых дней за период
            collect_excl_days(ExclPeriod, Y, M, LogDays0, LogDays1, SpecList),
            !,
            collect_excl_days(ExclPeriods, Y, M, LogDays1, LogDays2, SpecList).
        
        % сбор исключаемых дней за период
        collect_excl_days(FromDate-ToDate-_-_, _, _, LogDays, LogDays, _) :-
            FromDate @> ToDate,
            !.
        collect_excl_days(FromDate0-ToDate-ExclType-ExclWeekDay, Y, M, LogDays0, LogDays2, SpecList) :-
            \+ atom_date(FromDate0, date(Y, M, _)),
            date_add(FromDate0, 1, day, FromDate1),
            !,
            collect_excl_days(FromDate1-ToDate-ExclType-ExclWeekDay, Y, M, LogDays0, LogDays2, SpecList).
        collect_excl_days(FromDate0-ToDate-ExclType-ExclWeekDay, Y, M, LogDays0, LogDays2, SpecList) :-
            % добавление дня для исключения в журнал
            ( ( SpecList = [] ; memberchk(ExclType, SpecList) )
              -> add_excl_day(FromDate0-ExclType-ExclWeekDay, LogDays0, LogDays1)
            ; true ),
            date_add(FromDate0, 1, day, FromDate1),
            !,
            collect_excl_days(FromDate1-ToDate-ExclType-ExclWeekDay, Y, M, LogDays1, LogDays2, SpecList).
        
        % добавление дня для исключения в журнал
        add_excl_day(TheDate-_-_, LogDays, LogDays) :-
            % при наличии даты в журнале
            memberchk(TheDate, LogDays),
            % журнал не изменять
            !.
        add_excl_day(TheDate-ExclType-_, LogDays, LogDays) :-
            % праздник из отпуска
            ExclType = "LEAVEDOCLINE",
            catch( wg_holiday(TheDate), _, fail ),
            % в журнал не заносить
            !.
        add_excl_day(TheDate-ExclType-ExclWeekDay, LogDays, [TheDate|LogDays]) :-
            % детский день согласно дню недели
            ExclType = "KINDDAYLINE",
            weekday(TheDate, ExclWeekDay),
            % занести в журнал
            !.
        add_excl_day(_-ExclType-_, LogDays, LogDays) :-
            % прочие даты из приказа о детском дне
            ExclType = "KINDDAYLINE",
            % пропускать
            !.
        add_excl_day(TheDate-_-_, LogDays, [TheDate|LogDays]) :-
            % дату для прочих случаев занести в журнал
            !.
        
        % исключаемые из первого месяца работы дни
        % - для больничных
        excl_first_month_days_sick(Scope, PK, Y, M, ExclDays) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % для первого движения по типу 1 (прием на работу)
            % где дата совпадает с проверяемым месяцем
            get_data(Scope, kb, usr_wg_MovementLine, [
                fEmplKey-EmplKey, fDocumentKey-FirstMoveKey, fFirstMoveKey-FirstMoveKey,
                fMoveYear-Y, fMoveMonth-M, fDateBegin-DateBegin, fMovementType-1 ]),
            % и является датой последнего приема на работу
            get_last_hire(Scope, PK, DateBegin),
            % исключить дни до принятия на работу
            atom_date(FirstMonthDate, date(Y, M, 1)),
            date_diff(FirstMonthDate, ExclDays, DateBegin),
            !.
        excl_first_month_days_sick(_, _, _, _, 0) :-
            !.
        
        % расчитать заработок за месяц
        % - для начисления по-среднему
        cacl_month_wage_avg(Scope, PK, Y, M, Wage) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % параметры выбора начислений
            member(ChargeOption, [tbl_charge, dbf_sums]),
            % взять начисления
            findall( Debit,
                  % для начисления по одному из параметров
                  % где дата совпадает с проверяемым месяцем
                  ( usr_wg_TblCharge_mix(Scope, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fCalYear-Y, fCalMonth-M, fDateBegin-_,
                        fDebit-Debit, fFeeTypeKey-FeeTypeKey ],
                                            ChargeOption),
                  % и соответствующего типа
                  once( ( var(FeeTypeKey)
                        ; get_data(Scope, kb, usr_wg_FeeType, [
                                    fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                                    fFeeTypeKey-FeeTypeKey ])
                        )
                      )
                  ),
            % в список начислений
            Debits ),
            % проверить список начислений
            \+ Debits = [],
            % всего за месяц
            sum_list(Debits, Wage),
            !.
        cacl_month_wage_avg(_, _, _, _, 0.0) :-
            !.
        
        % месяц работы полный
        is_full_month(Scope, PK, Y-M) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % для первого движения по типу 1 (прием на работу)
            % где дата совпадает с проверяемым месяцем
            get_data(Scope, kb, usr_wg_MovementLine, [
                fEmplKey-EmplKey, fDocumentKey-FirstMoveKey, fFirstMoveKey-FirstMoveKey,
                fMoveYear-Y, fMoveMonth-M, fDateBegin-DateBegin, fMovementType-1 ]),
            % и является датой последнего приема на работу
            get_last_hire(Scope, PK, DateBegin),
            !,
            % параметры выбора графика
            member(NormOption, [tbl_cal_flex, tbl_day_norm]),
            % первый рабочий день по графику для проверяемого месяца
            once( usr_wg_TblDayNorm_mix(Scope, PK, Y-M, TheDay, _, 1, NormOption) ),
            !,
            % больше или равен дате первого движения
            TheDay @>= DateBegin,
            % то первый месяц работы полный
            !.
        is_full_month(_, _, _) :-
            % проверяемый месяц не является первым месяцем работы
            !.
        
        % в месяце есть отработанные дни или часы
        is_month_worked(Scope, PK, Y-M) :-
            % если есть хотя бы один рабочий день
            usr_wg_TblCalLine_mix(Scope, PK, Y-M, _, DOW, HOW, _, _),
            % с контролем наличия дней или часов
            once( (DOW > 0 ; HOW > 0 ) ),
            % то в месяце есть отработанные дни или часы
            !.
        
        % в месяце есть оплата
        is_month_paid(Scope, PK, Y-M) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % если есть хотя бы одно начисление
            usr_wg_TblCharge_mix(Scope, [
                fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                fCalYear-Y, fCalMonth-M, fDateBegin-_,
                fDebit-Debit, fFeeTypeKey-FeeTypeKey ],
                                    _),
            % с контролем суммы
            Debit > 0,
            % соответствующего типа
            ( var(FeeTypeKey)
            ; once( get_data(Scope, kb, usr_wg_FeeType, [
                            fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                            fFeeTypeKey-FeeTypeKey ]) ) ),
            % то в месяце есть оплата
            !.
        
        % взять расчетный месяц
        get_month_incl(Scope, PK, Y, M, Variant) :-
            append(PK, [pMonthIncl-MonthInclList], Pairs),
            get_param_list(Scope, temp, Pairs),
            member(Y-M-Variant, MonthInclList).
        
        % принять месяц для исчисления
        take_month_incl(Scope, PK, Y, M, Variant) :-
            append(PK, [pMonthIncl-MonthInclList], Pairs),
            get_param_list(Scope, temp, Pairs),
            keysort([Y-M-Variant | MonthInclList], MonthInclList1),
            append(PK, [pMonthIncl-MonthInclList1], Pairs1),
            dispose_param_list(Scope, temp, Pairs),
            new_param_list(Scope, temp, Pairs1),
            !.
        take_month_incl(Scope, PK, Y, M, Variant) :-
            append(PK, [pMonthIncl-[Y-M-Variant]], Pairs),
            new_param_list(Scope, temp, Pairs),
            !.
        
        % проверка месяца по табелю
        % - для отпусков
        check_month_tab(_, _, []):-
            % больше месяцев для проверки нет
            !.
        check_month_tab(Scope, PK, [Y-M|Periods]) :-
            % месяц работы полный
            is_full_month(Scope, PK, Y-M),
            % в месяце есть отработанные дни или часы
            is_month_worked(Scope, PK, Y-M),
            % в месяце есть оплата
            is_month_paid(Scope, PK, Y-M),
            % и выполняется одно из правил
            rule_month_tab(Scope, PK, Y-M, Variant),
            % то принять месяц для исчисления
            take_month_incl(Scope, PK, Y, M, Variant),
            !,
            % проверить остальные месяцы
            check_month_tab(Scope, PK, Periods).
        check_month_tab(Scope, PK, [_|Periods]) :-
            !,
            % проверить остальные месяцы
            check_month_tab(Scope, PK, Periods).
        
        % правила включения месяца в расчет
        rule_month_tab(Scope, PK, Y-M, Rule) :-
            % по дням и часам за месяц
            Rule = by_days_houres,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % взять данные по графику и табелю за месяц
            get_month_norm_tab(Scope, PK, Y-M, NDays, TDays, NHoures, THoures),
            % если табель равен графику по дням и часам
            TDays =:= NDays, THoures =:= NHoures,
            % то месяц включается в расчет
            !.
        rule_month_tab(Scope, PK, Y-M, Rule) :-
            % по часам за месяц
            Rule = by_houres,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % взять данные по графику и табелю за месяц
            get_month_norm_tab(Scope, PK, Y-M, _, _, NHoures, THoures),
            % если табель покрывает график по часам
            THoures >= NHoures,
            % то месяц включается в расчет
            !.
        rule_month_tab(Scope, PK, Y-M, Rule) :-
            % по дням за месяц
            Rule = by_days,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % взять данные по графику и табелю за месяц
            get_month_norm_tab(Scope, PK, Y-M, NDays, TDays, _, _),
            % если табель покрывает график по дням
            TDays >= NDays,
            % то месяц включается в расчет
            !.
        
        % взять данные по графику и табелю за месяц
        get_month_norm_tab(Scope, PK, Y-M, NDays, TDays, NHoures, THoures) :-
            % взять из временных параметров дни и часы
            append(PK, [pYM-Y-M,
                        pTDays-TDays, pTHoures-THoures,
                        pNDays-NDays, pNHoures-NHoures],
                        Pairs),
            get_param_list(Scope, temp, Pairs),
            !.
        get_month_norm_tab(Scope, PK, Y-M, NDays, TDays, NHoures, THoures) :-
            % расчитать график и табель за месяц
            calc_month_norm_tab(Scope, PK, Y-M, NDays, TDays, NHoures, THoures),
            % записать во временные параметры дни и часы
            append(PK, [pYM-Y-M,
                        pTDays-TDays, pTHoures-THoures,
                        pNDays-NDays, pNHoures-NHoures],
                        Pairs),
            new_param_list(Scope, temp, Pairs),
            !.
        
        % расчитать график и табель за месяц
        calc_month_norm_tab(Scope, PK, Y-M, NDays, TDays, NHoures, THoures) :-
            % расчитать график за месяц
            calc_month_norm(Scope, PK, Y-M, NormDays),
            % сумма дней и часов по графику
            sum_days_houres(NormDays, NDays, NHoures),
            % расчитать табель за месяц
            calc_month_tab(Scope, PK, Y-M, TabDays),
            % сумма дней и часов по табелю
            sum_days_houres(TabDays, TDays, THoures),
            !.
        
        % расчитать график за месяц по одному из параметров
        calc_month_norm(Scope, PK, Y-M, NormDays) :-
            % параметры выбора графика
            member(NormOption, [tbl_cal_flex, tbl_day_norm]),
            % взять дату/часы
            findall( TheDay-1-WDuration,
                    % для рабочего дня
                    ( usr_wg_TblDayNorm_mix(Scope, PK, Y-M, TheDay, WDuration, 1, NormOption),
                    % с контролем наличия часов
                    WDuration > 0 ),
            % в список дата/часы графика
            NormDays),
            % проверить список графика
            \+ NormDays = [],
            !.
        calc_month_norm(_, _, _, []) :-
            !.
        
        % расчитать график за год по одному из параметров
        calc_year_norm(Scope, PK, NormDays) :-
            get_norm_periods(Scope, PK, Periods),
            calc_year_norm(Periods, Scope, PK, [], NormDays),
            !.
        %
        calc_year_norm([], _, _, NormDays, NormDays) :-
            !.
        calc_year_norm([Y-M|Periods], Scope, PK, NormDays0, NormDays) :-
            calc_month_norm(Scope, PK, Y-M, NormDays1),
            append(NormDays0, NormDays1, NormDays2),
            !,
            calc_year_norm(Periods, Scope, PK, NormDays2, NormDays).
        
        % нормативные периоды
        get_norm_periods(Scope, PK, Periods) :-
            % взять нормативные даты ограничения расчета
            append(PK, [pDateNormFrom-DateFrom, pDateNormTo-DateTo], Pairs),
            get_param_list(Scope, run, Pairs),
            % сформировать список периодов
            make_periods(Scope, PK, DateFrom, DateTo, Periods),
            !.
        
        % расчитать табель за месяц по одному из параметров
        calc_month_tab(Scope, PK, Y-M, TabDays) :-
            % параметры выбора табеля
            member(TabelOption, [tbl_cal_flex, tbl_cal, tbl_charge, dbf_sums]),
            % взять данные из табеля
            findall( Date-DOW-HOW,
                    % для проверяемого месяца
                    ( usr_wg_TblCalLine_mix(Scope, PK, Y-M, Date, DOW, HOW, _, TabelOption),
                    % с контролем наличия дней или часов
                    once( (DOW > 0 ; HOW > 0 ) )
                    ),
            % в список дата-день-часы
            TabDays),
            % проверить список табеля
            \+ TabDays = [],
            !.
        calc_month_tab(_, _, _, []) :-
            !.
        
        % сумма дней и часов
        sum_days_houres(ListDays, Days, Houres) :-
            sum_days_houres(ListDays, Days, Houres, 0, 0),
            !.
        %
        sum_days_houres([], Days, Houres, Days, Houres).
        sum_days_houres([_-DOW-HOW|ListDays], Days, Houres, Days0, Houres0) :-
            Days1 is Days0 + DOW,
            Houres1 is Houres0 + HOW,
            !,
            sum_days_houres(ListDays, Days, Houres, Days1, Houres1).
        
        % проверка месяца по заработку
        % - для отпусков
        check_month_wage(_, _, []):-
            % больше месяцев для проверки нет
            !.
        check_month_wage(Scope, PK, [Y-M|Periods]) :-
            % если месяц еще не включен в расчет
            \+ get_month_incl(Scope, PK, Y, M, _),
            % и выполняется одно из правил
            rule_month_wage(Scope, PK, Y-M, Variant),
            % то принять месяц для исчисления
            take_month_incl(Scope, PK, Y, M, Variant),
            !,
            % проверить следующий месяц
            check_month_wage(Scope, PK, Periods).
        check_month_wage(Scope, PK, [_|Periods]) :-
            !,
            % проверить следующий месяц
            check_month_wage(Scope, PK, Periods).
        
        % заработок за месяц в сравнении с полными месяцами
        rule_month_wage(Scope, PK, Y-M, Rule) :-
            Shapes = [
                      % покрывает любой из полных месяцев
                      by_month_wage_any - wage_over_any,
                      % покрывает каждый из полных месяцев
                      by_month_wage_all - wage_over_list
                      ],
            member(Rule - Condition, Shapes),
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % варианты правил полных месяцев
            wg_full_month_rules(FullMonthRules),
            % взять заработок и коэффициент осовременивания за проверяемый месяц
            get_month_wage(Scope, PK, Y, M, ModernCoef, Wage),
            % взять заработок
            findall( Wage1,
                      % для расчетного месяца
                    ( get_month_incl(Scope, PK, Y1, M1, Variant1),
                      % который принят для исчисления по варианту полного месяца
                      memberchk(Variant1, FullMonthRules),
                      % с заработком и коэффициентом осовременивания за месяц
                      get_month_wage(Scope, PK, Y1, M1, ModernCoef1, Wage1),
                      % где коэффициенты для проверяемого и расчетного равны
                      ModernCoef =:= ModernCoef1 ),
            % в список заработков
            Wages1 ),
            % если заработок проверяемого месяца соответствует условию
            Term =.. [Condition, Wage, Wages1], Term,
            % то месяц включается в расчет
            !.
        
        % заработок покрывает любое значение из списка
        wage_over_any(Over, [Head|_]) :-
            Over >= Head,
            !.
        wage_over_any(Over, [_|Tail]) :-
            !,
            wage_over_any(Over, Tail).
        
        % заработок покрывает все значения из списка
        wage_over_list(Over, [Head|[]]) :-
            Over >= Head,
            !.
        wage_over_list(Over, [Head|Tail]) :-
            Over >= Head,
            !,
            wage_over_list(Over, Tail).
        
        % проверка месяца по типу начислений и типу часов
        % - для отпусков
        check_month_no_bad_type(_, _, []):-
            % больше месяцев для проверки нет
            !.
        check_month_no_bad_type(Scope, PK, [Y-M|Periods]) :-
            % если месяц еще не включен в расчет
            \+ get_month_incl(Scope, PK, Y, M, _),
            % месяц работы полный
            is_full_month(Scope, PK, Y-M),
            % в месяце есть оплата
            is_month_paid(Scope, PK, Y-M),
            % и выполняется одно из правил
            rule_month_no_bad_type(Scope, PK, Y-M, Variant),
            % то принять месяц для исчисления
            take_month_incl(Scope, PK, Y, M, Variant),
            !,
            % проверить следующий месяц
            check_month_no_bad_type(Scope, PK, Periods).
        check_month_no_bad_type(Scope, PK, [_|Periods]) :-
            !,
            % проверить следующий месяц
            check_month_no_bad_type(Scope, PK, Periods).
        
        % отсутствие плохих типов начислений и часов
        rule_month_no_bad_type(Scope, PK, Y-M, Rule) :-
            Rule = by_month_no_bad_type,
            % правило действительно
            is_valid_rule(Scope, PK, _, Rule),
            % если нет плохих типов начислений и часов
            \+ month_bad_type(Scope, PK, Y-M),
            % то месяц включается в расчет
            !.
        
        % есть плохой тип часов
        month_bad_type(Scope, PK, Y-M) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % если есть хотя бы один день по табелю
            usr_wg_TblCalLine_mix(Scope, PK, Y-M, _, _, _, HoureType, _),
            % с плохим типом часов
            nonvar(HoureType),
            HoureType > 0,
            once( get_data(Scope, kb, usr_wg_BadHourType, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey, fID-HoureType]) ),
            !.
        % есть плохой тип начислений
        month_bad_type(Scope, PK, Y-M) :-
            % разложить первичный ключ
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % если есть хотя бы одно начисление
            % где дата совпадает с проверяемым месяцем
            usr_wg_TblCharge_mix(Scope, [
                fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                fCalYear-Y, fCalMonth-M, fDateBegin-_,
                fDebit-_, fFeeTypeKey-FeeTypeKey ],
                                    _),
            % с плохим типом начисления
            nonvar(FeeTypeKey),
            FeeTypeKey > 0,
            once( get_data(Scope, kb, usr_wg_BadFeeType, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey, fID-FeeTypeKey]) ),
            !.
        
        /* реализация - смешанные данные */
        
        %% взять данные по начислению
        % начисление из TblCharge
        usr_wg_TblCharge_mix(Scope, ArgPairs, ChargeOption) :-
            ChargeOption = tbl_charge,
            get_data(Scope, kb, usr_wg_TblCharge, [fPayPeriod-PayPeriod|ArgPairs]),
            PayPeriod < 2.
        % или начисление из dbf
        % с согласованием спецификации по TblCharge
        usr_wg_TblCharge_mix(Scope, ArgPairs, ChargeOption) :-
            ChargeOption = dbf_sums,
            % спецификация usr_wg_TblCharge
            ValuePairs = [
                        fEmplKey-EmplKey, fFirstMoveKey-_,
                        fCalYear-CalYear, fCalMonth-CalMonth, fDateBegin-DateBegin,
                        fDebit-Debit, fFeeTypeKey-_
                        ],
            member_list(ArgPairs, ValuePairs),
            % спецификация usr_wg_DbfSums
            DataPairs =  [
                        fEmplKey-EmplKey,
                        fInYear-CalYear, fInMonth-CalMonth, fDateBegin-DateBegin,
                        fInSum-Debit
                        ],
            get_data(Scope, kb, usr_wg_DbfSums, DataPairs).
        
        %% взять данные по графику
        % день месяца по календарному графику
        usr_wg_TblDayNorm_mix(Scope, PK, Y-M, Date, Duration, WorkDay, NormOption) :-
            NormOption = tbl_cal_flex,
            get_Flex_by_type(Scope, PK, Y-M, Date, WorkDay, Duration, _, "plan").
        % или день месяца по справочнику графика рабочего времени
        usr_wg_TblDayNorm_mix(Scope, PK, Y-M, TheDay, WDuration, WorkDay, NormOption) :-
            NormOption = tbl_day_norm,
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            get_data(Scope, kb, usr_wg_TblCalDay, [
                        fScheduleKey-ScheduleKey,
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fWYear-Y, fWMonth-M, fTheDay-TheDay,
                        fWDuration-WDuration, fWorkDay-WorkDay ]),
            check_schedule(Scope, PK, TheDay, ScheduleKey).
        
        %
        check_schedule(Scope, PK, TheDay, ScheduleKey) :-
            append(PK,
                    [pDateFrom-DateFrom, pDateTo-DateTo, pScheduleKey-ScheduleKey],
                        Pairs),
            get_param_list(Scope, temp, Pairs),
            TheDay @>= DateFrom, TheDay @< DateTo,
            !.
        check_schedule(Scope, PK, _, ScheduleKey) :-
            get_last_schedule(Scope, PK, ScheduleKey),
            !.
        
        %% взять данные по табелю
        % день месяца по табелю мастера
        usr_wg_TblCalLine_mix(Scope, PK, Y-M, Date, Days, Duration, HoureType, TabelOption) :-
            TabelOption = tbl_cal_flex,
            get_Flex_by_type(Scope, PK, Y-M, Date, Days, Duration, HoureType, "fact").
        % или день месяца по табелю
        usr_wg_TblCalLine_mix(Scope, PK, Y-M, Date, Days, Duration, HoureType, TabelOption) :-
            TabelOption = tbl_cal,
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            get_data(Scope, kb, usr_wg_TblCalLine, [
                        fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fCalYear-Y, fCalMonth-M, fDate-Date,
                        fDuration-Duration, fHoureType-HoureType]),
            once( (Duration > 0, Days = 1 ; Days = 0) ).
        % или табель дни-часы из начислений
        usr_wg_TblCalLine_mix(Scope, PK, Y-M, Date, DOW, HOW, 0, TabelOption) :-
            TabelOption = tbl_charge,
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            ArgPairs = [fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                        fCalYear-Y, fCalMonth-M, fDateBegin-Date,
                        fFeeTypeKey-FeeTypeKey, fDOW-DOW, fHOW-HOW],
            get_data(Scope, kb, usr_wg_TblCharge, [fPayPeriod-_|ArgPairs]),
            once( get_data(Scope, kb, usr_wg_FeeType, [
                            fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey,
                            fFeeTypeKey-FeeTypeKey, fAvgDayHOW-1]) ).
        % или день месяца из dbf
        usr_wg_TblCalLine_mix(Scope, PK, Y-M, Date, 0, InHoures, 0, TabelOption) :-
            TabelOption = dbf_sums,
            PK = [pEmplKey-EmplKey, pFirstMoveKey-_],
            get_data(Scope, kb, usr_wg_DbfSums, [
                        fEmplKey-EmplKey, fInHoures-InHoures,
                        fInYear-Y, fInMonth-M, fDateBegin-Date]).
        
        % день месяца по календарному графику или табелю мастера
        % FlexType: "plan" ; "fact"
        get_Flex_by_type(Scope, PK, Y-M, Date, Days, Duration, HoureType, FlexType) :-
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            gd_pl_ds(Scope, kb, usr_wg_TblCal_FlexLine, 68, _),
            make_list(62, TeilArgs),
            Term =..[ usr_wg_TblCal_FlexLine, FlexType, EmplKey, FirstMoveKey, Y, M, _ | TeilArgs ],
            catch( call( Term ), _, fail),
            member(D, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]),
            atom_date(Date, date(Y, M, D)),
            S is (D - 1) * 2 + 6 + 1,
            H is S + 1,
            arg(S, Term, Duration0),
            once( ( number(Duration0), Duration = Duration0
                    ; atom_number(Duration0, Duration)
                    ; Duration = 0 ) ),
            arg(H, Term, HoureType0),
            once( ( number(HoureType0), HoureType = HoureType0
                    ; atom_number(HoureType0, HoureType)
                    ; HoureType = 0 ) ),
            once( (Duration > 0, Days = 1 ; Days = 0) ).
        
        
        /* реализация - механизм подготовки данных */
        
        %% engine_loop(+Scope, +Type, +PK)
        %
        
        % args handler
        engine_loop(Scope, Type, PK) :-
            \+ ground([Scope, Type, PK]),
            !,
            fail.
        % fail handler
        engine_loop(Scope, _, PK) :-
            engine_fail_step(Type),
            get_param_list(Scope, Type, PK),
            !,
            fail.
        % deal handler
        engine_loop(Scope, Type, PK) :-
            engine_deal_step(Type),
            !,
            get_param_list(Scope, Type, PK),
            !.
        % data handler
        engine_loop(Scope, Type, PK) :-
            engine_data_step(Type, TypeNextStep),
            get_param_list(Scope, Type, PK),
            \+ get_param_list(Scope, TypeNextStep, PK),
            prepare_data(Scope, Type, PK, TypeNextStep),
            !,
            engine_loop(Scope, TypeNextStep, PK).
        engine_loop(Scope, Type, PK) :-
            engine_data_step(Type, TypeNextStep),
            !,
            engine_loop(Scope, TypeNextStep, PK).
        % restart handler
        engine_loop(Scope, Type, PK) :-
            engine_restart_step(Type, TypeNextStep),
            forall( ( get_param_list(Scope, ParamType, PK, Pairs),
                      \+ ParamType = TypeNextStep ),
                    dispose_param_list(Scope, ParamType, Pairs)
                  ),
            !,
            engine_loop(Scope, TypeNextStep, PK).
        % error handler
        engine_loop(Scope, Type, PK) :-
            engine_error_step(TypeNextStep),
            \+ get_param_list(Scope, TypeNextStep, PK),
            get_local_date_time(DT),
            append(PK, [Type, DT], PairsNextStep),
            new_param_list(Scope, TypeNextStep, PairsNextStep),
            !,
            fail.
        
        %
        engine_data_step(in, run).
        engine_data_step(run, query).
        engine_data_step(query, data).
        %
        engine_deal_step(run) :-
            debug_mode,
            !.
        engine_deal_step(data).
        %
        engine_fail_step(out).
        engine_fail_step(error).
        %
        engine_restart_step(restart, in).
        %
        engine_error_step(error).
        
         %
        %%
        
        /* реализация - подготовка данных */
        
        % in-run
        prepare_data(Scope, Type, PK, TypeNextStep) :-
            memberchk(Scope, [wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg]),
            Type = in, TypeNextStep = run,
            % MonthQty, MonthBonusQty, Pairs01, Pairs02
            ( get_param_list(Scope, Type, [pCommon-1], Pairs01) ; Pairs01 = [] ),
            get_param_list(Scope, Type, [pMonthQty-MonthQty], Pairs02),
            ( member_list([pMonthBonusQty-MonthBonusQty], Pairs02) ; MonthBonusQty = 0 ),
            % DateCalc, MonthOffset, MonthBefore, Pairs
            append(PK, [pDateCalc-DateCalc], Pairs03),
            get_param_list(Scope, Type, Pairs03, Pairs),
            ( member_list([pMonthOffset-MonthOffset], Pairs) ; MonthOffset = 0 ),
            ( member_list([pMonthBefore-MonthBefore], Pairs) ; MonthBefore = 0 ),
            % DateCalcFrom, DateCalcTo
            atom_date(DateCalc, date(Y0, M0, _)),
            atom_date(DateCalcTo0, date(Y0, M0, 1)),
            MonthOffset1 is (- MonthOffset),
            date_add(DateCalcTo0, MonthOffset1, month, DateCalcTo),
            MonthAdd is (- (MonthQty + MonthBefore)),
            date_add(DateCalcTo, MonthAdd, month, DateCalcFrom),
            % DateNormFrom, DateNormTo
            date_add(DateCalcTo, -1, day, DateCalcTo1),
            atom_date(DateCalcTo1, date(Y, _, _)),
            atom_date(DateNormFrom, date(Y, 1, 1)),
            Y1 is Y + 1,
            atom_date(DateNormTo, date(Y1, 1, 1)),
            % DateBonusFrom
            MonthBonusQty1 is (- MonthBonusQty),
            date_add(DateCalcFrom, MonthBonusQty1, month, DateBonusFrom),
            % PairsNextStep
            append([Pairs,
                        [
                        pDateCalcFrom-DateCalcFrom, pDateCalcTo-DateCalcTo,
                        pDateNormFrom-DateNormFrom, pDateNormTo-DateNormTo,
                        pDateBonusFrom-DateBonusFrom, pDateBonusTo-DateCalcFrom
                        ],
                    Pairs01, Pairs02
                    ],
                    PairsNextStep),
            new_param_list(Scope, TypeNextStep, PairsNextStep),
            !.
        
        % run-query
        prepare_data(Scope, Type, PK, TypeNextStep) :-
            memberchk(Scope, [wg_avg_wage_vacation, wg_avg_wage_sick, wg_avg_wage_avg]),
            Type = run, TypeNextStep = query,
            get_param_list(Scope, Type, PK, Pairs),
            forall( ( gd_pl_ds(Scope, kb, PredicateName, Arity, _),
                      Query = PredicateName/Arity,
                      is_valid_sql(Query),
                      get_sql(Scope, kb, Query, SQL, Params),
                      member_list(Params, Pairs),
                      prepare_sql(SQL, Params, PrepSQL),
                      append(PK, [pQuery-Query, pSQL-PrepSQL], PairsNextStep),
                      \+ get_param_list(Scope, TypeNextStep, PairsNextStep)
                    ),
                    new_param_list(Scope, TypeNextStep, PairsNextStep)
                  ),
            !.
        
        /* реализация - расширение для клиента */
        
        %  05. Начисление отпусков
        
        % загрузка входных данных по сотруднику
        % CoefOption: fc_fcratesum ; ml_rate ; ml_msalary
        avg_wage_in(EmplKey, FirstMoveKey, DateCalc, MonthOffset, CoefOption) :-
            Scope = wg_avg_wage_vacation, Type = in,
            new_param_list(Scope, Type,
                [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey,
                 pDateCalc-DateCalc, pMonthOffset-MonthOffset,
                 pCoefOption-CoefOption]),
            !.
        
        % выгрузка детальных выходных данных по сотруднику
        avg_wage_det(EmplKey, FirstMoveKey,
                        Period, Rule, Wage, ModernCoef, ModernWage,
                        TabDays, NormDays, TabHoures, NormHoures,
                        SalaryOld, SalaryNew) :-
            % параметры контекста
            Scope = wg_avg_wage_vacation, Type = temp,
            % шаблон первичного ключа
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % для каждого периода
            % взять данные по табелю и графику
            append(PK, [pYM-Y-M,
                            pTDays-TabDays, pTHoures-TabHoures,
                            pNDays-NormDays, pNHoures-NormHoures],
                    Pairs),
            get_param_list(Scope, Type, Pairs),
            once( (
                % если для первого движения по типу 1 (прием на работу)
                % где дата совпадает с проверяемым месяцем
                get_data(Scope, kb, usr_wg_MovementLine, [
                    fEmplKey-EmplKey,
                    fDocumentKey-FirstMoveKey, fFirstMoveKey-FirstMoveKey,
                    fMoveYear-Y, fMoveMonth-M, fDateBegin-Period, fMovementType-1 ]),
                % и является датой последнего приема на работу
                get_last_hire(Scope, PK, Period)
                % то период есть дата начала работы
                ;
                % иначе сформировать дату периода, как первый день месяца
                atom_date(Period, date(Y, M, 1))
                ) ),
            % взять данные по правилам расчета
            append(PK, [pMonthIncl-MonthIncl], Pairs1),
            once( ( get_param_list(Scope, Type, Pairs1) ; MonthIncl = [] ) ),
            once( ( memberchk(Y-M-Rule, MonthIncl) ; Rule = none ) ),
            % взять данные по заработку
            once( ( ( append(PK, [pYM-Y-M,
                                    pWage-Wage, pModernCoef-ModernCoef, pModernWage-ModernWage,
                                    pSalaryOld-SalaryOld, pSalaryNew-SalaryNew],
                                Pairs2),
                      get_param_list(Scope, Type, Pairs2) )
                      ; [Wage, ModernCoef, ModernWage, SalaryOld, SalaryNew] = [0, 1, 0, 0, 0] ) ),
            %
            % есть отработанные часы или заработок
            once( ( TabHoures > 0 ; ModernWage > 0 ) ),
            true.
        
        %  06. Начисление больничных
        
        % загрузка входных данных по сотруднику
        avg_wage_sick_in(EmplKey, FirstMoveKey, DateCalc, IsAvgWageDoc) :-
            Scope = wg_avg_wage_sick, Type = in,
            new_param_list(Scope, Type,
                [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey,
                 pDateCalc-DateCalc, pIsAvgWageDoc-IsAvgWageDoc]),
            !.
        
        % выгрузка детальных выходных данных по сотруднику
        avg_wage_sick_det(EmplKey, FirstMoveKey,
                            Period, Rule,
                            MonthDays, ExclDays, CalcDays, IsFullMonth, IsSpecMonth,
                            Wage,
                            TabDays, NormDays, TabHoures, NormHoures) :-
            % параметры контекста
            Scope = wg_avg_wage_sick, Type = temp,
            % шаблон первичного ключа
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % для каждого периода
            % взять данные по расчетным дням
            append(PK, [pYM-Y-M, pRule-Rule,
                        pMonthDays-MonthDays, pExclDays-ExclDays,
                        pCalcDays-CalcDays, pIsFullMonth-IsFullMonth,
                        pIsSpecMonth-IsSpecMonth],
                    Pairs),
            get_param_list(Scope, temp, Pairs),
            % взять данные по заработку
            append(PK, [pYM-Y-M, pWage-Wage], Pairs1),
            get_param_list(Scope, Type, Pairs1),
            % взять данные по табелю и графику
            append(PK, [pYM-Y-M,
                            pTDays-TabDays, pTHoures-TabHoures,
                            pNDays-NormDays, pNHoures-NormHoures],
                    Pairs2),
            get_param_list(Scope, Type, Pairs2),
            once( (
                % если для первого движения по типу 1 (прием на работу)
                % где дата совпадает с проверяемым месяцем
                get_data(Scope, kb, usr_wg_MovementLine, [
                    fEmplKey-EmplKey,
                    fDocumentKey-FirstMoveKey, fFirstMoveKey-FirstMoveKey,
                    fMoveYear-Y, fMoveMonth-M, fDateBegin-Period, fMovementType-1 ]),
                % и является датой последнего приема на работу
                get_last_hire(Scope, PK, Period)
                % то период есть дата начала работы
                ;
                % иначе сформировать дату периода, как первый день месяца
                atom_date(Period, date(Y, M, 1))
                ) ),
            true.
        
        %  12. Начисление по-среднему
        
        % загрузка входных данных по сотруднику
        avg_wage_avg_in(EmplKey, FirstMoveKey, DateCalc, CalcByHoure, MonthBefore) :-
            Scope = wg_avg_wage_avg, Type = in,
            new_param_list(Scope, Type,
                [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey,
                 pDateCalc-DateCalc, pCalcByHoure-CalcByHoure,
                 pMonthBefore-MonthBefore]),
            !.
        
        % выгрузка детальных выходных данных по сотруднику
        avg_wage_avg_det(EmplKey, FirstMoveKey,
                            Period, Wage,
                            TabDays, NormDays, TabHoures, NormHoures) :-
            % параметры контекста
            Scope = wg_avg_wage_avg, Type = temp,
            % шаблон первичного ключа
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % для каждого периода
            % взять данные по заработку
            append(PK, [pYM-Y-M, pWage-Wage], Pairs1),
            get_param_list(Scope, Type, Pairs1),
            % взять данные по табелю и графику
            append(PK, [pYM-Y-M,
                            pTDays-TabDays, pTHoures-TabHoures,
                            pNDays-NormDays, pNHoures-NormHoures],
                    Pairs2),
            get_param_list(Scope, Type, Pairs2),
            once( (
                % если для первого движения по типу 1 (прием на работу)
                % где дата совпадает с проверяемым месяцем
                get_data(Scope, kb, usr_wg_MovementLine, [
                    fEmplKey-EmplKey,
                    fDocumentKey-FirstMoveKey, fFirstMoveKey-FirstMoveKey,
                    fMoveYear-Y, fMoveMonth-M, fDateBegin-Period, fMovementType-1 ]),
                % и является датой последнего приема на работу
                get_last_hire(Scope, PK, Period)
                % то период есть дата начала работы
                ;
                % иначе сформировать дату периода, как первый день месяца
                atom_date(Period, date(Y, M, 1))
                ) ),
            true.
        
        
        %  05, 06, 12
        
        % выгрузка SQL-запросов по сотруднику
        avg_wage_sql(Scope, EmplKey, FirstMoveKey, PredicateName, Arity, SQL) :-
            Type = query, TypeNextStep = data,
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            Query = PredicateName/Arity,
            append(PK, [pQuery-Query, pSQL-SQL], Pairs),
            get_param_list(Scope, Type, Pairs),
            \+ get_param_list(Scope, TypeNextStep, Pairs).
        
        % подтвеждение формирования фактов по сотруднику
        avg_wage_kb(Scope, EmplKey, FirstMoveKey, PredicateName, Arity, SQL) :-
            Type = query, TypeNextStep = data,
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            Query = PredicateName/Arity,
            append(PK, [pQuery-Query, pSQL-SQL], Pairs),
            get_param_list(Scope, Type, Pairs),
            \+ get_param_list(Scope, TypeNextStep, Pairs),
            new_param_list(Scope, TypeNextStep, Pairs),
            !.
        
        % выгрузка данных выполнения по сотруднику
        avg_wage_run(Scope, EmplKey, FirstMoveKey, DateCalcFrom, DateCalcTo) :-
            Type = run,
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            append(PK, [pDateCalcFrom-DateCalcFrom, pDateCalcTo-DateCalcTo], Pairs),
            get_param_list(Scope, Type, Pairs).
        
        % выгрузка выходных данных по сотруднику
        avg_wage_out(Scope, EmplKey, FirstMoveKey, AvgWage, Variant) :-
            Type = out,
            % шаблон первичного ключа
            PK = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey],
            % взять данные по результатам расчета
            append(PK, [pAvgWage-AvgWage, pVariant-Variant], Pairs),
            get_param_list(Scope, Type, Pairs).
        
        % удаление данных по сотруднику
        avg_wage_clean(Scope, EmplKey, FirstMoveKey) :-
            gd_pl_ds(Scope, Type, Name, _, _),
            del_data(Scope, Type, Name, [fEmplKey-EmplKey, fFirstMoveKey-FirstMoveKey]),
            fail.
        avg_wage_clean(Scope, EmplKey, FirstMoveKey) :-
            get_param_list(Scope, Type, [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey], Pairs),
            dispose_param_list(Scope, Type, Pairs),
            fail.
        avg_wage_clean(_, _, _) :-
            !.
        
        /**/
        
        % section twg_struct
        % расчет структуры
        % - для отпусков
        % - для больничных
        %
        
        /* реализация */
        
        %
        struct_vacation_sql(DocKey, DateBegin, DateEnd, PredicateName, Arity, SQL) :-
            Scope = wg_struct_vacation, NextType = run,
            Pairs = [pDocKey-DocKey, pDateBegin-DateBegin, pDateEnd-DateEnd],
            get_sql(Scope, kb, Query, SQL0, Params),
            is_valid_sql(Query),
            Query = PredicateName/Arity,
            member_list(Params, Pairs),
            prepare_sql(SQL0, Params, SQL),
            Pairs1 = [pDocKey-DocKey, pQuery-Query, pSQL-SQL],
            new_param_list(Scope, NextType, Pairs1).
        
        %
        struct_vacation_in(DateCalc, DateBegin, DateEnd, AvgWage, SliceOption) :-
            atom_date(DateCalc, date(Year, Month, _)),
            month_days(Year, Month, Days),
            atom_date(AccDate, date(Year, Month, Days)),
            once( (SliceOption = 0, FilterVcType = 0 ; true) ),
            findall( VcType-Slice,
                        ( wg_vacation_slice(VcType, Slice), VcType = FilterVcType ),
                     SliceList0 ),
            keysort(SliceList0, [Slice0|SliceList1]),
            append(SliceList1, [Slice0], SliceList),
            struct_vacation_calc(SliceList, _-0, AccDate, DateBegin, DateEnd, AvgWage),
            !.
        
        %
        struct_vacation_calc([Slice|SliceList], _-Slice0, AccDate, DateBegin, DateEnd, AvgWage) :-
            Slice0 =:= 0,
            !,
            struct_vacation_calc(SliceList, Slice, AccDate, DateBegin, DateEnd, AvgWage).
        struct_vacation_calc(_, _, _, '', '', _) :-
            !.
        struct_vacation_calc([], _-Slice, _, _, _, _) :-
            Slice =:= 0,
            !.
        struct_vacation_calc(SliceList, VcType-Slice, AccDate, DateBegin, DateEnd, AvgWage) :-
            make_period(DateBegin, DateEnd, DateBegin1, DateEnd1, DateBegin2, DateEnd2, Slice, Slice2),
            atom_date(DateBegin1, date(Y, M, _)),
            atom_date(IncludeDate, date(Y, M, 1)),
            sum_vacation_days(DateBegin1, DateEnd1, 1, Duration),
            Summa is Duration * AvgWage,
            OutPairs = [
                        pAccDate-AccDate, pIncludeDate-IncludeDate,
                        pDuration-Duration, pSumma-Summa,
                        pDateBegin-DateBegin1, pDateEnd-DateEnd1,
                        pVcType-VcType
                        ],
            new_param_list(struct_vacation, out, OutPairs),
            !,
            struct_vacation_calc(SliceList, VcType-Slice2, AccDate, DateBegin2, DateEnd2, AvgWage).
        
        %
        sum_vacation_days(DateBegin, DateBegin, Duration0, Duration1) :-
            ( catch( wg_holiday(DateBegin), _, fail ), Duration1 is Duration0 - 1
            ; Duration1 = Duration0 ),
            !.
        sum_vacation_days(DateBegin, DateEnd, Duration0, Duration) :-
            date_add(DateBegin, 1, day, DateBegin1),
            ( catch( wg_holiday(DateBegin), _, fail ), Duration1 = Duration0
            ; Duration1 is Duration0 + 1 ),
            !,
            sum_vacation_days(DateBegin1, DateEnd, Duration1, Duration).
        
        %
        struct_sick_sql(EmplKey, FirstMoveKey, DateBegin, DateEnd, PredicateName, Arity, SQL) :-
            Scope = wg_struct_sick, Type = in, NextType = run,
            % формирование параметров выполнения
            DateCalcFrom = DateBegin,
            date_add(DateEnd, 1, day, DateCalcTo),
            once( ( get_param_list(Scope, Type, [pCommon-1], Pairs01) ; Pairs01 = [] ) ),
            get_param_list(Scope, Type, [pBudgetPart-_], Pairs02),
            append(Pairs01, Pairs02, Pairs0),
            append(Pairs0,
                        [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey,
                         pDateCalcFrom-DateCalcFrom, pDateCalcTo-DateCalcTo,
                         pDateNormFrom-DateCalcFrom, pDateNormTo-DateCalcTo],
                    Pairs),
            new_param_list(Scope, NextType, Pairs),
            % формирование SQL-запроса
            get_sql(Scope, kb, Query, SQL0, Params),
            is_valid_sql(Query),
            Query = PredicateName/Arity,
            member_list(Params, Pairs),
            prepare_sql(SQL0, Params, SQL),
            % добавление SQL-запроса к параметрам выполнения
            Pairs1 = [pEmplKey-EmplKey, pFirstMoveKey-FirstMoveKey,
                      pQuery-Query, pSQL-SQL],
            new_param_list(Scope, NextType, Pairs1).
        
        %
        struct_sick_in(DateCalc, DateBegin, DateEnd, AvgWage, CalcType, BudgetOption, IsPregnancy, IllType) :-
            Scope = wg_struct_sick, Type = in, NextType = run,
            % шаблон первичного ключа
            PK = [pEmplKey-_, pFirstMoveKey-_],
            % формирование временных данных по графику работы
            get_param_list(Scope, NextType, PK),
            make_schedule(Scope, PK),
            % формирование временных данных параметров расчета
            Pairs0 = [pBudgetOption-BudgetOption, pIsPregnancy-IsPregnancy, pIllType-IllType],
            append(PK, Pairs0, Pairs),
            new_param_list(Scope, temp, Pairs),
            %
            atom_date(DateCalc, date(Year, Month, _)),
            month_days(Year, Month, Days),
            atom_date(AccDate, date(Year, Month, Days)),
            date_diff(DateBegin, Duration0, DateEnd),
            Duration is Duration0 + 1,
            %
            sick_slice_list(Scope, Type, CalcType, Duration, SliceList0),
            %
            date_diff(DateCalc, DurationBefore, DateBegin),
            sick_slice_list_excl(SliceList0, SliceList, DurationBefore),
            %
            struct_sick_calc(SliceList, _-0, AccDate, DateBegin, DateEnd, AvgWage, Scope, PK),
            !.
        
        %
        sick_slice_list(Scope, Type, CalcType, Duration, SliceList) :-
            Params = [
                      pFirstCalcType-FirstCalcType,
                      pFirstDuration-FirstDuration,
                      pFirstPart-FirstPart
                     ],
            get_param_list(Scope, Type, Params),
            sick_slice_list(Scope, Type, [1.0-Duration], CalcType, FirstCalcType, FirstPart-FirstDuration, SliceList),
            !.
        %
        sick_slice_list(_, _, SliceList0, CalcType, CalcType, FirstSlice, [FirstSlice|SliceList0]) :-
            !.
        sick_slice_list(Scope, Type, [_-Duration], CalcType, _, FirstPart-FirstDuration, SliceList) :-
            Params = [
                      pCutCalcType-CalcType,
                      pCutDuration-CutDuration,
                      pCutPart-CutPart
                     ],
            get_param_list(Scope, Type, Params),
            Part2 is FirstPart * CutPart,
            Duration2 is FirstDuration - CutDuration,
            append([[0.0-CutDuration], [Part2-Duration2], [CutPart-Duration]], SliceList),
            !.
        sick_slice_list(_, _, SliceList, _, _, _, SliceList) :-
            !.
        
        %
        sick_slice_list_excl(SliceList, SliceList, 0) :-
            !.
        sick_slice_list_excl([LastSlice|[]], [LastSlice], _) :-
            !.
        sick_slice_list_excl([Slice|SliceList], [Slice1|SliceList1], DurationBefore) :-
            sick_slice_excl(Slice, Slice1, DurationBefore, DurationBefore1),
            !,
            sick_slice_list_excl(SliceList, SliceList1, DurationBefore1).
        
        %
        sick_slice_excl(Part-Duration, Part-Duration1, DurationBefore, DurationBefore1) :-
            Duration0 is Duration - DurationBefore,
            ( Duration0 > 0 -> Duration1 = Duration0 ; Duration1 = 0),
            DurationBefore0 is DurationBefore - Duration,
            ( DurationBefore0 > 0 -> DurationBefore1 = DurationBefore0 ; DurationBefore1 = 0),
            !.
        
        %
        struct_sick_calc([Slice|SliceList], _-Slice0, AccDate, DateBegin, DateEnd, AvgWage, Scope, PK) :-
            Slice0 =:= 0,
            !,
            struct_sick_calc(SliceList, Slice, AccDate, DateBegin, DateEnd, AvgWage, Scope, PK).
        struct_sick_calc(_, _, _, '', '', _, _, _) :-
            !.
        struct_sick_calc([], _-Slice, _, _, _, _, _, _) :-
            Slice =:= 0,
            !.
        struct_sick_calc(SliceList, SickPart0-Slice, AccDate, DateBegin, DateEnd, AvgWage0, Scope, PK) :-
            make_period(DateBegin, DateEnd, DateBegin1, DateEnd1, DateBegin2, DateEnd2, Slice, Slice2),
            atom_date(DateBegin1, date(Y, M, _)),
            atom_date(IncludeDate, date(Y, M, 1)),
            Scope = wg_struct_sick,
            % взять временные данные параметров расчета
            Pairs0 = [pBudgetOption-BudgetOption, pIsPregnancy-IsPregnancy, pIllType-IllType],
            append(PK, Pairs0, Pairs),
            get_param_list(Scope, temp, Pairs),
            %
            ( BudgetOption = 1,
              ( SickPart0 =:= 0, SickPart = 0.0
              ; SickPart = 1.0
              )
            ; SickPart = SickPart0
            ),
            Percent is SickPart * 100,
            date_add(DateEnd1, 1, day, DateEnd11),
            sum_sick_days(DateBegin1, DateEnd11, 0, DOI, 0, HOI, IllType, Scope, PK),
            ( BudgetOption = 1,
              get_avg_wage_budget(Scope, in, Y-M, AvgWage)
            ; check_avg_wage(Scope, IsPregnancy, Y-M, AvgWage0, AvgWage)
            ),
            Summa is round(DOI * AvgWage * SickPart),
            OutPairs = [
                        pAccDate-AccDate, pIncludeDate-IncludeDate,
                        pPercent-Percent, pDOI-DOI, pHOI-HOI, pSumma-Summa,
                        pDateBegin-DateBegin1, pDateEnd-DateEnd1
                        ],
            new_param_list(Scope, out, OutPairs),
            !,
            struct_sick_calc(SliceList, SickPart-Slice2, AccDate, DateBegin2, DateEnd2, AvgWage0, Scope, PK).
        
        %
        check_avg_wage(_, 1, _, AvgWage, AvgWage) :-
            % есть признак Декретный
            !.
        check_avg_wage(Scope, _, Y-M, AvgWage0, AvgWage) :-
            % среднедневная зп для месяца по среднемесячной зп
            avg_wage_by_avg_salary(Scope, Y-M, AvgWage1),
            % определить среднедневную зп
            ( AvgWage0 =< AvgWage1, AvgWage = AvgWage0
            ; AvgWage = AvgWage1 ),
            !.
        check_avg_wage(_, _, _, AvgWage, AvgWage) :-
            !.
        %
        make_period(DateBegin, DateEnd, DateBegin, DateEnd1, DateBegin2, DateEnd2, Slice, Slice2) :-
            head_period(DateBegin, DateEnd, DateEnd1, Slice, Slice2),
            teil_period(DateEnd, DateEnd1, DateBegin2, DateEnd2),
            !.
        
        %
        head_period(DateBegin, DateEnd, DateBegin, Slice, Slice2) :-
           date_add(DateBegin, 1, day, DateBegin1),
           atom_date(DateBegin, date(Y, M, _)),
           ( \+ atom_date(DateBegin1, date(Y, M, _)), next_slice(DateBegin, Slice, Slice2)
           ; DateBegin1 @> DateEnd, Slice2 = 0
           ; Slice =:= 1, next_slice(DateBegin, Slice, Slice2)
           ),
           !.
        head_period(DateBegin, DateEnd, DateEnd1, Slice0, Slice2) :-
           date_add(DateBegin, 1, day, DateBegin1),
           next_slice(DateBegin, Slice0, Slice1),
           !,
           head_period(DateBegin1, DateEnd, DateEnd1, Slice1, Slice2).
        
        %
        next_slice(DateBegin, Slice, Slice) :-
           catch( wg_holiday(DateBegin), _, fail ),
           !.
        next_slice(_, Slice, Slice2) :-
           Slice2 is Slice - 1,
           !.
        
        %
        teil_period(DateEnd, DateEnd, '', '') :-
            !.
        teil_period(DateEnd, DateEnd1, DateBegin2, DateEnd) :-
            date_add(DateEnd1, 1, day, DateBegin2),
            !.
        
        %
        sum_sick_days(DateBegin, DateBegin, DOI, DOI, HOI, HOI, _, _, _) :-
            !.
        sum_sick_days(DateBegin, DateEnd, DOI0, DOI, HOI0, HOI, IllType, Scope, PK) :-
            add_sick_norm(DateBegin, DOI0, HOI0, DOI1, HOI1, IllType, Scope, PK),
            date_add(DateBegin, 1, day, DateBegin1),
            !,
            sum_sick_days(DateBegin1, DateEnd, DOI1, DOI, HOI1, HOI, IllType, Scope, PK).
        
        %
        add_sick_norm(TheDay, DOI0, HOI0, DOI1, HOI1, IllType, Scope, PK) :-
            ( member(NormOption, [tbl_cal_flex, tbl_day_norm]),
              usr_wg_TblDayNorm_mix(Scope, PK, _, TheDay, WDuration, 1, NormOption),
              WDuration > 0,
              DOI1 is DOI0 + 1, HOI1 is HOI0 + WDuration
            ;
              ( catch( wg_job_ill_type(IllType), _, fail),
                DOI1 = DOI0
              ; DOI1 is DOI0 + 1
              ), HOI1 = HOI0
            ),
            !.
        
        %
        struct_vacation_out(AccDate, IncludeDate, Duration, Summa, DateBegin, DateEnd, VcType) :-
            OutPairs = [
                        pAccDate-AccDate, pIncludeDate-IncludeDate,
                        pDuration-Duration, pSumma-Summa,
                        pDateBegin-DateBegin, pDateEnd-DateEnd,
                        pVcType-VcType
                        ],
            get_param_list(struct_vacation, out, OutPairs).
        
        %
        struct_sick_out(AccDate, IncludeDate, Percent, DOI, HOI, Summa, DateBegin, DateEnd) :-
            Scope = wg_struct_sick,
            OutPairs = [
                        pAccDate-AccDate, pIncludeDate-IncludeDate,
                        pPercent-Percent, pDOI-DOI, pHOI-HOI, pSumma-Summa,
                        pDateBegin-DateBegin, pDateEnd-DateEnd
                        ],
            get_param_list(Scope, out, OutPairs).
        
        % взять среднедневной БПМ на текущий месяц
        get_avg_wage_budget(Scope, Type, Y-M, AvgWageBudget) :-
            % первая дата месяца
            atom_date(FirstMonthDate, date(Y, M, 1)),
            % взять БПМ
            findall( Budget0,
                          % взять данные по БПМ
                        ( get_data(Scope, kb, gd_const_budget, [
                                    fConstDate-ConstDate, fBudget-Budget0]),
                          % где дата константы меньше первой даты месяца
                          ConstDate @=< FirstMonthDate
                        ),
            % в список БПМ
            BudgetList),
            % проверить список БПМ
            \+ BudgetList = [],
            % последние данные по БПМ за месяц
            last(BudgetList, MonthBudget),
            % календарных дней в месяце
            month_days(Y, M, MonthDays),
            % коэфициент для расчета по БПМ
            get_param(Scope, Type, pBudgetPart-BudgetPart),
            % среднедневной БПМ
            AvgWageBudget is MonthBudget * BudgetPart / MonthDays,
            !.
        get_avg_wage_budget(_, _, _, 0) :-
            !.
        
        % среднедневная зп для месяца по среднемесячной зп
        avg_wage_by_avg_salary(Scope, Y-M, MonthAvgWage) :-
            % первая дата месяца
            atom_date(FirstMonthDate, date(Y, M, 1)),
            % взять среднюю зп
            findall( AvgSalary0,
                          % взять данные по средней зп
                        ( get_data(Scope, kb, gd_const_AvgSalaryRB, [
                                    fConstDate-ConstDate, fAvgSalaryRB-AvgSalary0]),
                          % где дата константы меньше первой даты месяца
                          ConstDate @< FirstMonthDate
                        ),
            % в список средних зп
            AvgSalaryList),
            % проверить список средних зп
            \+ AvgSalaryList = [],
            % последние данные средней зп за месяц
            last(AvgSalaryList, MonthAvgSalary),
            % взять расчетный коэфициент
            get_param(Scope, in, pAvgSalaryRB_Coef-AvgSalaryRB_Coef),
            % календарных дней в месяце
            month_days(Y, M, MonthDays),
            % расчитать среднедневную зп для месяца
            MonthAvgWage is round(MonthAvgSalary * AvgSalaryRB_Coef / MonthDays),
            !.
        
        /**/
        
         %
        %%
        
        
      DISPLAYSCRIPT: ~
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: ~
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-06-05T15:44:28+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "151189469_18175251 lib"
          - 
            ADDFUNCTIONKEY: "151189468_18175251 params"
          - 
            ADDFUNCTIONKEY: "151189470_18175251 twg_avg_wage_sql"
          - 
            ADDFUNCTIONKEY: "151189471_18175251 twg_avg_wage_in_params"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 528612033_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "VBCLASSES"
      LANGUAGE: "VBScript"
      NAME: "Twg_Prolog"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        
        Class Twg_Prolog
        '
          Private VarSyncField
          
          Private Sub Class_Initialize
            VarSyncField = "PrologSyncField"
          End Sub
        
          Private Sub Class_Terminate
            Set wg_Prolog_ = Nothing
          End Sub
          
          Public Sub SyncField(ByRef Sender, ByVal Allow)
            If Not Sender.VariableExists(VarSyncField) Then
              Sender.AddVariableItem(VarSyncField)
              Sender.Variables(VarSyncField) = False
            End If
            '
            Sender.Variables(VarSyncField) = Allow
          End Sub
          
          Public Function SyncField_Name(ByRef Sender, ByVal FieldName)
            If Not Sender.VariableExists(VarSyncField) Then
              Sender.AddVariableItem(VarSyncField)
              Sender.Variables(VarSyncField) = False
            End If
            '
            If Sender.Variables(VarSyncField) = True Then
              SyncField_Name = ""
            Else
              SyncField_Name = FieldName
            End If
          End Function
        '
        End Class
        
      DISPLAYSCRIPT: ~
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: ~
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-03-26T13:36:06+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 528612032_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_Prolog"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        
        Function wg_Prolog
          If Not Assigned(wg_Prolog_) Then
            Set wg_Prolog_ = New Twg_Prolog
          end if
        
          Set wg_Prolog = wg_Prolog_
        End Function
        
      DISPLAYSCRIPT: | 
        WG_PROLOG
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: ~
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-03-26T11:57:22+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151158419_5956463
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151163587_5956463
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "pl_GetScriptIDByName"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        
        'uses pl_Const
        Function pl_GetScriptIDByName(Name)
          Dim Creator, ibsql
        
          pl_GetScriptIDByName = 0
        
          Set Creator = New TCreator
          Set ibsql = Creator.GetObject(nil, "TIBSQL", "")
        
          ibsql.Transaction = gdcBaseManager.ReadTransaction
          ibsql.SQL.TEXT = _
              "SELECT * FROM gd_function" & _
              " WHERE UPPER(name) = UPPER(:name) AND module = :module"
          ibsql.ParamByName("name").AsString = Name
          ibsql.ParamByName("module").AsString = scrPrologModuleName
          ibsql.ExecQuery
        
          If Not ibsql.EOF Then
             pl_GetScriptIDByName = ibsql.FieldByName("id").AsInteger
          End If
        End Function
        
      DISPLAYSCRIPT: | 
        PL_GETSCRIPTIDBYNAME
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QEAAAATkFNRQQAAABOQU1FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2013-10-11T16:45:28+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 156299481_119200397
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151163587_5956463
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_AvgSalary_CoefOption"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include wg_WageSettings
        
        Sub wg_AvgSalary_CoefOption(ByRef Sender)
        '
          Dim InflType, InflFCType
          Dim rbFCRate, rbRateInf, rbMovementRate, rbSalaryInf
          
          InflType = wg_WageSettings.Inflation.InflType
          InflFCType = wg_WageSettings.Inflation.InflFCType
          '
          'От оклада
          Set rbSalaryInf = Sender.GetComponent("usrg_rbSalaryInf")
          rbSalaryInf.Checked = False
          'От ставки 1-го разряда
          Set rbRateInf = Sender.FindComponent("usrg_rbRateInf")
          rbRateInf.Checked = False
          '  справочника
          Set rbFCRate = Sender.FindComponent("usrg_rbFCRate")
          rbFCRate.Checked = False
          '  кадрового движения
          Set rbMovementRate = Sender.FindComponent("usrg_rbMovementRate")
          rbMovementRate.Checked = False
          '
          Select Case InflType
            'usrg_rbSalaryInf - От оклада
            Case 0
              rbSalaryInf.Checked = True
            'usrg_rbRateInf - От ставки 1-го разряда
            Case 1
              rbRateInf.Checked = True
              '
              Select Case InflFCType
                'usrg_rbFCRate - справочника
                Case 0
                  rbFCRate.Checked = True
                'usrg_rbMovementRate - кадрового движения
                Case 2
                  rbMovementRate.Checked = True
              End Select
              '
          End Select
        '
        End Sub
        
      DISPLAYSCRIPT: | 
        WG_AVGSALARY_COEFOPTION
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-02-27T10:57:15+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147016040_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151163587_5956463
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_EnableFieldChange"
      COMMENT: ~
      SCRIPT: | 
        option explicit
        
        sub wg_CheckVariableExists(ByRef Self, ByVal VarName)
          if not Self.VariableExists(VarName) then
            Self.AddVariableItem(VarName)
            Self.Variables(VarName) = 0
          end if
        end sub
        
        sub wg_CheckObjectExists(ByRef Self, ByVal VarName, ByRef O)
          if not Self.ObjectExists(VarName) then
            Self.AddObjectItem(VarName)
            Self.Objects(VarName) = O
          end if
        end sub
        
        sub wg_EnableFieldChange(ByRef Self, ByVal VarName)
          call wg_CheckVariableExists(Self, VarName)
          if Self.Variables(VarName) > 0 then
            Self.Variables(VarName) = Self.Variables(VarName) - 1
          end if
        end sub
        
        sub wg_DisableFieldChange(ByRef Self, ByVal VarName)
          call wg_CheckVariableExists(Self, VarName)
          Self.Variables(VarName) = Self.Variables(VarName) + 1
        end sub
        
        function wg_EnabledFieldChange(ByRef Self, ByVal VarName)
          call wg_CheckVariableExists(Self, VarName)
          wg_EnabledFieldChange = (Self.Variables(VarName) = 0)
        end function
        
      DISPLAYSCRIPT: | 
        WG_CHECKVARIABLEEXISTS
        WG_CHECKOBJECTEXISTS
        WG_ENABLEFIELDCHANGE
        WG_DISABLEFIELDCHANGE
        WG_ENABLEDFIELDCHANGE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QEAAAAU0VMRgQAAABTRUxGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNU
        BwAAAFZBUk5BTUUHAAAAVkFSTkFNRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNURkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2007-03-13T16:49:05+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147019760_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151163587_5956463
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_WageSettings"
      COMMENT: ~
      SCRIPT: | 
        option explicit
        function wg_WageSettings
          if not Assigned(wg_WageSettings_) then
            set wg_WageSettings_ = New Twg_WageSettings
          end if
          
          set wg_WageSettings = wg_WageSettings_
        end function
        
      DISPLAYSCRIPT: | 
        WG_WAGESETTINGS
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: ~
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2004-12-24T12:23:47+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151163587_5956463
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_AvgSalaryStrGenerate_pl"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include wg_WageSettings
        '#include wg_EnableFieldChange
        '#include pl_GetScriptIDByName
        '#include wg_AvgSalary_CoefOption
        
        Function wg_AvgSalaryStrGenerate_pl(ByRef Sender, ByVal CalcType)
        '
          Dim T, T1, T2
          
          Dim Creator, gdcObject, gdcSalary
          '
          Dim PL, Ret, Pred, Tv, Append
          Dim PredFile, Scope
          'avg_wage
          Dim P_main, Tv_main, Q_main
          'avg_wage_in
          Dim P_in, Tv_in, Q_in
          Dim EmplKey, FirstMoveKey, DateCalc
          Dim InflType, InflFCType
          Dim MonthOffset, CoefOption
          'avg_wage_run, avg_wage_sql
          Dim P_run, Tv_run, Q_run, P_sql, Tv_sql, Q_sql, P_kb
          Dim DateCalcFrom, DateCalcTo
          Dim PredicateName, Arity, SQL
          'avg_wage_out, avg_wage_det
          Dim P_out, Tv_out, Q_out, P_det, Tv_det, Q_det
          Dim AvgWage, AvgWageRule
          Dim Period, PeriodRule, Wage, ModernWage, ModernCoef
          Dim TabDays, TabHoures, NormDays, NormHoures
          Dim SalaryOld, SalaryNew
          Dim IsFull, IsCheck
        
          T1 = Timer
          wg_AvgSalaryStrGenerate_pl = False
          Set Creator = New TCreator
          
          Sender.GetComponent("actApply").Execute
        
          Set gdcObject = Sender.gdcObject
          '
          EmplKey = gdcObject.FieldByName("usr$emplkey").AsInteger
          FirstMoveKey = gdcObject.FieldByName("usr$firstmovekey").AsInteger
          '
          if CalcType = 0 then
            dim IBSQL
            set IBSQL = Creator.GetObject(nil, "TIBSQL", "")
            IBSQL.Transaction = gdcBaseManager.ReadTransaction
            IBSQL.SQL.Text = _
              "select " & _
              "  t.USR$DATEBEGIN " & _
              "from " & _
              "  usr$wg_total t " & _
              "where " & _
              "  t.DOCUMENTKEY = :TDK "
            IBSQL.ParamByName("TDK").asInteger = gdcObject.FieldByName("USR$TOTALDOCKEY").AsInteger
            IBSQL.ExecQuery
            DateCalc = IBSQL.FieldByName("USR$DATEBEGIN").AsDateTime
          else
            DateCalc = gdcObject.FieldByName("usr$from").AsDateTime
          end if
          '
          MonthOffset = 0
          '
          InflType = wg_WageSettings.Inflation.InflType
          InflFCType = wg_WageSettings.Inflation.InflFCType
          'CoefOption: fc_fcratesum ; ml_rate ; ml_msalary
          Select Case InflType
            'usrg_rbSalaryInf - От оклада
            Case 0
              CoefOption = "ml_msalary"
            'usrg_rbRateInf - От ставки 1-го разряда
            Case 1
              Select Case InflFCType
                'usrg_rbFCRate - справочника
                Case 0
                  CoefOption = "fc_fcratesum"
                'usrg_rbMovementRate - кадрового движения
                Case 2
                  CoefOption = "ml_rate"
              End Select
          End Select
          '
        
          'проблема wg_WageSettings
          'CoefOption = "ml_rate" 'только для ММК, иначе эту строку закомментировать
        
          wg_AvgSalary_CoefOption(Sender)
        
          'init
          Set PL = Creator.GetObject(nil, "TgsPLClient", "")
          Ret = PL.Initialise("")
          If Not Ret Then
            Exit Function
          End If
          'debug
          PL.Debug = True
          'load
          Ret = PL.LoadScript(pl_GetScriptIDByName("twg_avg_wage"))
          If Not Ret Then
            Exit Function
          End If
          Scope = "wg_avg_wage_vacation"
        
          Set gdcSalary = Sender.GetComponent("usrg_gdcAvgSalaryStr")
          '
          Call wg_DisableFieldChange(gdcSalary, "AVGSALARYCALC")
          '
          gdcSalary.First
          While Not gdcSalary.EOF
            gdcSalary.Delete
          Wend
          '
          gdcObject.FieldByName("USR$AVGSUMMA").Clear
          '
          Sender.Repaint
        
          'avg_wage_in(EmplKey, FirstMoveKey, DateCalc, MonthOffset, CoefOption)
          P_in = "avg_wage_in"
          Set Tv_in = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_in = Creator.GetObject(nil, "TgsPLQuery", "")
          Tv_in.PutInteger 0, EmplKey
          Tv_in.PutInteger 1, FirstMoveKey
          Tv_in.PutDate 2, DateCalc
          Tv_in.PutInteger 3, MonthOffset
          Tv_in.PutAtom 4, CoefOption
          '
          Q_in.PredicateName = P_in
          Q_in.Termv = Tv_in
          '
          Q_in.OpenQuery
          If Q_in.EOF Then
            Exit Function
          End If
          Q_in.Close
        
          'avg_wage(Scope) - prepare data
          P_main = "avg_wage"
          Set Tv_main = Creator.GetObject(1, "TgsPLTermv", "")
          Set Q_main = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_main.PredicateName = P_main
          Q_main.Termv = Tv_main
          '
          Tv_main.PutAtom 0, Scope
          '
          Q_main.OpenQuery
          If Q_main.EOF Then
            Exit Function
          End If
          Q_main.Close
        
          'avg_wage_run(Scope, EmplKey, FirstMoveKey, DateCalcFrom, DateCalcTo)
          P_run = "avg_wage_run"
          Set Tv_run = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_run = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_run.PredicateName = P_run
          Q_run.Termv = Tv_run
          'avg_wage_sql(Scope, EmplKey, FirstMoveKey, PredicateName, Arity, SQL)
          P_sql = "avg_wage_sql"
          P_kb = "avg_wage_kb"
          Set Tv_sql = Creator.GetObject(6, "TgsPLTermv", "")
          Set Q_sql = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_sql.PredicateName = P_sql
          Q_sql.Termv = Tv_sql
          '
          Tv_run.PutAtom 0, Scope
          '
          Q_run.OpenQuery
          If Q_run.EOF Then
            Exit Function
          End If
          '
          Append = False
          '
          Do Until Q_run.EOF
            EmplKey = Tv_run.ReadInteger(1)
            FirstMoveKey = Tv_run.ReadInteger(2)
            DateCalcFrom = Tv_run.ReadDate(3)
            DateCalcTo = Tv_run.ReadDate(4)
            '
            Tv_sql.Reset
            Tv_sql.PutAtom 0, Scope
            Tv_sql.PutInteger 1, EmplKey
            Tv_sql.PutInteger 2, FirstMoveKey
            Q_sql.OpenQuery
            '
            Do Until Q_sql.EOF
              PredicateName = Tv_sql.ReadAtom(3)
              Arity = Tv_sql.ReadInteger(4)
              SQL = Tv_sql.ReadString(5)
              '
              Ret =  PL.MakePredicatesOfSQLSelect _
                        (SQL, _
                        gdcBaseManager.ReadTransaction, _
                        PredicateName, PredicateName, Append)
              If Ret >= 0 Then
                 Ret = PL.Call(P_kb, Tv_sql)
              End If
              '
              Q_sql.NextSolution
            Loop
            Q_sql.Close
            '
            Append = True
            '
            Q_run.NextSolution
          Loop
          Q_run.Close
        
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          'avg_wage(Scope) - calc result
          Q_main.OpenQuery
          If Q_main.EOF Then
            Exit Function
          End If
          Q_main.Close
        
          'avg_wage_out(Scope, EmplKey, FirstMoveKey, AvgWage, AvgWageVariant)
          P_out = "avg_wage_out"
          Set Tv_out = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_out = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_out.PredicateName = P_out
          Q_out.Termv = Tv_out
          'avg_wage_det(EmplKey, FirstMoveKey,
          '   Period, PeriodRule, Wage, ModernCoef, ModernWage,
          '   TabDays, NormDays, TabHoures, NormHoures,
          '   SalaryOld, SalaryNew)
          P_det = "avg_wage_det"
          Set Tv_det = Creator.GetObject(13, "TgsPLTermv", "")
          Set Q_det = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_det.PredicateName = P_det
          Q_det.Termv = Tv_det
          '
          Tv_out.PutAtom 0, Scope
          '
          Q_out.OpenQuery
          If Q_out.EOF Then
            Exit Function
          End If
          '
          Do Until Q_out.EOF
            EmplKey = Tv_out.ReadInteger(1)
            FirstMoveKey = Tv_out.ReadInteger(2)
            AvgWage = Tv_out.ReadFloat(3)
            AvgWageRule = Tv_out.ReadAtom(4)
            '
            Tv_det.Reset
            Tv_det.PutInteger 0, EmplKey
            Tv_det.PutInteger 1, FirstMoveKey
            Q_det.OpenQuery
            '
            Do Until Q_det.EOF
              Period = Tv_det.ReadDate(2)
              PeriodRule = Tv_det.ReadAtom(3)
              IsFull = _
                Abs( PeriodRule = "by_days_houres" _
                    Or PeriodRule = "by_houres" _
                    Or PeriodRule = "by_days" )
              IsCheck = Abs( Not (PeriodRule = "none") )
              '
              If AvgWageRule = "by_calc_month" Then
                Select Case PeriodRule
                  Case "by_days_houres"
                    PeriodRule = "табель равен графику по дням и часам"
                  Case "by_days"
                    PeriodRule = "табель покрывает график по дням"
                  Case "by_houres"
                    PeriodRule = "табель покрывает график по часам"
                  Case "by_month_wage_all"
                    PeriodRule = "по размеру заработка (не меньше всех полных)"
                  Case "by_month_wage_any"
                    PeriodRule = "по размеру заработка (не меньше любого полного)"
                  Case "by_month_no_bad_type"
                    PeriodRule = "виды начислений и типы часов в норме"
                  Case Else
                    PeriodRule = ""
                End Select
              ElseIf AvgWageRule = "by_avg_houre" Then
                PeriodRule = "по среднечасовому"
              End If
              '
              Wage = Tv_det.ReadFloat(4)
              ModernCoef = Tv_det.ReadFloat(5)
              ModernWage = Tv_det.ReadFloat(6)
              TabDays = Tv_det.ReadFloat(7)
              NormDays = Tv_det.ReadFloat(8)
              TabHoures = Tv_det.ReadFloat(9)
              NormHoures = Tv_det.ReadFloat(10)
              SalaryOld = Tv_det.ReadFloat(11)
              SalaryNew = Tv_det.ReadFloat(12)
              '
              gdcSalary.Append
              gdcSalary.FieldByName("USR$DATE").AsVariant = Period
              gdcSalary.FieldByName("USR$SALARY").AsVariant = Wage
              gdcSalary.FieldByName("USR$COEFF").AsVariant = ModernCoef
              gdcSalary.FieldByName("USR$MODERNSALARY").AsVariant = ModernWage
              gdcSalary.FieldByName("USR$DOW").AsVariant = TabDays
              gdcSalary.FieldByName("USR$HOW").AsVariant = TabHoures
              gdcSalary.FieldByName("USR$SCHEDULERDOW").AsVariant = NormDays
              gdcSalary.FieldByName("USR$SCHEDULERHOW").AsVariant = NormHoures
              gdcSalary.FieldByName("USR$ISCHECK").AsVariant = IsCheck
              gdcSalary.FieldByName("USR$ISFULL").AsVariant = IsFull
              gdcSalary.FieldByName("USR$DESCRIPTION").AsVariant = PeriodRule
              gdcSalary.FieldByName("USR$OLDSALARY").AsVariant = SalaryOld
              gdcSalary.FieldByName("USR$NEWSALARY").AsVariant = SalaryNew
              gdcSalary.Post
              '
              Q_det.NextSolution
            Loop
            Q_det.Close
            '
            Q_out.NextSolution
          Loop
          Q_out.Close
          '
        
          gdcSalary.First
          '
          Call wg_EnableFieldChange(gdcSalary, "AVGSALARYCALC")
          '
          If AvgWage > 0 Then
            gdcObject.FieldByName("USR$AVGSUMMA").AsCurrency = AvgWage
            gdcObject.Post
          End If
          '
        
          wg_AvgSalaryStrGenerate_pl = True
          
          T2 = Timer
          T = T2 - T1
        '
        End function
        
      DISPLAYSCRIPT: | 
        WG_AVGSALARYSTRGENERATE_PL
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        UFJTVAgAAABDQUxDVFlQRQgAAABDQUxDVFlQRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-05-12T10:23:07+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
          - 
            ADDFUNCTIONKEY: "147016040_119619099 wg_EnableFieldChange"
          - 
            ADDFUNCTIONKEY: "151158419_5956463 pl_GetScriptIDByName"
          - 
            ADDFUNCTIONKEY: "156299481_119200397 wg_AvgSalary_CoefOption"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 156300136_119200397
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_AvgSalaryDetailGenerate_pl"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include pl_GetScriptIDByName
        
        Function wg_AvgSalaryDetailGenerate_pl(ByRef Sender)
        '
          Dim Creator, gdcObject, gdcDetail
          '
          Dim PL, Ret, Pred, Tv, Append
          'struct_vacation_sql
          Dim P_sql, Tv_sql, Q_sql
          Dim DocKey, DateBegin, DateEnd, PredicateName, Arity, SQL
          'struct_vacation_in
          Dim P_in, Tv_in, Q_in
          Dim DateCalc, AvgWage, SliceOption
          'struct_vacation_out
          Dim P_out, Tv_out, Q_out
          Dim AccDate, IncludeDate, Duration, Summa, VcType
        
          wg_AvgSalaryDetailGenerate_pl = False
          Set Creator = New TCreator
        
          Sender.GetComponent("actApply").Execute
        
          Set gdcObject = Sender.gdcObject
          '
          DocKey = gdcObject.FieldByName("DOCUMENTKEY").AsInteger
          DateBegin = gdcObject.FieldByName("USR$DATEBEGIN").AsDateTime
          DateEnd = gdcObject.FieldByName("USR$DATEEND").AsDateTime
          AvgWage = gdcObject.FieldByName("USR$AVGSUMMA").AsCurrency
          SliceOption = 0
          '
          Dim IBSQL
          Set IBSQL = Creator.GetObject(nil, "TIBSQL", "")
          IBSQL.Transaction = gdcBaseManager.ReadTransaction
          IBSQL.SQL.Text = _
              "select " & _
              "  t.USR$DATEBEGIN " & _
              "from " & _
              "  usr$wg_total t " & _
              "where " & _
              "  t.DOCUMENTKEY = :TDK "
          IBSQL.ParamByName("TDK").asInteger = gdcObject.FieldByName("USR$TOTALDOCKEY").AsInteger
          IBSQL.ExecQuery
          DateCalc = IBSQL.FieldByName("USR$DATEBEGIN").AsDateTime
          '
        
          'init
          Set PL = Creator.GetObject(nil, "TgsPLClient", "")
          Ret = PL.Initialise("")
          If Not Ret Then
            Exit Function
          End If
          'debug
          PL.Debug = True
          'load
          Ret = PL.LoadScript(pl_GetScriptIDByName("twg_avg_wage"))
          If Not Ret Then
            Exit Function
          End If
        
          Set gdcDetail = Sender.gdcDetailObject
          '
          gdcDetail.First
          While Not gdcDetail.EOF
            gdcDetail.Delete
          Wend
          '
          Sender.Repaint
        
          'struct_vacation_sql(DocKey, DateBegin, DateEnd, PredicateName, Arity, SQL)
          P_sql = "struct_vacation_sql"
          Set Tv_sql = Creator.GetObject(6, "TgsPLTermv", "")
          Set Q_sql = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_sql.PredicateName = P_sql
          Q_sql.Termv = Tv_sql
          '
          Append = False
          '
          Tv_sql.PutInteger 0, DocKey
          Tv_sql.PutDate 1, DateBegin
          Tv_sql.PutDate 2, DateEnd
          '
          Q_sql.OpenQuery
          If Q_sql.EOF Then
            Exit Function
          End If
          '
          Do Until Q_sql.EOF
            PredicateName = Tv_sql.ReadAtom(3)
            Arity = Tv_sql.ReadInteger(4)
            SQL = Tv_sql.ReadString(5)
            '
            Ret =  PL.MakePredicatesOfSQLSelect _
                      (SQL, _
                      gdcBaseManager.ReadTransaction, _
                      PredicateName, PredicateName, Append)
            '
            Q_sql.NextSolution
          Loop
          Q_sql.Close
          '
        
          'struct_vacation_in(DateCalc, DateBegin, DateEnd, AvgWage, SliceOption)
          P_in = "struct_vacation_in"
          Set Tv_in = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_in = Creator.GetObject(nil, "TgsPLQuery", "")
          Tv_in.PutDate 0, DateCalc
          Tv_in.PutDate 1, DateBegin
          Tv_in.PutDate 2, DateEnd
          Tv_in.PutFloat 3, AvgWage
          Tv_in.PutInteger 4, SliceOption
          '
          Q_in.PredicateName = P_in
          Q_in.Termv = Tv_in
          '
          Q_in.OpenQuery
          If Q_in.EOF Then
            Exit Function
          End If
          Q_in.Close
        
          'struct_vacation_out(AccDate, IncludeDate, Duration, Summa, DateBegin, DateEnd, VcType)
          P_out = "struct_vacation_out"
          Set Tv_out = Creator.GetObject(7, "TgsPLTermv", "")
          Set Q_out = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_out.PredicateName = P_out
          Q_out.Termv = Tv_out
          Q_out.OpenQuery
          If Q_out.EOF Then
            Exit Function
          End If
          '
          Do Until Q_out.EOF
            '
            AccDate = Tv_out.ReadDate(0)
            IncludeDate = Tv_out.ReadDate(1)
            Duration = Tv_out.ReadFloat(2)
            Summa = Tv_out.ReadFloat(3)
            DateBegin = Tv_out.ReadDate(4)
            DateEnd = Tv_out.ReadDate(5)
            VcType = Tv_out.ReadInteger(6)
            '
            gdcDetail.Append
            gdcDetail.FieldByName("USR$ACCDATE").AsVariant = AccDate
            gdcDetail.FieldByName("USR$INCLUDEDATE").AsVariant = IncludeDate
            gdcDetail.FieldByName("USR$DURATION").AsVariant = Duration
            gdcDetail.FieldByName("USR$SUMMA").AsVariant = Summa
            gdcDetail.FieldByName("USR$DATEBEGIN").AsVariant = DateBegin
            gdcDetail.FieldByName("USR$DATEEND").AsVariant = DateEnd
            'gdcDetail.FieldByName("USR$VCTYPE").AsVariant = VcType
            gdcDetail.Post
            '
            Q_out.NextSolution
          Loop
          Q_out.Close
          '
          gdcDetail.First
        
          wg_AvgSalaryDetailGenerate_pl = True
        '
        End function
        
      DISPLAYSCRIPT: | 
        WG_AVGSALARYDETAILGENERATE_PL
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-05-30T17:51:45+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "151158419_5956463 pl_GetScriptIDByName"
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 147123484_1439110857
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PARENT: "147240236_1234867257 GLOBAL\\DFM\\Tgdc_dlgUserComplexDocument"
      NAME: "147020774_119619099"
      DATA_TYPE: "B"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: | 
        object gdc_dlgUserComplexDocument147020774_119619099: Tgdc_dlgUserComplexDocument
          Left = -8
          Top = -8
          Width = 1382
          Height = 744
          ActiveControl = usrg_PageControl1
          PixelsPerInch = 96
          TextHeight = 13
          object btnAccess: TButton
            Top = 682
            TabOrder = 3
          end
          object btnNew: TButton
            Top = 682
            TabOrder = 4
          end
          object btnHelp: TButton
            Top = 682
            TabOrder = 5
          end
          object btnOK: TButton
            Left = 1188
            Top = 682
            Anchors = [akRight, akBottom]
            TabOrder = 1
          end
          object btnCancel: TButton
            Left = 1280
            Top = 682
            Anchors = [akRight, akBottom]
            TabOrder = 2
          end
          object pnlMain: TPanel
            Width = 1366
            Height = 679
            TabOrder = 0
            object splMain: TSplitter
              Width = 1366
            end
            object usrg_Splitter1: TSplitter
              Tag = 0
              Left = 575
              Top = 277
              Width = 6
              Height = 402
              Cursor = crHSplit
              Hint = ''
              Align = alLeft
              AutoSnap = True
              Beveled = False
              Constraints.MaxHeight = 0
              Constraints.MaxWidth = 0
              Constraints.MinHeight = 0
              Constraints.MinWidth = 0
              MinSize = 30
              ParentColor = True
              ResizeStyle = rsPattern
              Visible = True
            end
            object pnlDetail: TPanel
              Left = 0
              Top = 277
              Width = 575
              Height = 402
              Align = alLeft
              Alignment = taLeftJustify
              Anchors = [akLeft, akTop, akBottom]
              AutoSize = False
              TabOrder = 2
              object ibgrDetail: TgsIBGrid
                Left = 0
                Width = 575
                Height = 376
                Align = alClient
                Anchors = [akLeft, akTop, akRight, akBottom]
                ReadOnly = True
                Expands = <>
                Conditions = <>
                ScaleColumns = False
                MinColWidth = 12
                ColumnEditors = <>
                Aliases = <>
                Columns = <
                  item
                    Expanded = False
                    FieldName = 'USR$ACCDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата начисления'
                    Width = 108
                    Visible = True
                  end
                  item
                    Expanded = False
                    FieldName = 'USR$INCLUDEDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата зачисления'
                    Width = 108
                    Visible = True
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'USR$DURATION'
                    ReadOnly = False
                    Title.Caption = 'Дни'
                    Width = 36
                    Visible = True
                    TotalType = ttSum
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'USR$SUMMA'
                    ReadOnly = False
                    Title.Caption = 'Сумма'
                    Width = 72
                    Visible = True
                    DisplayFormat = '#.##'
                    TotalType = ttSum
                  end
                  item
                    Expanded = False
                    FieldName = 'USR$DATEBEGIN'
                    ReadOnly = False
                    Title.Caption = 'Дата начала'
                    Width = 108
                    Visible = True
                  end
                  item
                    Expanded = False
                    FieldName = 'USR$DATEEND'
                    ReadOnly = False
                    Title.Caption = 'Дата окончания'
                    Width = 108
                    Visible = True
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'SUMNCU'
                    ReadOnly = False
                    Title.Caption = 'sumncu'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DOCUMENTDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DESCRIPTION'
                    ReadOnly = False
                    Title.Caption = 'Описание'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'USR$SORTNUMBER'
                    ReadOnly = False
                    Title.Caption = 'Номер для сортировки'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'ID'
                    ReadOnly = False
                    Title.Caption = 'Ключ'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'PARENT'
                    ReadOnly = False
                    Title.Caption = 'Родитель'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DOCUMENTTYPEKEY'
                    ReadOnly = False
                    Title.Caption = 'Тип документа'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'TRTYPEKEY'
                    ReadOnly = False
                    Title.Caption = 'Тип транзакции'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'TRANSACTIONKEY'
                    ReadOnly = False
                    Title.Caption = 'Транзакция'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'NUMBER'
                    ReadOnly = False
                    Title.Caption = 'Номер'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'SUMCURR'
                    ReadOnly = False
                    Title.Caption = 'Сумма в валюте'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DELAYED'
                    ReadOnly = False
                    Title.Caption = 'Отложенный'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'CURRKEY'
                    ReadOnly = False
                    Title.Caption = 'Валюта'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'COMPANYKEY'
                    ReadOnly = False
                    Title.Caption = 'Компания'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'CREATORKEY'
                    ReadOnly = False
                    Title.Caption = 'Кто создал'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'CREATIONDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата создания'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'EDITORKEY'
                    ReadOnly = False
                    Title.Caption = 'Кто исправил'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'EDITIONDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата изменения'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'PRINTDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата печати'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DISABLED'
                    ReadOnly = False
                    Title.Caption = 'Отключено'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'RESERVED'
                    ReadOnly = False
                    Title.Caption = 'Зарезервировано'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DOCUMENTKEY'
                    Title.Caption = 'Ключ документа'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'MASTERKEY'
                    Title.Caption = 'Родитель (Начисление отпусков(позиция))'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'RESERVED1'
                    Title.Caption = 'Зарезервировано (Начисление отпусков(позиция))'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'SUMEQ'
                    ReadOnly = False
                    Title.Caption = 'Сумма в эквиваленте'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'USR$EQRATE'
                    ReadOnly = False
                    Title.Caption = 'Курс экв.'
                    Width = -1
                    Visible = False
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'AFULL'
                    ReadOnly = False
                    Title.Caption = 'Полный доступ'
                    Width = -1
                    Visible = False
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'ACHAG'
                    ReadOnly = False
                    Title.Caption = 'Просмотр и редактирование'
                    Width = -1
                    Visible = False
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'AVIEW'
                    ReadOnly = False
                    Title.Caption = 'Только просмотр'
                    Width = -1
                    Visible = False
                  end>
              end
              object tbdTop: TTBDock
                Width = 575
                object tbDetail: TTBToolbar
                  Align = alClient
                  Anchors = [akLeft, akTop, akRight, akBottom]
                  DockPos = 0
                  SavedAtRunTime = True
                  object tbNew: TTBItem
                  end
                  object tbEdit: TTBItem
                  end
                  object tbDelete: TTBItem
                  end
                  object tbDuplicate: TTBItem
                  end
                  object tbiDetailProperties: TTBItem
                  end
                  object TBSeparatorItem1: TTBSeparatorItem
                  end
                  object tbCopy: TTBItem
                  end
                  object tbCut: TTBItem
                  end
                  object tbPaste: TTBItem
                  end
                  object TBSeparatorItem2: TTBSeparatorItem
                  end
                  object tbMacro: TTBItem
                  end
                  object usrg_TBSeparatorItem1: TTBSeparatorItem
                    Tag = 0
                    Blank = False
                    Hint = ''
                    Visible = True
                  end
                  object usrg_TBItem6: TTBItem
                    Tag = 0
                    Action = usrg_actGenerate
                    AutoCheck = False
                    DisplayMode = nbdmDefault
                    GroupIndex = 0
                    Images = nil
                    InheritOptions = True
                    MaskOptions = []
                    Options = []
                    RadioItem = False
                  end
                  object usrg_TBItem1: TTBItem
                    Tag = 0
                    Action = usrg_actGenStr
                    AutoCheck = False
                    DisplayMode = nbdmDefault
                    GroupIndex = 0
                    Images = nil
                    InheritOptions = True
                    MaskOptions = []
                    Options = []
                    RadioItem = False
                  end
                  object usrg_tbFeesByEmpl: TTBItem
                    Tag = 0
                    Action = nil
                    AutoCheck = False
                    Caption = 'Итоговое'
                    Checked = False
                    DisplayMode = nbdmDefault
                    Enabled = True
                    GroupIndex = 0
                    HelpContext = 0
                    Hint = ''
                    ImageIndex = -1
                    Images = nil
                    InheritOptions = True
                    MaskOptions = []
                    Options = []
                    RadioItem = False
                    ShortCut = 0
                    Visible = True
                  end
                end
              end
              object tbdLeft: TTBDock
                Left = 0
                Width = 0
                Height = 376
              end
              object tbdRight: TTBDock
                Left = 575
                Width = 0
                Height = 376
              end
              object tbdBottom: TTBDock
                Top = 402
                Width = 575
                Height = 0
              end
            end
            object pnlMaster: TPanel
              Width = 1366
              TabOrder = 0
              object pnlHolding: TPanel
                Width = 1366
                TabOrder = 1
                object lblCompany: TLabel
                  Width = 64
                  Caption = 'Органзация:'
                end
                object iblkCompany: TgsIBLookupComboBox
                end
              end
              object usrg_PageControl1: TPageControl
                Tag = 0
                Left = 0
                Top = 0
                Width = 1366
                Height = 273
                Cursor = crDefault
                Hint = ''
                HelpContext = 0
                ActivePage = usrg_TabSheet1
                Align = alClient
                Anchors = [akLeft, akTop, akRight, akBottom]
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DockSite = False
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HotTrack = False
                Images = nil
                MultiLine = False
                OwnerDraw = False
                ParentBiDiMode = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                RaggedRight = False
                ScrollOpposite = False
                Style = tsTabs
                TabHeight = 0
                TabOrder = 0
                TabPosition = tpTop
                TabStop = True
                TabWidth = 0
                Visible = True
                object usrg_TabSheet1: TTabSheet
                  Tag = 0
                  Cursor = crDefault
                  Hint = ''
                  HelpContext = 0
                  BorderWidth = 0
                  Caption = 'Основные'
                  DragMode = dmManual
                  Enabled = True
                  Highlighted = False
                  ImageIndex = 0
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  TabVisible = True
                  object usrg_GroupBox1: TGroupBox
                    Tag = 0
                    Left = 0
                    Top = 121
                    Width = 1358
                    Height = 124
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    Align = alClient
                    Anchors = [akLeft, akTop, akRight, akBottom]
                    Caption = ' Средний заработок '
                    Constraints.MaxHeight = 0
                    Constraints.MaxWidth = 0
                    Constraints.MinHeight = 0
                    Constraints.MinWidth = 0
                    DockSite = False
                    DragCursor = crDrag
                    DragKind = dkDrag
                    DragMode = dmManual
                    Enabled = True
                    ParentBiDiMode = True
                    ParentColor = True
                    ParentCtl3D = True
                    ParentFont = True
                    ParentShowHint = True
                    PopupMenu = nil
                    TabOrder = 0
                    TabStop = False
                    Visible = True
                    object usrat_DBEdit_USR_AVGPERIOD_Label: TLabel
                      Left = 13
                      Top = 44
                    end
                    object usrat_gsIBLookupComboBox_USR_FEEGROUPKEY_Label: TLabel
                      Left = 13
                      Top = 20
                    end
                    object usrat_DBEdit_USR_AVGSUMMA_Label: TLabel
                      Left = 14
                      Top = 69
                    end
                    object usrg_chboxCoefInflation: TCheckBox
                      Tag = 0
                      Left = 669
                      Top = 51
                      Width = 225
                      Height = 17
                      Cursor = crDefault
                      Hint = ''
                      HelpContext = 0
                      TabStop = True
                      Action = nil
                      Alignment = taRightJustify
                      AllowGrayed = False
                      Anchors = [akLeft, akTop]
                      Caption = 'Коэ-т инфляции от ставки 1 разряда'
                      Checked = True
                      Constraints.MaxHeight = 0
                      Constraints.MaxWidth = 0
                      Constraints.MinHeight = 0
                      Constraints.MinWidth = 0
                      DragCursor = crDrag
                      DragKind = dkDrag
                      DragMode = dmManual
                      Enabled = True
                      ParentBiDiMode = True
                      ParentColor = True
                      ParentCtl3D = True
                      ParentFont = True
                      ParentShowHint = True
                      PopupMenu = nil
                      State = cbChecked
                      TabOrder = 4
                      Visible = False
                    end
                    object usrg_GroupBox2: TGroupBox
                      Tag = 0
                      Left = 341
                      Top = 10
                      Width = 225
                      Height = 101
                      Cursor = crDefault
                      Hint = ''
                      HelpContext = 0
                      Align = alNone
                      Anchors = [akLeft, akTop]
                      Caption = 'Осовременивание'
                      Constraints.MaxHeight = 0
                      Constraints.MaxWidth = 0
                      Constraints.MinHeight = 0
                      Constraints.MinWidth = 0
                      DockSite = False
                      DragCursor = crDrag
                      DragKind = dkDrag
                      DragMode = dmManual
                      Enabled = False
                      ParentBiDiMode = True
                      ParentColor = True
                      ParentCtl3D = True
                      ParentFont = True
                      ParentShowHint = True
                      PopupMenu = nil
                      TabOrder = 5
                      TabStop = False
                      Visible = True
                      object usrg_rbSalaryInf: TRadioButton
                        Tag = 0
                        Left = 12
                        Top = 17
                        Width = 169
                        Height = 17
                        Cursor = crDefault
                        Hint = ''
                        HelpContext = 0
                        Action = nil
                        Alignment = taRightJustify
                        Anchors = [akLeft, akTop]
                        Caption = 'От оклада'
                        Checked = False
                        Constraints.MaxHeight = 0
                        Constraints.MaxWidth = 0
                        Constraints.MinHeight = 0
                        Constraints.MinWidth = 0
                        DragCursor = crDrag
                        DragKind = dkDrag
                        DragMode = dmManual
                        Enabled = True
                        ParentBiDiMode = True
                        ParentColor = True
                        ParentCtl3D = True
                        ParentFont = True
                        ParentShowHint = True
                        PopupMenu = nil
                        TabOrder = 0
                        TabStop = False
                        Visible = True
                      end
                      object usrg_rbRateInf: TRadioButton
                        Tag = 0
                        Left = 12
                        Top = 36
                        Width = 169
                        Height = 17
                        Cursor = crDefault
                        Hint = ''
                        HelpContext = 0
                        Action = nil
                        Alignment = taRightJustify
                        Anchors = [akLeft, akTop]
                        Caption = 'От ставки 1-го разряда'
                        Checked = True
                        Constraints.MaxHeight = 0
                        Constraints.MaxWidth = 0
                        Constraints.MinHeight = 0
                        Constraints.MinWidth = 0
                        DragCursor = crDrag
                        DragKind = dkDrag
                        DragMode = dmManual
                        Enabled = True
                        ParentBiDiMode = True
                        ParentColor = True
                        ParentCtl3D = True
                        ParentFont = True
                        ParentShowHint = True
                        PopupMenu = nil
                        TabOrder = 1
                        TabStop = True
                        Visible = True
                      end
                    end
                    object usrg_rbPersCoeffInf: TRadioButton
                      Tag = 0
                      Left = 796
                      Top = 23
                      Width = 241
                      Height = 17
                      Cursor = crDefault
                      Hint = ''
                      HelpContext = 0
                      Action = nil
                      Alignment = taRightJustify
                      Anchors = [akLeft, akTop]
                      Caption = 'От персонального коэффициента'
                      Checked = True
                      Constraints.MaxHeight = 0
                      Constraints.MaxWidth = 0
                      Constraints.MinHeight = 0
                      Constraints.MinWidth = 0
                      DragCursor = crDrag
                      DragKind = dkDrag
                      DragMode = dmManual
                      Enabled = True
                      ParentBiDiMode = True
                      ParentColor = True
                      ParentCtl3D = True
                      ParentFont = True
                      ParentShowHint = True
                      PopupMenu = nil
                      TabOrder = 7
                      TabStop = True
                      Visible = False
                    end
                    object usrg_Panel2: TPanel
                      Tag = 0
                      Left = 377
                      Top = 59
                      Width = 177
                      Height = 49
                      Cursor = crDefault
                      Hint = ''
                      HelpContext = 0
                      Align = alNone
                      Alignment = taCenter
                      Anchors = [akLeft, akTop]
                      AutoSize = False
                      BevelInner = bvNone
                      BevelOuter = bvNone
                      BevelWidth = 1
                      BorderWidth = 0
                      BorderStyle = bsNone
                      Caption = ''
                      Color = clBtnFace
                      Constraints.MaxHeight = 0
                      Constraints.MaxWidth = 0
                      Constraints.MinHeight = 0
                      Constraints.MinWidth = 0
                      Ctl3D = False
                      UseDockManager = True
                      DockSite = False
                      DragCursor = crDrag
                      DragKind = dkDrag
                      DragMode = dmManual
                      Enabled = False
                      FullRepaint = True
                      Locked = False
                      ParentBiDiMode = True
                      ParentColor = False
                      ParentCtl3D = False
                      ParentFont = True
                      ParentShowHint = True
                      PopupMenu = nil
                      TabOrder = 6
                      TabStop = False
                      Visible = True
                      object usrg_rbFCRate: TRadioButton
                        Tag = 0
                        Left = 6
                        Top = 9
                        Width = 113
                        Height = 17
                        Cursor = crDefault
                        Hint = ''
                        HelpContext = 0
                        Action = nil
                        Alignment = taRightJustify
                        Anchors = [akLeft, akTop]
                        Caption = 'справочника'
                        Checked = False
                        Constraints.MaxHeight = 0
                        Constraints.MaxWidth = 0
                        Constraints.MinHeight = 0
                        Constraints.MinWidth = 0
                        DragCursor = crDrag
                        DragKind = dkDrag
                        DragMode = dmManual
                        Enabled = True
                        ParentBiDiMode = True
                        ParentColor = True
                        ParentCtl3D = True
                        ParentFont = True
                        ParentShowHint = True
                        PopupMenu = nil
                        TabOrder = 0
                        TabStop = False
                        Visible = True
                      end
                      object usrg_rbMovementRate: TRadioButton
                        Tag = 0
                        Left = 6
                        Top = 27
                        Width = 161
                        Height = 17
                        Cursor = crDefault
                        Hint = ''
                        HelpContext = 0
                        Action = nil
                        Alignment = taRightJustify
                        Anchors = [akLeft, akTop]
                        Caption = 'кадрового движения'
                        Checked = True
                        Constraints.MaxHeight = 0
                        Constraints.MaxWidth = 0
                        Constraints.MinHeight = 0
                        Constraints.MinWidth = 0
                        DragCursor = crDrag
                        DragKind = dkDrag
                        DragMode = dmManual
                        Enabled = True
                        ParentBiDiMode = True
                        ParentColor = True
                        ParentCtl3D = True
                        ParentFont = True
                        ParentShowHint = True
                        PopupMenu = nil
                        TabOrder = 1
                        TabStop = True
                        Visible = True
                      end
                    end
                    object usrat_DBEdit_USR_AVGPERIOD: TxDBCalculatorEdit
                      Left = 243
                      Top = 40
                      Width = 76
                      Cursor = crIBeam
                      TabOrder = 1
                    end
                    object usrat_gsIBLookupComboBox_USR_FEEGROUPKEY: TgsIBLookupComboBox
                      Left = 139
                      Top = 16
                      Width = 180
                      ListTable = 
                        'USR$WG_FEEGROUP fg LEFT JOIN USR$WG_FEEGROUP fg1 ON fg.lb > fg1.' +
                        'lb AND fg.rb < fg1.rb'
                      Condition = 'fg1.id = <RUID XID = 147274328 DBID = 274788016/>'
                      TabOrder = 0
                    end
                    object usrat_DBCheckBox_USR_MODERNSALARY: TDBCheckBox
                      Left = 677
                      Top = 19
                      Width = 106
                      Caption = 'Осовременивать'
                      TabOrder = 2
                      Visible = False
                    end
                    object usrat_DBEdit_USR_AVGSUMMA: TxDBCalculatorEdit
                      Left = 179
                      Top = 65
                      Cursor = crIBeam
                      ReadOnly = True
                      TabOrder = 3
                    end
                  end
                  object usrg_Panel1: TPanel
                    Tag = 0
                    Left = 0
                    Top = 0
                    Width = 1358
                    Height = 121
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    Align = alTop
                    Alignment = taCenter
                    Anchors = [akLeft, akTop, akRight]
                    AutoSize = False
                    BevelInner = bvRaised
                    BevelOuter = bvLowered
                    BevelWidth = 1
                    BorderWidth = 0
                    BorderStyle = bsNone
                    Caption = ''
                    Color = clBtnFace
                    Constraints.MaxHeight = 0
                    Constraints.MaxWidth = 0
                    Constraints.MinHeight = 0
                    Constraints.MinWidth = 0
                    UseDockManager = True
                    DockSite = False
                    DragCursor = crDrag
                    DragKind = dkDrag
                    DragMode = dmManual
                    Enabled = True
                    FullRepaint = True
                    Locked = False
                    ParentBiDiMode = True
                    ParentColor = False
                    ParentCtl3D = True
                    ParentFont = True
                    ParentShowHint = True
                    PopupMenu = nil
                    TabOrder = 1
                    TabStop = False
                    Visible = True
                    object usrat_gsIBLookupComboBox_USR_TOTALDOCKEY_Label: TLabel
                      Top = 12
                    end
                    object usrat_gsIBLookupComboBox_USR_EMPLKEY_Label: TLabel
                      Top = 37
                    end
                    object usrat_gsIBLookupComboBox_USR_VACATIONTYPE_Label: TLabel
                      Top = 62
                    end
                    object usrat_gsIBLookupComboBox_USR_FIRSTMOVEKEY_Label: TLabel
                      Left = 5
                      Top = 87
                      Width = 76
                      Caption = 'По должности:'
                    end
                    object usrat_xDateDBEdit_USR_DATEEND_Label: TLabel
                      Left = 317
                      Top = 62
                    end
                    object usrat_xDateDBEdit_USR_DATEBEGIN_Label: TLabel
                      Left = 317
                      Top = 37
                    end
                    object usrat_xDateDBEdit_USR_FROM_Label: TLabel
                      Left = 317
                      Top = 11
                    end
                    object usrat_DBEdit_USR_DURATION_Label: TLabel
                      Left = 501
                      Top = 12
                    end
                    object usrat_DBEdit_USR_EXTRADURATION_Label: TLabel
                      Left = 501
                      Top = 36
                    end
                    object usrat_gsIBLookupComboBox_USR_TOTALDOCKEY: TgsIBLookupComboBox
                      Left = 100
                      Top = 8
                      Width = 180
                      ListTable = 
                        'usr$wg_total t LEFT JOIN GD_DOCUMENT doc ON doc.id = t.documentk' +
                        'ey'
                      ListField = 'usr$name'
                      KeyField = 'documentkey'
                      SortOrder = soAsc
                      Condition = 'parent is null and doc.companykey = <companykey/>'
                      gdClassName = 'TgdcUserDocument'
                      SubType = '147567052_119619099'
                      DropDownCount = 8
                      ParentShowHint = False
                      ShowHint = True
                      TabOrder = 0
                    end
                    object usrat_gsIBLookupComboBox_USR_EMPLKEY: TgsIBLookupComboBox
                      Left = 100
                      Top = 33
                      Width = 180
                      SortOrder = soAsc
                      Condition = 
                        'ID in (SELECT usr$emplkey FROM usr$wg_emplworkterm term LEFT JOI' +
                        'N GD_DOCUMENT doc ON doc.id = term.usr$firstmovekey WHERE usr$da' +
                        'tebegin <= :dateend AND (usr$dateend >= :datebegin or usr$dateen' +
                        'd is NULL) AND doc.companykey = <COMPANYKEY/>)'
                      SubType = ''
                      TabOrder = 1
                    end
                    object usrat_gsIBLookupComboBox_USR_VACATIONTYPE: TgsIBLookupComboBox
                      Left = 100
                      Top = 58
                      Width = 180
                      Condition = 'USR$TYPE <> 3'
                      TabOrder = 2
                    end
                    object usrat_gsIBLookupComboBox_USR_FIRSTMOVEKEY: TgsIBLookupComboBox
                      Left = 100
                      Top = 83
                      Width = 180
                      Fields = 'l.POSNAME, l.DEPTNAME, l.KINDOFWORKNAME'
                      ListTable = 'USR$WG_P_FMKLOOKUPSETTINGS (:emplkey, :dateend)  l'
                      ListField = 'l.POSID'
                      KeyField = 'l.FMK'
                      Condition = ''
                      gdClassName = ''
                      ParentShowHint = False
                      ShowHint = True
                      TabOrder = 3
                    end
                    object usrat_DBCheckBox_USR_COMPENSATION: TDBCheckBox
                      Left = 317
                      Top = 87
                      TabOrder = 4
                    end
                    object usrat_xDateDBEdit_USR_FROM: TxDateDBEdit
                      Left = 411
                      Top = 8
                      Width = 68
                      TabOrder = 5
                    end
                    object usrat_xDateDBEdit_USR_DATEBEGIN: TxDateDBEdit
                      Left = 411
                      Top = 33
                      Width = 68
                      TabOrder = 6
                    end
                    object usrat_xDateDBEdit_USR_DATEEND: TxDateDBEdit
                      Left = 411
                      Top = 58
                      Width = 68
                      TabOrder = 7
                    end
                    object usrat_DBEdit_USR_DURATION: TxDBCalculatorEdit
                      Left = 656
                      Top = 8
                      Width = 60
                      Cursor = crIBeam
                      TabOrder = 8
                    end
                    object usrat_DBEdit_USR_EXTRADURATION: TxDBCalculatorEdit
                      Left = 656
                      Top = 33
                      Width = 60
                      Cursor = crArrow
                      TabOrder = 9
                    end
                  end
                end
                object usrg_TabSheet2: TTabSheet
                  Tag = 0
                  Cursor = crDefault
                  Hint = ''
                  HelpContext = 0
                  BorderWidth = 0
                  Caption = 'Атрибуты'
                  DragMode = dmManual
                  Enabled = True
                  Highlighted = False
                  ImageIndex = 0
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  TabVisible = True
                  object atContainer: TatContainer
                    Top = 0
                    Width = 1358
                    Height = 245
                    VertScrollBar.Position = 187
                    TabOrder = 0
                    object usrat_DBEdit_NUMBER_Label: TLabel
                      Left = 5
                      Top = -156
                      Visible = False
                    end
                    object usrat_xDateDBEdit_DOCUMENTDATE_Label: TLabel
                      Top = -179
                      Visible = False
                    end
                    object usrat_DBEdit_USR_SORTNUMBER_Label: TLabel
                      Left = 5
                      Top = -134
                      Visible = False
                    end
                    object usrat_DBEdit_USR_EQRATE_Label: TLabel
                      Top = 228
                    end
                    object usrat_DBEdit_NUMBER: TDBEdit
                      Left = 131
                      Top = -159
                      Width = 100
                      TabOrder = 2
                      Visible = False
                    end
                    object usrat_xDateDBEdit_DOCUMENTDATE: TxDateDBEdit
                      Left = 131
                      Top = -182
                      Width = 100
                      TabOrder = 1
                      Visible = False
                    end
                    object usrat_DBEdit_USR_SORTNUMBER: TxDBCalculatorEdit
                      Left = 131
                      Top = -136
                      Width = 100
                      Cursor = crIBeam
                      TabOrder = 0
                      Visible = False
                    end
                    object usrat_DBEdit_USR_EQRATE: TxDBCalculatorEdit
                      Top = 224
                      Cursor = crIBeam
                      TabOrder = 3
                    end
                  end
                end
              end
            end
            object usrg_pAvgSalary: TPanel
              Tag = 0
              Left = 581
              Top = 277
              Width = 785
              Height = 402
              Cursor = crDefault
              Hint = ''
              HelpContext = 0
              Align = alClient
              Alignment = taCenter
              Anchors = [akLeft, akTop, akRight, akBottom]
              AutoSize = False
              BevelInner = bvNone
              BevelOuter = bvNone
              BevelWidth = 1
              BorderWidth = 0
              BorderStyle = bsNone
              Caption = ''
              Color = clBtnFace
              Constraints.MaxHeight = 0
              Constraints.MaxWidth = 0
              Constraints.MinHeight = 0
              Constraints.MinWidth = 0
              UseDockManager = True
              DockSite = False
              DragCursor = crDrag
              DragKind = dkDrag
              DragMode = dmManual
              Enabled = True
              FullRepaint = True
              Locked = False
              ParentBiDiMode = True
              ParentColor = False
              ParentCtl3D = True
              ParentFont = True
              ParentShowHint = True
              PopupMenu = nil
              TabOrder = 1
              TabStop = False
              Visible = True
              object usrg_PageControl2: TPageControl
                Tag = 0
                Left = 0
                Top = 0
                Width = 785
                Height = 402
                Cursor = crDefault
                Hint = ''
                HelpContext = 0
                ActivePage = usrg_TabSheet3
                Align = alClient
                Anchors = [akLeft, akTop, akRight, akBottom]
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DockSite = False
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HotTrack = False
                Images = nil
                MultiLine = False
                OwnerDraw = False
                ParentBiDiMode = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                RaggedRight = False
                ScrollOpposite = False
                Style = tsTabs
                TabHeight = 0
                TabOrder = 0
                TabPosition = tpTop
                TabStop = True
                TabWidth = 0
                Visible = True
                object usrg_TabSheet3: TTabSheet
                  Tag = 0
                  Cursor = crDefault
                  Hint = ''
                  HelpContext = 0
                  BorderWidth = 0
                  Caption = 'Расчет структуры ср. заработка'
                  DragMode = dmManual
                  Enabled = True
                  Highlighted = False
                  ImageIndex = 0
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  TabVisible = True
                  object usrg_grAvgSalaryStr: TgsIBGrid
                    Tag = 0
                    Left = 0
                    Top = 26
                    Width = 777
                    Height = 348
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    TabStop = True
                    Align = alClient
                    Anchors = [akLeft, akTop, akRight, akBottom]
                    BorderStyle = bsNone
                    Constraints.MaxHeight = 0
                    Constraints.MaxWidth = 0
                    Constraints.MinHeight = 0
                    Constraints.MinWidth = 0
                    DataSource = usrg_dsAvgSalaryStr
                    DefaultDrawing = True
                    DragCursor = crDrag
                    DragKind = dkDrag
                    DragMode = dmManual
                    Enabled = True
                    ImeMode = imDontCare
                    ImeName = ''
                    Options = [dgEditing, dgTitles, dgIndicator, dgColumnResize, dgColLines, dgRowLines, dgTabs, dgConfirmDelete, dgCancelOnExit]
                    ParentBiDiMode = True
                    ParentColor = False
                    ParentCtl3D = True
                    ParentFont = True
                    ParentShowHint = True
                    PopupMenu = nil
                    ReadOnly = True
                    TabOrder = 0
                    Visible = True
                    TableColor = clWindow
                    SelectedColor = clHighlight
                    TitleColor = clBtnFace
                    RefreshType = rtCloseOpen
                    Striped = True
                    StripeOdd = 15201271
                    StripeEven = 14084071
                    InternalMenuKind = imkWithSeparator
                    Expands = <
                      item
                        DisplayField = 'USR$DOW'
                        FieldName = 'USR$HOW'
                        LineCount = 1
                        Options = [ceoAddField]
                      end
                      item
                        DisplayField = 'USR$SCHEDULERDOW'
                        FieldName = 'USR$SCHEDULERHOW'
                        LineCount = 1
                        Options = [ceoAddField]
                      end
                      item
                        DisplayField = 'USR$NEWSALARY'
                        FieldName = 'USR$OLDSALARY'
                        LineCount = 1
                        Options = [ceoAddField]
                      end
                      item
                        DisplayField = 'USR$SALARY'
                        FieldName = 'USR$MODERNSALARY'
                        LineCount = 1
                        Options = [ceoAddField]
                      end>
                    ExpandsActive = False
                    ExpandsSeparate = False
                    TitlesExpanding = False
                    Conditions = <>
                    ConditionsActive = False
                    CheckBox.DisplayField = ''
                    CheckBox.FieldName = ''
                    CheckBox.Visible = True
                    CheckBox.CheckList.Strings = (
                      '')
                    CheckBox.FirstColumn = False
                    ScaleColumns = False
                    MinColWidth = 40
                    ToolBar = nil
                    FinishDrawing = True
                    RememberPosition = True
                    SaveSettings = True
                    ColumnEditors = <
                      item
                        Lookup.Distinct = False
                        EditorStyle = cesValueList
                        FieldName = 'USR$ISCHECK'
                        DisplayField = 'USR$ISCHECK'
                        ValueList.Strings = (
                          'Нет=0'
                          'Да=1')
                        DropDownCount = 3
                      end
                      item
                        Lookup.Distinct = False
                        EditorStyle = cesValueList
                        FieldName = 'USR$ISFULL'
                        DisplayField = 'USR$ISFULL'
                        ValueList.Strings = (
                          'Да=1'
                          'Нет=0')
                        DropDownCount = 3
                      end>
                    Aliases = <>
                    ShowFooter = False
                    ShowTotals = True
                    Columns = <
                      item
                        Expanded = False
                        FieldName = 'USR$ISFULL'
                        ReadOnly = False
                        Title.Caption = 'Полный месяц'
                        Width = 48
                        Visible = True
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$ISCHECK'
                        ReadOnly = False
                        Title.Caption = 'Вкл.'
                        Width = 48
                        Visible = True
                        TotalType = ttSum
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$DATE'
                        ReadOnly = False
                        Title.Caption = 'Дата'
                        Width = 72
                        Visible = True
                      end
                      item
                        Alignment = taRightJustify
                        Expanded = False
                        FieldName = 'USR$SALARY'
                        ReadOnly = False
                        Title.Caption = 'Зарплата'
                        Width = 72
                        Visible = True
                        DisplayFormat = '#.##'
                      end
                      item
                        Alignment = taRightJustify
                        Expanded = False
                        FieldName = 'USR$COEFF'
                        ReadOnly = False
                        Title.Caption = 'Коэф-т'
                        Width = 52
                        Visible = True
                      end
                      item
                        Alignment = taRightJustify
                        Expanded = False
                        FieldName = 'USR$MODERNSALARY'
                        ReadOnly = False
                        Title.Caption = 'Современная зарплата'
                        Width = 84
                        Visible = True
                        DisplayFormat = '#.##'
                        TotalType = ttSum
                      end
                      item
                        Alignment = taRightJustify
                        Expanded = False
                        FieldName = 'USR$DOW'
                        ReadOnly = False
                        Title.Caption = 'Дни'
                        Width = 36
                        Visible = True
                        TotalType = ttSum
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$SCHEDULERDOW'
                        ReadOnly = False
                        Title.Caption = 'Дней по гр.'
                        Width = 72
                        Visible = True
                      end
                      item
                        Alignment = taRightJustify
                        Expanded = False
                        FieldName = 'USR$HOW'
                        ReadOnly = False
                        Title.Caption = 'Часы'
                        Width = 43
                        Visible = True
                        TotalType = ttSum
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$SCHEDULERHOW'
                        ReadOnly = False
                        Title.Caption = 'Часов по гр.'
                        Width = 76
                        Visible = True
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$DESCRIPTION'
                        ReadOnly = False
                        Title.Caption = 'Описание'
                        Width = 222
                        Visible = True
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$OLDSALARY'
                        ReadOnly = False
                        Title.Caption = 'Оклад'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$NEWSALARY'
                        ReadOnly = False
                        Title.Caption = 'Текущий оклад'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'ID'
                        Title.Caption = 'Идентификатор'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$DOCUMENTKEY'
                        ReadOnly = False
                        Title.Caption = 'Документ'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'Z_USR$DOCUMENTKEY_NUMBER'
                        ReadOnly = False
                        Title.Caption = 'Номер'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'Z_USR$DOCUMENTKEY_DOCUMENTDATE'
                        ReadOnly = False
                        Title.Caption = 'Дата'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'Z_USR$DOCUMENTKEY_DOC2715260478'
                        ReadOnly = False
                        Title.Caption = 'Тип документа'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$CALCDAYS'
                        ReadOnly = False
                        Title.Caption = 'Дни расчет.'
                        Width = -1
                        Visible = False
                      end>
                  end
                  object usrg_TBDock1: TTBDock
                    Tag = 0
                    Left = 0
                    Top = 0
                    Width = 777
                    Height = 26
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    AllowDrag = True
                    Background = nil
                    BackgroundOnToolbars = True
                    BoundLines = []
                    Color = clBtnFace
                    FixAlign = False
                    LimitToOneRow = False
                    PopupMenu = nil
                    Position = dpTop
                    Visible = True
                    object usrg_TBToolbar1: TTBToolbar
                      Tag = 0
                      Left = 0
                      Top = 0
                      Cursor = crDefault
                      HelpContext = 0
                      ActivateParent = True
                      Align = alNone
                      Anchors = [akLeft, akTop]
                      AutoResize = True
                      BorderStyle = bsSingle
                      Caption = 'tbDetail'
                      ChevronMoveItems = True
                      ChevronPriorityForNewItems = tbcpHighest
                      CloseButton = False
                      CloseButtonWhenDocked = False
                      Color = clBtnFace
                      DefaultDock = nil
                      DockableTo = [dpTop, dpBottom, dpLeft, dpRight]
                      DockMode = dmCannotFloatOrChangeDocks
                      DockPos = 0
                      DockRow = 0
                      DragHandleStyle = dhSingle
                      FloatingMode = fmOnTopOfParentForm
                      FloatingWidth = 0
                      FullSize = False
                      HideWhenInactive = True
                      Images = dmImages.il16x16
                      LinkSubitems = nil
                      MenuBar = False
                      Options = []
                      ParentFont = True
                      ParentShowHint = False
                      PopupMenu = nil
                      ProcessShortCuts = False
                      Resizable = True
                      ShowCaption = True
                      ShowHint = True
                      ShrinkMode = tbsmChevron
                      SmoothDrag = True
                      Stretch = True
                      SystemFont = True
                      TabOrder = 0
                      UpdateActions = True
                      UseLastDock = True
                      Visible = True
                      SavedAtRunTime = True
                      object usrg_TBItem2: TTBItem
                        Tag = 0
                        Action = usrg_actAvgNew
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = nil
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                      object usrg_TBItem3: TTBItem
                        Tag = 0
                        Action = usrg_actAvgEdit
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = nil
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                      object usrg_TBItem4: TTBItem
                        Tag = 0
                        Action = usrg_actAvgDelete
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = nil
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                      object usrg_TBItem5: TTBItem
                        Tag = 0
                        Action = usrg_actAvgCopy
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = dmImages.il16x16
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                      object usrg_TBSeparatorItem3: TTBSeparatorItem
                        Tag = 0
                        Blank = False
                        Hint = ''
                        Visible = True
                      end
                      object usrg_TBItem11: TTBItem
                        Tag = 0
                        Action = usrg_actAvgGenerate
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = nil
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                    end
                  end
                end
              end
            end
          end
          object alBase: TActionList
            Left = 388
            Top = 8
            object actNew: TAction
            end
            object actHelp: TAction
            end
            object actSecurity: TAction
            end
            object actOk: TAction
            end
            object actCancel: TAction
            end
            object actNextRecord: TAction
            end
            object actPrevRecord: TAction
            end
            object actApply: TAction
            end
            object actFirstRecord: TAction
            end
            object actLastRecord: TAction
            end
            object actProperty: TAction
            end
            object actCopySettingsFromUser: TAction
            end
            object actAddToSetting: TAction
            end
            object actDocumentType: TAction
            end
            object actDistributeUserSettings: TAction
            end
            object actHistory: TAction
            end
            object actDetailNew: TAction
            end
            object actDetailEdit: TAction
            end
            object actDetailDelete: TAction
            end
            object actDetailDuplicate: TAction
            end
            object actDetailPrint: TAction
            end
            object actDetailCut: TAction
            end
            object actDetailCopy: TAction
            end
            object actDetailPaste: TAction
            end
            object actDetailMacro: TAction
            end
            object actDetailProp: TAction
            end
            object usrg_actGenStr: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'usrg_actGenStr'
              Checked = False
              Enabled = False
              HelpContext = 0
              Hint = ''
              ImageIndex = -1
              ShortCut = 0
              Visible = False
            end
            object usrg_actAvgNew: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Новый'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = 'Новый'
              ImageIndex = 0
              ShortCut = 0
              Visible = True
            end
            object usrg_actAvgEdit: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Редактировать'
              Checked = False
              Enabled = False
              HelpContext = 0
              Hint = 'Редактировать'
              ImageIndex = 1
              ShortCut = 0
              Visible = True
            end
            object usrg_actAvgDelete: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Удалить'
              Checked = False
              Enabled = False
              HelpContext = 0
              Hint = 'Удалить'
              ImageIndex = 2
              ShortCut = 0
              Visible = True
            end
            object usrg_actGenerate: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Рассчитать'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = 'Рассчитать'
              ImageIndex = 236
              ShortCut = 0
              Visible = True
            end
            object usrg_actAvgGenerate: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Рассчитать ср. заработок'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = 'Рассчитать ср. заработок'
              ImageIndex = 236
              ShortCut = 0
              Visible = True
            end
            object usrg_actAvgCopy: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Копировать'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = ''
              ImageIndex = 3
              ShortCut = 0
              Visible = True
            end
          end
          object dsgdcBase: TDataSource
            Left = 421
            Top = 7
          end
          object pm_dlgG: TPopupMenu
            Left = 144
            Top = 232
            object actSecurity1: TMenuItem
            end
            object actHistory1: TMenuItem
            end
            object N1: TMenuItem
            end
            object sepFirst: TMenuItem
            end
            object actNextRecord1: TMenuItem
            end
            object actPrevRecord1: TMenuItem
            end
            object actFirstRecord1: TMenuItem
            end
            object actLastRecord1: TMenuItem
            end
            object sepSecond: TMenuItem
            end
            object actApply1: TMenuItem
            end
            object sepThird: TMenuItem
            end
            object actProperty1: TMenuItem
            end
            object actCopySettings1: TMenuItem
            end
            object nAddToSetting1: TMenuItem
            end
          end
          object ibtrCommon: TIBTransaction
            Params.Strings = (
              'read_committed'
              'rec_version'
              'nowait')
            Left = 752
            Top = 256
          end
          object dsDetail: TDataSource
            Left = 461
            Top = 14
          end
          object gdMacrosMenu: TgdMacrosMenu
            Left = 729
            Top = 119
          end
          object usrg_gdcAvgSalaryStr: TgdcAttrUserDefined
            Tag = 0
            ForcedRefresh = False
            AutoCalcFields = True
            ObjectView = False
            AllowStreamedActive = False
            SubType = 'USR$WG_AVGSALARYSTR'
            MasterSource = dsgdcBase
            MasterField = 'ID'
            DetailField = 'parent'
            SubSet = 'ByParent'
            SetTable = ''
            Active = True
            CachedUpdates = False
            ReadTransaction = gdcUserDocument.ibtrInternal
            Filtered = False
            Left = 684
            Top = 256
          end
          object usrg_dsAvgSalaryStr: TDataSource
            Tag = 0
            AutoEdit = True
            DataSet = usrg_gdcAvgSalaryStr
            Enabled = True
            Left = 717
            Top = 252
          end
        end
        
      EDITIONDATE: 2014-03-21T15:04:01+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147368587_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151164075_5956463
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_GetAvgSalarySum"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_WageSettings
        option explicit
        function wg_GetAvgSalarySum(ByRef DataSet)
        
          dim BookMark, Sum, DoW, M, D
        
          BookMark = DataSet.GetBookMark
          DataSet.DisableControls
          DataSet.Cancel
        
          except wg_GetAvgSalarySum_except(DataSet, BookMark)
        
          dim LYear, LMonth, MCount, OnlyNotFull
          LYear = 0
          LMonth = 0
          
          dim wdays
          dim IsFull, NotFull
          IsFull = 0
          NotFull = 0
        
          Sum = 0
          MCount = 0       ' кол-во месяцев, задействованных в расчете
          DataSet.First
          while not DataSet.EOF
            if DataSet.FieldByName("usr$ischeck").AsInteger > 0 then
              if DataSet.FieldByName("usr$isfull").AsInteger = 1 then
                IsFull = IsFull + 1
              else
                NotFull = NotFull + 1
              end if
              Sum = Sum + DataSet.FieldByName("USR$MODERNSALARY").AsCurrency
              if (LYear <> Year(DataSet.FieldByName("USR$DATE").AsDateTime)) or (LMonth <> Month(DataSet.FieldByName("USR$DATE").AsDateTime)) then
                MCount = MCount + 1
                LYear = Year(DataSet.FieldByName("USR$DATE").AsDateTime)
                LMonth = Month(DataSet.FieldByName("USR$DATE").AsDateTime)
              end if
              Wdays = Wdays +  DataSet.FieldByName("USR$DOW").AsInteger
            end if
            DataSet.Next
          wend
          DataSet.First
        
          dim NeedPost
          NeedPost = false
          set M = DataSet.OwnerForm.gdcObject
          if M.State <> dsEdit and M.State <> dsInsert then
            M.Edit
            NeedPost = true
          end if
          if MCount > 0 then
            if IsFull > 0 then
              M.FieldByName("USR$AVGSUMMA").AsCurrency = Round(Sum / MCount / wg_WageSettings.Wage.AvgDayInMonth) '29.7
            else
              if Wdays > 0 then
                M.FieldByName("USR$AVGSUMMA").AsCurrency = Sum / Wdays
              else
                M.FieldByName("USR$AVGSUMMA").AsCurrency = 0
              end if
            end if
          else
            M.FieldByName("USR$AVGSUMMA").AsCurrency = 0
          end if
          if NeedPost then M.Post
        
          DataSet.GotoBookMark(BookMark)
          DataSet.FreeBookmark(BookMark)
          DataSet.EnableControls
        end function
        
        sub wg_GetAvgSalarySum_except(D, B)
          D.GotoBookMark(B)
          D.FreeBookmark(B)
          D.EnableControls
        end sub
        
      DISPLAYSCRIPT: | 
        WG_GETAVGSALARYSUM
        WG_GETAVGSALARYSUM_EXCEPT
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QHAAAAREFUQVNFVAcAAABEQVRBU0VUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZO
        U1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2013-08-21T14:37:38+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147021903_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151164075_5956463
    Fields: 
      NAME: "gdc_dlgUserComplexDocument147020774_119619099"
      DESCRIPTION: ~
      PARENT: ~
      OBJECTTYPE: 0
      MACROSGROUPKEY: "147021904_119619099 Локальные макросы"
      REPORTGROUPKEY: "147021905_119619099 Отчеты(gdc_dlgUserComplexDocument147020774_119619099)"
      CLASSNAME: ""
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      SUBTYPE: ""
      EDITIONDATE: 2004-05-05T14:36:35+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147489128_336327731
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151164075_5956463
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_AvgSalaryStrGenerate"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_EnableFieldChange
        '#include wg_GetAvgSalarySum
        '#include wg_WageSettings
        option explicit
        function wg_AvgSalaryStrGenerate(ByRef Sender, ByVal CalcType)
        
          dim gdcObject, wg_AvgWage, P, gdcSalary ' wg_Periods,
          dim Avg, i
          dim Creator
          set Creator = New TCreator
        
          Sender.GetComponent("actApply").Execute
        
          set gdcObject = Sender.gdcObject
        
        '  set wg_Periods = New Twg_Periods
          set wg_AvgWage = New Twg_AvgWage
          wg_AvgWage.EmployeeKey = gdcObject.FieldByName("usr$emplkey").AsInteger
            wg_AvgWage.EmployeeKey = gdcObject.FieldByName("usr$emplkey").AsInteger
          if CalcType = 0 then
            wg_AvgWage.FirstMoveKey = gdcObject.FieldByName("usr$firstmovekey").AsInteger
            dim IBSQL
            set IBSQL = Creator.GetObject(nil, "TIBSQL", "")
            IBSQL.Transaction = gdcBaseManager.ReadTransaction
            IBSQL.SQL.Text = _
              "select " & _
              "  t.USR$DATEBEGIN " & _
              "from " & _
              "  usr$wg_total t " & _
              "where " & _
              "  t.DOCUMENTKEY = :TDK "
            IBSQL.ParamByName("TDK").asInteger = gdcObject.FieldByName("USR$TOTALDOCKEY").AsInteger
            IBSQL.ExecQuery
            wg_AvgWage.BeginDate = IBSQL.FieldByName("USR$DATEBEGIN").AsDateTime
          else
            wg_AvgWage.BeginDate = gdcObject.FieldByName("usr$from").AsVariant
          end if
          wg_AvgWage.EndDate =  gdcObject.FieldByName("usr$dateend").AsVariant
          wg_AvgWage.Compensation = (gdcObject.FieldByName("USR$COMPENSATION").AsInteger = 1 )
          wg_AvgWage.FeeGroupKey = gdcObject.FieldByName("USR$FEEGROUPKEY").AsInteger
          wg_AvgWage.Period = gdcObject.FieldByName("USR$AVGPERIOD").AsInteger
          wg_AvgWage.CalcType = CalcType
        
          Avg = wg_AvgWage.AvgWage
          set P = wg_AvgWage.Periods
        
          ' если больничные - только сумма и выходим
          if CalcType = 1 then
            gdcObject.FieldByName("USR$AVGSUMMA").AsCurrency = Avg
            exit function
          end if
        
          set gdcSalary = Sender.GetComponent("usrg_gdcAvgSalaryStr")
          call wg_DisableFieldChange(gdcSalary, "AVGSALARYCALC")
        
          gdcSalary.First
          while not gdcSalary.EOF
            gdcSalary.Delete
          wend
        
          for i = 1 to P.Count
            if not ((P.Item(i).Sum = 0) and (P.Item(i).WorkDays =0) and (P.Item(i).WorkHours = 0)) and P.Item(i).ExistMove then
              gdcSalary.Append
              gdcSalary.FieldByName("USR$DATE").AsVariant = P.Item(i).DateBegin
              gdcSalary.FieldByName("USR$SALARY").AsVariant = P.Item(i).Sum
              gdcSalary.FieldByName("USR$COEFF").AsVariant = P.Item(i).coeff
              gdcSalary.FieldByName("USR$DOW").AsVariant = P.Item(i).WorkDays 'wg_WageSettings.Wage.AvgDayInMonth '29.7
              gdcSalary.FieldByName("USR$HOW").AsVariant = P.Item(i).WorkHours
              gdcSalary.FieldByName("USR$SCHEDULERDOW").AsVariant = P.Item(i).SchedulerWorkDays 'wg_WageSettings.Wage.AvgDayInMonth '29.7
              gdcSalary.FieldByName("USR$SCHEDULERHOW").AsVariant = P.Item(i).SchedulerWorkHours
              gdcSalary.FieldByName("USR$OLDSALARY").AsVariant = P.Item(i).OldSalary
              gdcSalary.FieldByName("USR$NEWSALARY").AsVariant = P.Item(i).NewSalary
              gdcSalary.FieldByName("USR$ISCHECK").AsVariant = Abs(CInt(P.Item(i).IsCheck))
              gdcSalary.FieldByName("USR$ISFULL").AsVariant = Abs(CInt(P.Item(i).IsFull))
              gdcSalary.Post
            end if
          next
          gdcSalary.First
        
          call wg_EnableFieldChange(gdcSalary, "AVGSALARYCALC")
          wg_GetAvgSalarySum(gdcSalary)
        end function
        
      DISPLAYSCRIPT: | 
        WG_AVGSALARYSTRGENERATE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        UFJTVAgAAABDQUxDVFlQRQgAAABDQUxDVFlQRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-22T14:33:31+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147016040_119619099 wg_EnableFieldChange"
          - 
            ADDFUNCTIONKEY: "147368587_274788016 wg_GetAvgSalarySum"
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151164077_5956463
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151164075_5956463
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      MODULE: "MACROS"
      LANGUAGE: "VBScript"
      NAME: "Macros151164077_5956463"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include wg_AvgSalaryStrGenerate
        
        Sub Macros151164077_5956463(OwnerForm)
          'Dim Ret
          
          call wg_AvgSalaryStrGenerate(OwnerForm, 0)
        End Sub
        
      DISPLAYSCRIPT: | 
        MACROS151164077_5956463
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNURkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-01-10T16:42:52+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147489128_336327731 wg_AvgSalaryStrGenerate"
  - 
    Properties: 
      Class: "TgdcMacrosGroup"
      RUID: 147021904_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151164075_5956463
    Fields: 
      HASCHILDREN: 1
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTPARENT: ~
      CLASSNAME: ""
      SUBTYPE: ""
      PARENT: ~
      NAME: "Локальные макросы"
      ISGLOBAL: 0
      DESCRIPTION: ~
      EDITIONDATE: 2004-05-05T14:36:35+03:00
  - 
    Properties: 
      Class: "TgdcMacros"
      RUID: 151164075_5956463
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      MACROSGROUPKEY: "147021904_119619099 Локальные макросы"
      FUNCTIONKEY: "151164077_5956463 Macros151164077_5956463"
      NAME: "Рассчитать ср. заработок"
      SERVERKEY: ~
      ISLOCALEXECUTE: 0
      ISREBUILD: 0
      EXECUTEDATE: ~
      SHORTCUT: 0
      EDITIONDATE: 2014-01-10T16:42:52+03:00
      DISPLAYINMENU: 1
      RUNONLOGIN: 0
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147488902_336327731
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147488903_336327731
    Fields: 
      NAME: "usrg_actAvgGenerate"
      DESCRIPTION: ~
      PARENT: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_actAvgGenerate"
      SUBTYPE: ""
      EDITIONDATE: 2005-03-17T12:29:19+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147488905_336327731
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147488903_336327731
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_actAvgGenerateOnExecute"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_AvgSalaryStrGenerate_pl
        option explicit
        sub usrg_actAvgGenerateOnExecute(ByVal Sender)
          'Сбрасываем кэш для Переменных
          set wg_Variable_ = Nothing
        
          Dim Ret
          Ret = wg_AvgSalaryStrGenerate_pl(Sender.OwnerForm, 0)
        
        end sub
        
      DISPLAYSCRIPT: | 
        USRG_ACTAVGGENERATEONEXECUTE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONEXECUTE"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-01-10T16:18:57+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "151163587_5956463 wg_AvgSalaryStrGenerate_pl"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147488903_336327731
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_actAvgGenerate"
      PARENTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTKEY: "147488902_336327731 gdc_dlgUserComplexDocument147020774_119619099\\usrg_actAvgGenerate"
      EVENTNAME: "ONEXECUTE"
      FUNCTIONKEY: "147488905_336327731 usrg_actAvgGenerateOnExecute"
      DISABLE: ~
      EDITIONDATE: 2005-06-30T10:58:02+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147352480_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147352481_274788016
    Fields: 
      NAME: "usrg_actGenerate"
      DESCRIPTION: ~
      PARENT: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_actGenerate"
      SUBTYPE: ""
      EDITIONDATE: 2005-01-20T15:51:14+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147352483_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147352481_274788016
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_actGenerateOnExecute"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#wg_LastDayInMonth
        '#include wg_AvgSalaryDetailGenerate_pl
        
        sub usrg_actGenerateOnExecute(ByVal Sender)
          'Сбрасываем кэш для Переменных
          set wg_Variable_ = Nothing
        
          Dim Ret
          Ret = wg_AvgSalaryDetailGenerate_pl(Sender.OwnerForm)
        
          'Sender.OwnerForm.GetComponent("ibgrDetail").SetFocus
          'set wg_Structure = Sender.OwnerForm.Objects("Structure")
          'call wg_Structure.CreateHolidayStructure(Sender.OwnerForm)
        
        end sub
        
      DISPLAYSCRIPT: | 
        USRG_ACTGENERATEONEXECUTE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONEXECUTE"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-13T18:35:55+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "156300136_119200397 wg_AvgSalaryDetailGenerate_pl"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147352481_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_actGenerate"
      PARENTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTKEY: "147352480_274788016 gdc_dlgUserComplexDocument147020774_119619099\\usrg_actGenerate"
      EVENTNAME: "ONEXECUTE"
      FUNCTIONKEY: "147352483_274788016 usrg_actGenerateOnExecute"
      DISABLE: ~
      EDITIONDATE: 2014-03-13T18:35:56+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147107645_584838465
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147107643_584838465
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "gdc_dlgUserComplexDocument147020774_119619099OnLoadSettingsAfterCreate"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_WageSettings
        '#include wg_AvgSalary_CoefOption
        
        sub gdc_dlgUserComplexDocument147020774_119619099OnLoadSettingsAfterCreate(ByVal Sender)
        '*** Данный код необходим для вызова встроенного обработчика ***
        '*** В случае его удаления возможно нарушение работы системы ***
          call   Inherited(Sender, "OnLoadSettingsAfterCreate", Array(Sender))
        '*** конец кода поддержки встроенного обработчика            ***
          set S = wg_WageSettings
        
          ''оключено
          'set chboxCoefInflation = Sender.GetComponent("usrg_chboxCoefInflation")
          'chboxCoefInflation.Checked = S.Wage.CoefInflation
          ''сейчас используется
          wg_AvgSalary_CoefOption(Sender)
          '
        
          'Устарело
          if not Sender.VariableExists("Coeff") then
           Sender.AddVariableItem("Coeff")
          end if
          Sender.Variables("Coeff") = S.Wage.CoefInflation
          'Новые
          set rbSalaryInf = Sender.GetComponent("usrg_rbSalaryInf")
          set rbRateInf = Sender.GetComponent("usrg_rbRateInf")
          set rbPersCoeffInf = Sender.GetComponent("usrg_rbPersCoeffInf")
          select case S.Inflation.InflType
            case 0
              Sender.GetComponent("usrg_rbSalaryInf").Checked = True
            case 1
              Sender.GetComponent("usrg_rbRateInf").Checked = True
            case 2
              Sender.GetComponent("usrg_rbPersCoeffInf").Checked = True
          end select
          if not Sender.VariableExists("NewCoeff") then
            Sender.AddVariableItem("NewCoeff")
          end if
          Sender.Variables("NewCoeff") = S.Inflation.InflType
        end sub
        
      DISPLAYSCRIPT: | 
        GDC_DLGUSERCOMPLEXDOCUMENT147020774_119619099ONLOADSETTINGSAFTERCREATE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONLOADSETTINGSAFTERCREATE"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-26T14:18:46+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
          - 
            ADDFUNCTIONKEY: "156299481_119200397 wg_AvgSalary_CoefOption"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147107643_584838465
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      PARENTNAME: ~
      OBJECTKEY: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      EVENTNAME: "ONLOADSETTINGSAFTERCREATE"
      FUNCTIONKEY: "147107645_584838465 gdc_dlgUserComplexDocument147020774_119619099OnLoadSettingsAfterCreate"
      DISABLE: ~
      EDITIONDATE: 2014-03-26T14:18:46+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147107754_584838465
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147107903_584838465
    Fields: 
      NAME: "usrg_chboxCoefInflation"
      DESCRIPTION: ~
      PARENT: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_chboxCoefInflation"
      SUBTYPE: ""
      EDITIONDATE: 2006-06-15T10:53:41+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147107905_584838465
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147107903_584838465
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_chboxCoefInflationOnClick"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_WageSettings
        sub usrg_chboxCoefInflationOnClick(ByVal Sender)
          Exit Sub 'работает OnLoadSettingsAfterCreate
          set S = wg_WageSettings
          set chboxCoefInflation = Sender
          S.Wage.CoefInflation = chboxCoefInflation.Checked
        end sub
        
      DISPLAYSCRIPT: | 
        USRG_CHBOXCOEFINFLATIONONCLICK
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONCLICK"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-03T15:26:40+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147107903_584838465
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_chboxCoefInflation"
      PARENTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTKEY: "147107754_584838465 gdc_dlgUserComplexDocument147020774_119619099\\usrg_chboxCoefInflation"
      EVENTNAME: "ONCLICK"
      FUNCTIONKEY: "147107905_584838465 usrg_chboxCoefInflationOnClick"
      DISABLE: 1
      EDITIONDATE: 2014-03-03T15:26:41+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147036259_781744915
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147036260_781744915
    Fields: 
      NAME: "usrg_rbPersCoeffInf"
      DESCRIPTION: ~
      PARENT: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_rbPersCoeffInf"
      SUBTYPE: ""
      EDITIONDATE: 2007-04-02T14:55:25+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147036262_781744915
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147036260_781744915
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_rbPersCoeffInfOnClick"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_WageSettings
        option explicit
        sub usrg_rbPersCoeffInfOnClick(ByVal Sender)
          Exit Sub 'работает OnLoadSettingsAfterCreate
          dim S
          set S = wg_WageSettings
          if Sender.Checked then
            S.Inflation.InflType = 2
          end if
        end sub
        
      DISPLAYSCRIPT: | 
        USRG_RBPERSCOEFFINFONCLICK
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONCLICK"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-03T15:06:09+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147036260_781744915
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_rbPersCoeffInf"
      PARENTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTKEY: "147036259_781744915 gdc_dlgUserComplexDocument147020774_119619099\\usrg_rbPersCoeffInf"
      EVENTNAME: "ONCLICK"
      FUNCTIONKEY: "147036262_781744915 usrg_rbPersCoeffInfOnClick"
      DISABLE: 1
      EDITIONDATE: 2014-03-03T15:06:09+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147036255_781744915
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147036256_781744915
    Fields: 
      NAME: "usrg_rbRateInf"
      DESCRIPTION: ~
      PARENT: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_rbRateInf"
      SUBTYPE: ""
      EDITIONDATE: 2007-04-02T14:55:17+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147036258_781744915
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147036256_781744915
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_rbRateInfOnClick"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_WageSettings
        option explicit
        sub usrg_rbRateInfOnClick(ByVal Sender)
          Exit Sub 'работает OnLoadSettingsAfterCreate
          dim S
          set S = wg_WageSettings
          if Sender.Checked then
            S.Inflation.InflType = 1
          end if
        end sub
        
      DISPLAYSCRIPT: | 
        USRG_RBRATEINFONCLICK
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONCLICK"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-03T15:26:35+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147036256_781744915
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_rbRateInf"
      PARENTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTKEY: "147036255_781744915 gdc_dlgUserComplexDocument147020774_119619099\\usrg_rbRateInf"
      EVENTNAME: "ONCLICK"
      FUNCTIONKEY: "147036258_781744915 usrg_rbRateInfOnClick"
      DISABLE: 1
      EDITIONDATE: 2014-03-03T15:26:35+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147036251_781744915
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147036252_781744915
    Fields: 
      NAME: "usrg_rbSalaryInf"
      DESCRIPTION: ~
      PARENT: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_rbSalaryInf"
      SUBTYPE: ""
      EDITIONDATE: 2007-04-02T14:55:00+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147036254_781744915
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147036252_781744915
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_rbSalaryInfOnClick"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_WageSettings
        option explicit
        sub usrg_rbSalaryInfOnClick(ByVal Sender)
          Exit Sub 'работает OnLoadSettingsAfterCreate
          dim S
          set S = wg_WageSettings
          if Sender.Checked then
            S.Inflation.InflType = 0
          end if
        end sub
        
      DISPLAYSCRIPT: | 
        USRG_RBSALARYINFONCLICK
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONCLICK"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147021903_119619099 gdc_dlgUserComplexDocument147020774_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-03T15:26:29+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147019760_119619099 wg_WageSettings"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147036252_781744915
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_rbSalaryInf"
      PARENTNAME: "gdc_dlgUserComplexDocument147020774_119619099"
      OBJECTKEY: "147036251_781744915 gdc_dlgUserComplexDocument147020774_119619099\\usrg_rbSalaryInf"
      EVENTNAME: "ONCLICK"
      FUNCTIONKEY: "147036254_781744915 usrg_rbSalaryInfOnClick"
      DISABLE: 1
      EDITIONDATE: 2014-03-03T15:26:29+03:00
  - 
    Properties: 
      Class: "TgdcAttrUserDefinedLBRBTree"
      SubType: "USR$WG_FEEGROUP"
      RUID: 147757383_84733194
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PARENT: "147071456_274788016 Все начисления\\Ср. заработок\\Ср. заработок для отпусков"
      DISABLED: 0
      EDITIONDATE: 2014-01-08T18:30:20+03:00
      USR$NAME: "Ср. заработок для отпусков - не осовременивать"
      USR$DESCRIPTION: ~
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 147123486_1439110857
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PARENT: "147240236_1234867257 GLOBAL\\DFM\\Tgdc_dlgUserComplexDocument"
      NAME: "147022845_119619099"
      DATA_TYPE: "B"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: | 
        object gdc_dlgUserComplexDocument147022845_119619099: Tgdc_dlgUserComplexDocument
          Left = -8
          Top = -8
          ActiveControl = nil
          WindowState = wsMaximized
          PixelsPerInch = 96
          TextHeight = 13
          object btnAccess: TButton
            TabOrder = 3
          end
          object btnNew: TButton
            TabOrder = 4
          end
          object btnHelp: TButton
            TabOrder = 5
          end
          object btnOK: TButton
            TabOrder = 1
          end
          object btnCancel: TButton
            TabOrder = 2
          end
          object pnlMain: TPanel
            TabOrder = 0
            object splMain: TSplitter
            end
            object usrg_Splitter1: TSplitter
              Tag = 0
              Left = 541
              Top = 305
              Width = 6
              Height = 374
              Cursor = crHSplit
              Hint = ''
              Align = alLeft
              AutoSnap = True
              Beveled = False
              Constraints.MaxHeight = 0
              Constraints.MaxWidth = 0
              Constraints.MinHeight = 0
              Constraints.MinWidth = 0
              MinSize = 30
              ParentColor = True
              ResizeStyle = rsPattern
              Visible = True
            end
            object pnlDetail: TPanel
              Width = 541
              Align = alLeft
              Anchors = [akLeft, akTop, akBottom]
              TabOrder = 1
              object ibgrDetail: TgsIBGrid
                Left = 0
                Width = 541
                Height = 348
                ReadOnly = True
                Expands = <>
                Conditions = <>
                ColumnEditors = <>
                Aliases = <>
                Columns = <
                  item
                    Expanded = False
                    FieldName = 'USR$INCLUDEDATE'
                    ReadOnly = False
                    Title.Caption = 'Месяц зачисления'
                    Width = 108
                    Visible = True
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'USR$PERCENT'
                    ReadOnly = False
                    Title.Caption = '%'
                    Width = 36
                    Visible = True
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'USR$DOI'
                    ReadOnly = False
                    Title.Caption = 'Дни'
                    Width = 48
                    Visible = True
                    TotalType = ttSum
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'USR$HOI'
                    ReadOnly = False
                    Title.Caption = 'Часы'
                    Width = 48
                    Visible = True
                    TotalType = ttSum
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'USR$SUMMA'
                    ReadOnly = False
                    Title.Caption = 'Сумма'
                    Width = 72
                    Visible = True
                    TotalType = ttSum
                  end
                  item
                    Expanded = False
                    FieldName = 'USR$DATEBEGIN'
                    ReadOnly = False
                    Title.Caption = 'Дата начала'
                    Width = 84
                    Visible = True
                  end
                  item
                    Expanded = False
                    FieldName = 'USR$DATEEND'
                    ReadOnly = False
                    Title.Caption = 'Дата окончания'
                    Width = 108
                    Visible = True
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'SUMNCU'
                    ReadOnly = False
                    Title.Caption = 'Начислено'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DOCUMENTDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DESCRIPTION'
                    ReadOnly = False
                    Title.Caption = 'Описание'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'USR$SORTNUMBER'
                    ReadOnly = False
                    Title.Caption = 'Номер для сортировки'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'ID'
                    ReadOnly = False
                    Title.Caption = 'Ключ'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'PARENT'
                    ReadOnly = False
                    Title.Caption = 'Родитель'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DOCUMENTTYPEKEY'
                    ReadOnly = False
                    Title.Caption = 'Тип документа'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'TRTYPEKEY'
                    ReadOnly = False
                    Title.Caption = 'Тип транзакции'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'TRANSACTIONKEY'
                    ReadOnly = False
                    Title.Caption = 'Транзакция'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'NUMBER'
                    ReadOnly = False
                    Title.Caption = 'Номер'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'SUMCURR'
                    ReadOnly = False
                    Title.Caption = 'Сумма в валюте'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DELAYED'
                    ReadOnly = False
                    Title.Caption = 'Отложенный'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'CURRKEY'
                    ReadOnly = False
                    Title.Caption = 'Валюта'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'COMPANYKEY'
                    ReadOnly = False
                    Title.Caption = 'Компания'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'CREATORKEY'
                    ReadOnly = False
                    Title.Caption = 'Кто создал'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'CREATIONDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата создания'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'EDITORKEY'
                    ReadOnly = False
                    Title.Caption = 'Кто исправил'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'EDITIONDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата изменения'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'PRINTDATE'
                    ReadOnly = False
                    Title.Caption = 'Дата печати'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DISABLED'
                    ReadOnly = False
                    Title.Caption = 'Отключено'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'RESERVED'
                    ReadOnly = False
                    Title.Caption = 'Зарезервировано'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'DOCUMENTKEY'
                    Title.Caption = 'Ключ документа'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'MASTERKEY'
                    Title.Caption = 'Родитель (05.Начисление болничных(позиция))'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'RESERVED1'
                    Title.Caption = 'Зарезервировано (05.Начисление болничных(позиция))'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'USR$ACCDATE'
                    ReadOnly = False
                    Title.Caption = 'Месяц начисления'
                    Width = -1
                    Visible = False
                  end
                  item
                    Expanded = False
                    FieldName = 'SUMEQ'
                    ReadOnly = False
                    Title.Caption = 'Сумма в эквиваленте'
                    Width = -1
                    Visible = False
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'AFULL'
                    ReadOnly = False
                    Title.Caption = 'Полный доступ'
                    Width = -1
                    Visible = False
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'ACHAG'
                    ReadOnly = False
                    Title.Caption = 'Просмотр и редактирование'
                    Width = -1
                    Visible = False
                  end
                  item
                    Alignment = taRightJustify
                    Expanded = False
                    FieldName = 'AVIEW'
                    ReadOnly = False
                    Title.Caption = 'Только просмотр'
                    Width = -1
                    Visible = False
                  end>
              end
              object tbdTop: TTBDock
                Width = 541
                object tbDetail: TTBToolbar
                  DockPos = 1
                  SavedAtRunTime = True
                  object tbNew: TTBItem
                  end
                  object tbEdit: TTBItem
                  end
                  object tbDelete: TTBItem
                  end
                  object tbDuplicate: TTBItem
                  end
                  object tbiDetailProperties: TTBItem
                  end
                  object TBSeparatorItem1: TTBSeparatorItem
                  end
                  object tbCopy: TTBItem
                  end
                  object tbCut: TTBItem
                  end
                  object tbPaste: TTBItem
                  end
                  object TBSeparatorItem2: TTBSeparatorItem
                  end
                  object tbMacro: TTBItem
                  end
                  object usrg_TBSeparatorItem1: TTBSeparatorItem
                    Tag = 0
                    Blank = False
                    Hint = ''
                    Visible = True
                  end
                  object usrg_TBItem2: TTBItem
                    Tag = 0
                    Action = usrg_actGenerate
                    AutoCheck = False
                    DisplayMode = nbdmDefault
                    GroupIndex = 0
                    Images = nil
                    InheritOptions = True
                    MaskOptions = []
                    Options = []
                    RadioItem = False
                  end
                  object usrg_TBItem1: TTBItem
                    Tag = 0
                    Action = usrg_actStrGen
                    AutoCheck = False
                    DisplayMode = nbdmDefault
                    GroupIndex = 0
                    Images = nil
                    InheritOptions = True
                    MaskOptions = []
                    Options = []
                    RadioItem = False
                  end
                  object usrg_tbFeesByEmpl: TTBItem
                    Tag = 0
                    Action = nil
                    AutoCheck = False
                    Caption = 'Итоговое'
                    Checked = False
                    DisplayMode = nbdmDefault
                    Enabled = True
                    GroupIndex = 0
                    HelpContext = 0
                    Hint = ''
                    ImageIndex = -1
                    Images = nil
                    InheritOptions = True
                    MaskOptions = []
                    Options = []
                    RadioItem = False
                    ShortCut = 0
                    Visible = True
                  end
                end
              end
              object tbdLeft: TTBDock
                Width = 0
                Height = 348
              end
              object tbdRight: TTBDock
                Left = 541
                Width = 0
                Height = 348
              end
              object tbdBottom: TTBDock
                Top = 374
                Width = 541
                Height = 0
              end
            end
            object pnlMaster: TPanel
              Constraints.MinHeight = 215
              TabOrder = 0
              object pnlHolding: TPanel
                Width = 1366
                TabOrder = 1
                object lblCompany: TLabel
                end
                object iblkCompany: TgsIBLookupComboBox
                end
              end
              object usrg_PageControl1: TPageControl
                Tag = 0
                Left = 0
                Top = 0
                Width = 1366
                Height = 301
                Cursor = crDefault
                Hint = ''
                HelpContext = 0
                ActivePage = usrg_TabSheet1
                Align = alClient
                Anchors = [akLeft, akTop, akRight, akBottom]
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DockSite = False
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HotTrack = False
                Images = nil
                MultiLine = False
                OwnerDraw = False
                ParentBiDiMode = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                RaggedRight = False
                ScrollOpposite = False
                Style = tsTabs
                TabHeight = 0
                TabOrder = 0
                TabPosition = tpTop
                TabStop = True
                TabWidth = 0
                Visible = True
                object usrg_TabSheet1: TTabSheet
                  Tag = 0
                  Cursor = crDefault
                  Hint = ''
                  HelpContext = 0
                  BorderWidth = 0
                  Caption = 'Основные'
                  DragMode = dmManual
                  Enabled = True
                  Highlighted = False
                  ImageIndex = 0
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  TabVisible = True
                  object usrg_GroupBox1: TGroupBox
                    Tag = 0
                    Left = 0
                    Top = 128
                    Width = 1358
                    Height = 145
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    Align = alClient
                    Anchors = [akLeft, akTop, akRight, akBottom]
                    Caption = ' Средний заработок '
                    Constraints.MaxHeight = 0
                    Constraints.MaxWidth = 0
                    Constraints.MinHeight = 0
                    Constraints.MinWidth = 0
                    DockSite = False
                    DragCursor = crDrag
                    DragKind = dkDrag
                    DragMode = dmManual
                    Enabled = True
                    ParentBiDiMode = True
                    ParentColor = True
                    ParentCtl3D = True
                    ParentFont = True
                    ParentShowHint = True
                    PopupMenu = nil
                    TabOrder = 1
                    TabStop = False
                    Visible = True
                    object usrat_DBEdit_USR_AVGPERIOD_Label: TLabel
                      Left = 7
                      Top = 44
                      Width = 119
                      Caption = 'Период формирования:'
                    end
                    object usrat_gsIBLookupComboBox_USR_FEEGROUPKEY_Label: TLabel
                      Left = 7
                      Top = 20
                    end
                    object usrat_DBEdit_USR_AVGSUMMA_Label: TLabel
                      Left = 373
                      Top = 20
                    end
                    object usrat_DBEdit_USR_AVGPERIOD: TxDBCalculatorEdit
                      Left = 143
                      Top = 40
                      Width = 100
                      Cursor = crIBeam
                      TabOrder = 1
                    end
                    object usrat_gsIBLookupComboBox_USR_FEEGROUPKEY: TgsIBLookupComboBox
                      Left = 143
                      Top = 16
                      Width = 212
                      ListTable = 
                        'USR$WG_FEEGROUP fg LEFT JOIN USR$WG_FEEGROUP fg1 ON fg.lb > fg1.' +
                        'lb AND fg.rb < fg1.rb'
                      Condition = 'fg1.id = <RUID XID = 147274328 DBID = 274788016/>'
                      TabOrder = 0
                    end
                    object usrat_DBEdit_USR_AVGSUMMA: TxDBCalculatorEdit
                      Left = 467
                      Top = 16
                      Width = 93
                      Cursor = crIBeam
                      ReadOnly = True
                      TabOrder = 4
                    end
                    object usrat_DBCheckBox_USR_BYSTAFFSALARY: TDBCheckBox
                      Left = 375
                      Top = 56
                      Width = 161
                      TabOrder = 2
                      Visible = False
                    end
                    object usrat_DBCheckBox_USR_CALCBYHOUR: TDBCheckBox
                      Left = 375
                      Top = 73
                      Width = 114
                      TabOrder = 3
                      ValueChecked = '1'
                      ValueUnchecked = '0'
                      Visible = False
                    end
                    object usrat_DBCheckBox_USR_CALCBYBUDGET: TDBCheckBox
                      Left = 8
                      Top = 86
                      Hint = '50% от БМП'
                      Caption = '50% от БПМ'
                      ReadOnly = True
                    end
                    object usrat_DBCheckBox_USR_THIRDMETHOD: TDBCheckBox
                      Left = 8
                      Top = 67
                      Width = 117
                      Caption = 'Расчёт от ставки'
                      ReadOnly = True
                    end
                    object usrat_DBCheckBox_USR_REFERENCE: TDBCheckBox
                      Left = 143
                      Top = 77
                      TabOrder = 7
                    end
                    object usrat_DBCheckBox_USR_AVERAGE: TDBCheckBox
                      Left = 8
                      Top = 103
                      Width = 149
                      Caption = 'От среднего заработка'
                      ReadOnly = True
                      TabOrder = 8
                    end
                  end
                  object usrg_Panel1: TPanel
                    Tag = 0
                    Left = 0
                    Top = 0
                    Width = 1358
                    Height = 128
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    Align = alTop
                    Alignment = taCenter
                    Anchors = [akLeft, akTop, akRight]
                    AutoSize = False
                    BevelInner = bvRaised
                    BevelOuter = bvLowered
                    BevelWidth = 1
                    BorderWidth = 0
                    BorderStyle = bsNone
                    Caption = ''
                    Color = clBtnFace
                    Constraints.MaxHeight = 0
                    Constraints.MaxWidth = 0
                    Constraints.MinHeight = 0
                    Constraints.MinWidth = 0
                    UseDockManager = True
                    DockSite = False
                    DragCursor = crDrag
                    DragKind = dkDrag
                    DragMode = dmManual
                    Enabled = True
                    FullRepaint = True
                    Locked = False
                    ParentBiDiMode = True
                    ParentColor = False
                    ParentCtl3D = True
                    ParentFont = True
                    ParentShowHint = True
                    PopupMenu = nil
                    TabOrder = 0
                    TabStop = False
                    Visible = True
                    object usrg_Label1: TLabel
                      Tag = 0
                      Left = 7
                      Top = 80
                      Width = 66
                      Height = 13
                      Cursor = crDefault
                      Hint = ''
                      Align = alNone
                      Alignment = taLeftJustify
                      Anchors = [akLeft, akTop]
                      AutoSize = True
                      Caption = 'Тип расчета:'
                      Constraints.MaxHeight = 0
                      Constraints.MaxWidth = 0
                      Constraints.MinHeight = 0
                      Constraints.MinWidth = 0
                      DragCursor = crDrag
                      DragKind = dkDrag
                      DragMode = dmManual
                      Enabled = True
                      FocusControl = nil
                      ParentBiDiMode = True
                      ParentColor = True
                      ParentFont = True
                      ParentShowHint = True
                      PopupMenu = nil
                      ShowAccelChar = True
                      Transparent = True
                      Layout = tlTop
                      Visible = True
                      WordWrap = False
                    end
                    object usrat_gsIBLookupComboBox_USR_EMPLKEY_Label: TLabel
                      Left = 7
                      Top = 35
                    end
                    object usrat_xDateDBEdit_USR_FROM_Label: TLabel
                      Left = 317
                      Top = 12
                    end
                    object usrat_gsIBLookupComboBox_USR_ILLTYPEKEY_Label: TLabel
                      Left = 7
                      Top = 58
                    end
                    object usrat_xDateDBEdit_USR_DATEEND_Label: TLabel
                      Left = 317
                      Top = 58
                    end
                    object usrat_xDateDBEdit_USR_DATEBEGIN_Label: TLabel
                      Left = 317
                      Top = 35
                    end
                    object usrat_gsIBLookupComboBox_USR_TOTALDOCKEY_Label: TLabel
                      Left = 7
                      Top = 12
                    end
                    object usrat_DBEdit_USR_PERCENT_Label: TLabel
                      Left = 317
                      Top = 81
                      Width = 91
                      Caption = 'Процент пособия:'
                    end
                    object usrat_gsIBLookupComboBox_USR_FIRSTMOVEKEY_Label: TLabel
                      Left = 8
                      Top = 104
                      Width = 76
                      Caption = 'По должности:'
                    end
                    object usrg_cbCalcType: TComboBox
                      Tag = 0
                      Left = 133
                      Top = 77
                      Width = 156
                      Height = 21
                      Cursor = crDefault
                      Hint = ''
                      HelpContext = 0
                      TabStop = True
                      Style = csDropDownList
                      Anchors = [akLeft, akTop]
                      Color = clWindow
                      Constraints.MaxHeight = 0
                      Constraints.MaxWidth = 0
                      Constraints.MinHeight = 0
                      Constraints.MinWidth = 0
                      DragCursor = crDrag
                      DragKind = dkDrag
                      DragMode = dmManual
                      DropDownCount = 3
                      Enabled = True
                      ImeMode = imDontCare
                      ImeName = ''
                      ItemHeight = 13
                      MaxLength = 0
                      ParentBiDiMode = True
                      ParentColor = False
                      ParentCtl3D = True
                      ParentFont = True
                      ParentShowHint = True
                      PopupMenu = nil
                      Sorted = False
                      TabOrder = 3
                      Text = 'Все дни 100%'
                      Visible = True
                      Items.Strings = (
                        '12 дн. 80%, ост. 100%'
                        'Все дни 100%')
                    end
                    object usrat_gsIBLookupComboBox_USR_EMPLKEY: TgsIBLookupComboBox
                      Left = 133
                      Top = 31
                      Width = 156
                      ListTable = 
                        'GD_CONTACT C JOIN GD_CONTACT CC ON CC.LB <= C.LB AND CC.RB >= C.' +
                        'RB'
                      SortOrder = soAsc
                      Condition = 'c.contacttype = 2 AND cc.id = <COMPANYKEY/>'
                      SubType = ''
                      TabOrder = 1
                    end
                    object usrat_xDateDBEdit_USR_FROM: TxDateDBEdit
                      Left = 491
                      Top = 8
                      Width = 68
                      TabOrder = 5
                    end
                    object usrat_gsIBLookupComboBox_USR_ILLTYPEKEY: TgsIBLookupComboBox
                      Left = 133
                      Top = 54
                      Width = 156
                      TabOrder = 2
                    end
                    object usrat_xDateDBEdit_USR_DATEBEGIN: TxDateDBEdit
                      Left = 491
                      Top = 31
                      Width = 68
                      TabOrder = 6
                    end
                    object usrat_xDateDBEdit_USR_DATEEND: TxDateDBEdit
                      Left = 491
                      Top = 54
                      Width = 68
                      TabOrder = 7
                    end
                    object usrat_gsIBLookupComboBox_USR_TOTALDOCKEY: TgsIBLookupComboBox
                      Left = 133
                      Top = 8
                      Width = 156
                      ListTable = 
                        'usr$wg_total t LEFT JOIN GD_DOCUMENT doc ON doc.id = t.documentk' +
                        'ey'
                      ListField = 'usr$name'
                      KeyField = 'documentkey'
                      SortOrder = soAsc
                      Condition = 'parent is null and doc.companykey = <companykey/>'
                      gdClassName = 'TgdcUserDocument'
                      SubType = '147567052_119619099'
                      ParentShowHint = False
                      ShowHint = True
                      TabOrder = 0
                    end
                    object usrat_DBEdit_USR_PERCENT: TxDBCalculatorEdit
                      Left = 491
                      Top = 77
                      Width = 69
                      Cursor = crIBeam
                      TabOrder = 8
                    end
                    object usrat_gsIBLookupComboBox_USR_FIRSTMOVEKEY: TgsIBLookupComboBox
                      Left = 133
                      Top = 101
                      Width = 156
                      Fields = 'l.POSNAME, l.DEPTNAME, l.KINDOFWORKNAME'
                      ListTable = 'USR$WG_P_FMKLOOKUPSETTINGS (:emplkey, :dateend)  l'
                      ListField = 'l.POSID'
                      KeyField = 'l.FMK'
                      Condition = ''
                      TabOrder = 4
                    end
                  end
                end
                object usrg_TabSheet2: TTabSheet
                  Tag = 0
                  Cursor = crDefault
                  Hint = ''
                  HelpContext = 0
                  BorderWidth = 0
                  Caption = 'Атрибуты'
                  DragMode = dmManual
                  Enabled = True
                  Highlighted = False
                  ImageIndex = 0
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  TabVisible = True
                  object atContainer: TatContainer
                    Top = 0
                    Width = 1358
                    Height = 248
                    VertScrollBar.Position = 0
                    TabOrder = 0
                    Visible = False
                    object usrat_DBEdit_USR_DURATION_Label: TLabel
                      Top = 216
                      Visible = False
                    end
                    object usrat_DBEdit_USR_CALCTYPE_Label: TLabel
                      Left = 29
                      Top = 105
                      Visible = False
                    end
                    object usrat_DBEdit_NUMBER_Label: TLabel
                      Left = 5
                      Top = 32
                      Visible = False
                    end
                    object usrat_xDateDBEdit_DOCUMENTDATE_Label: TLabel
                      Top = 8
                      Visible = False
                    end
                    object usrat_DBEdit_USR_SORTNUMBER_Label: TLabel
                      Left = 5
                      Top = 61
                      Visible = False
                    end
                    object usrat_DBEdit_USR_DURATION: TxDBCalculatorEdit
                      Top = 212
                      Cursor = crIBeam
                      TabOrder = 4
                      Visible = False
                    end
                    object usrat_DBEdit_USR_CALCTYPE: TxDBCalculatorEdit
                      Left = 157
                      Top = 101
                      Width = 156
                      Cursor = crIBeam
                      TabOrder = 3
                      Visible = False
                    end
                    object usrat_DBEdit_NUMBER: TDBEdit
                      Left = 163
                      Top = 28
                      Width = 101
                      TabOrder = 2
                      Visible = False
                    end
                    object usrat_xDateDBEdit_DOCUMENTDATE: TxDateDBEdit
                      Left = 163
                      Top = 4
                      Width = 102
                      TabOrder = 1
                      Visible = False
                    end
                    object usrat_DBEdit_USR_SORTNUMBER: TxDBCalculatorEdit
                      Left = 163
                      Top = 61
                      Cursor = crIBeam
                      TabOrder = 0
                      Visible = False
                    end
                  end
                end
              end
            end
            object usrg_pAvgSalary: TPanel
              Tag = 0
              Left = 547
              Top = 305
              Width = 819
              Height = 374
              Cursor = crDefault
              Hint = ''
              HelpContext = 0
              Align = alClient
              Alignment = taCenter
              Anchors = [akLeft, akTop, akRight, akBottom]
              AutoSize = False
              BevelInner = bvNone
              BevelOuter = bvNone
              BevelWidth = 1
              BorderWidth = 0
              BorderStyle = bsNone
              Caption = ''
              Color = clBtnFace
              Constraints.MaxHeight = 0
              Constraints.MaxWidth = 0
              Constraints.MinHeight = 0
              Constraints.MinWidth = 0
              UseDockManager = True
              DockSite = False
              DragCursor = crDrag
              DragKind = dkDrag
              DragMode = dmManual
              Enabled = True
              FullRepaint = True
              Locked = False
              ParentBiDiMode = True
              ParentColor = False
              ParentCtl3D = True
              ParentFont = True
              ParentShowHint = True
              PopupMenu = nil
              TabOrder = 2
              TabStop = False
              Visible = True
              object usrg_PageControl2: TPageControl
                Tag = 0
                Left = 0
                Top = 0
                Width = 819
                Height = 374
                Cursor = crDefault
                Hint = ''
                HelpContext = 0
                ActivePage = usrg_TabSheet3
                Align = alClient
                Anchors = [akLeft, akTop, akRight, akBottom]
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DockSite = False
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HotTrack = False
                Images = nil
                MultiLine = False
                OwnerDraw = False
                ParentBiDiMode = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                RaggedRight = False
                ScrollOpposite = False
                Style = tsTabs
                TabHeight = 0
                TabOrder = 0
                TabPosition = tpTop
                TabStop = True
                TabWidth = 0
                Visible = True
                object usrg_TabSheet3: TTabSheet
                  Tag = 0
                  Cursor = crDefault
                  Hint = ''
                  HelpContext = 0
                  BorderWidth = 0
                  Caption = 'Расчет структуры ср. заработка'
                  DragMode = dmManual
                  Enabled = True
                  Highlighted = False
                  ImageIndex = 0
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  TabVisible = True
                  object usrg_grAvgSalaryStr: TgsIBGrid
                    Tag = 0
                    Left = 0
                    Top = 26
                    Width = 811
                    Height = 320
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    TabStop = True
                    Align = alClient
                    Anchors = [akLeft, akTop, akRight, akBottom]
                    BorderStyle = bsNone
                    Constraints.MaxHeight = 0
                    Constraints.MaxWidth = 0
                    Constraints.MinHeight = 0
                    Constraints.MinWidth = 0
                    DataSource = usrg_dsAvgSalaryStr
                    DefaultDrawing = True
                    DragCursor = crDrag
                    DragKind = dkDrag
                    DragMode = dmManual
                    Enabled = True
                    ImeMode = imDontCare
                    ImeName = ''
                    Options = [dgEditing, dgTitles, dgIndicator, dgColumnResize, dgColLines, dgRowLines, dgTabs, dgConfirmDelete, dgCancelOnExit, dgMultiSelect]
                    ParentBiDiMode = True
                    ParentColor = False
                    ParentCtl3D = True
                    ParentFont = True
                    ParentShowHint = True
                    PopupMenu = nil
                    ReadOnly = True
                    TabOrder = 0
                    Visible = True
                    TableColor = clWindow
                    SelectedColor = clHighlight
                    TitleColor = clBtnFace
                    RefreshType = rtCloseOpen
                    Striped = True
                    StripeOdd = 15201271
                    StripeEven = 14084071
                    InternalMenuKind = imkWithSeparator
                    Expands = <>
                    ExpandsActive = False
                    ExpandsSeparate = False
                    TitlesExpanding = False
                    Conditions = <>
                    ConditionsActive = False
                    CheckBox.DisplayField = 'USR$ISCHECK'
                    CheckBox.FieldName = 'USR$ISCHECK'
                    CheckBox.Visible = False
                    CheckBox.FirstColumn = False
                    ScaleColumns = False
                    MinColWidth = 40
                    ToolBar = nil
                    FinishDrawing = True
                    RememberPosition = True
                    SaveSettings = True
                    ColumnEditors = <
                      item
                        Lookup.Distinct = False
                        EditorStyle = cesValueList
                        FieldName = 'USR$ISCHECK'
                        DisplayField = 'USR$ISCHECK'
                        ValueList.Strings = (
                          'Нет=0'
                          'Да=1')
                        DropDownCount = 3
                      end
                      item
                        Lookup.Distinct = False
                        EditorStyle = cesValueList
                        FieldName = 'USR$ISFULL'
                        DisplayField = 'USR$ISFULL'
                        ValueList.Strings = (
                          'Да=1'
                          'Нет=0')
                        DropDownCount = 3
                      end>
                    Aliases = <>
                    ShowFooter = False
                    ShowTotals = True
                    Columns = <
                      item
                        Expanded = False
                        FieldName = 'USR$ISFULL'
                        ReadOnly = False
                        Title.Caption = 'Полный месяц'
                        Width = 54
                        Visible = True
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$DATE'
                        ReadOnly = False
                        Title.Caption = 'Дата'
                        Width = 72
                        Visible = True
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$CALCDAYS'
                        ReadOnly = False
                        Title.Caption = 'Дни расчет.'
                        Width = 78
                        Visible = True
                        TotalType = ttSum
                      end
                      item
                        Alignment = taRightJustify
                        Expanded = False
                        FieldName = 'USR$SALARY'
                        ReadOnly = False
                        Title.Caption = 'Зарплата'
                        Width = 72
                        Visible = True
                        DisplayFormat = '#.##'
                        TotalType = ttSum
                      end
                      item
                        Alignment = taRightJustify
                        Expanded = False
                        FieldName = 'USR$DOW'
                        ReadOnly = False
                        Title.Caption = 'Дни работы'
                        Width = 60
                        Visible = True
                        TotalType = ttSum
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$SCHEDULERDOW'
                        ReadOnly = False
                        Title.Caption = 'Дней по графику'
                        Width = 84
                        Visible = True
                      end
                      item
                        Alignment = taRightJustify
                        Expanded = False
                        FieldName = 'USR$HOW'
                        ReadOnly = False
                        Title.Caption = 'Часы работы'
                        Width = 66
                        Visible = True
                        TotalType = ttSum
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$SCHEDULERHOW'
                        ReadOnly = False
                        Title.Caption = 'Часов по графику'
                        Width = 90
                        Visible = True
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$DESCRIPTION'
                        ReadOnly = False
                        Title.Caption = 'Описание'
                        Width = 83
                        Visible = True
                      end
                      item
                        Color = clWhite
                        Expanded = False
                        FieldName = 'USR$MODERNSALARY'
                        ReadOnly = False
                        Title.Caption = 'Современная зарплата'
                        Width = -1
                        Visible = False
                        DisplayFormat = '#.##'
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$COEFF'
                        ReadOnly = False
                        Title.Caption = 'Коэф-т'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$ISCHECK'
                        ReadOnly = False
                        Title.Caption = 'Вкл.'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$OLDSALARY'
                        ReadOnly = False
                        Title.Caption = 'Оклад'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$NEWSALARY'
                        ReadOnly = False
                        Title.Caption = 'Ставка'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'ID'
                        Title.Caption = 'Идентификатор'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'USR$DOCUMENTKEY'
                        ReadOnly = False
                        Title.Caption = 'Документ'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'Z_USR$DOCUMENTKEY_NUMBER'
                        ReadOnly = False
                        Title.Caption = 'Номер'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'Z_USR$DOCUMENTKEY_DOCUMENTDATE'
                        ReadOnly = False
                        Title.Caption = 'Дата'
                        Width = -1
                        Visible = False
                      end
                      item
                        Expanded = False
                        FieldName = 'Z_USR$DOCUMENTKEY_DOC2715260478'
                        ReadOnly = False
                        Title.Caption = 'Тип документа'
                        Width = -1
                        Visible = False
                      end>
                  end
                  object usrg_TBDock1: TTBDock
                    Tag = 0
                    Left = 0
                    Top = 0
                    Width = 811
                    Height = 26
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    AllowDrag = True
                    Background = nil
                    BackgroundOnToolbars = True
                    BoundLines = []
                    Color = clBtnFace
                    FixAlign = False
                    LimitToOneRow = False
                    PopupMenu = nil
                    Position = dpTop
                    Visible = True
                    object usrg_TBToolbar1: TTBToolbar
                      Tag = 0
                      Left = 0
                      Top = 0
                      Cursor = crDefault
                      HelpContext = 0
                      ActivateParent = True
                      Align = alNone
                      Anchors = [akLeft, akTop]
                      AutoResize = True
                      BorderStyle = bsSingle
                      Caption = 'tbDetail'
                      ChevronMoveItems = True
                      ChevronPriorityForNewItems = tbcpHighest
                      CloseButton = False
                      CloseButtonWhenDocked = False
                      Color = clBtnFace
                      DefaultDock = nil
                      DockableTo = [dpTop, dpBottom, dpLeft, dpRight]
                      DockMode = dmCannotFloatOrChangeDocks
                      DockPos = 0
                      DockRow = 0
                      DragHandleStyle = dhSingle
                      FloatingMode = fmOnTopOfParentForm
                      FloatingWidth = 0
                      FullSize = False
                      HideWhenInactive = True
                      Images = dmImages.il16x16
                      LinkSubitems = nil
                      MenuBar = False
                      Options = []
                      ParentFont = True
                      ParentShowHint = False
                      PopupMenu = nil
                      ProcessShortCuts = False
                      Resizable = True
                      ShowCaption = True
                      ShowHint = True
                      ShrinkMode = tbsmChevron
                      SmoothDrag = True
                      Stretch = True
                      SystemFont = True
                      TabOrder = 0
                      UpdateActions = True
                      UseLastDock = True
                      Visible = True
                      SavedAtRunTime = True
                      object usrg_TBItem3: TTBItem
                        Tag = 0
                        Action = usrg_actAvgSalaryNew
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = nil
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                      object usrg_TBItem4: TTBItem
                        Tag = 0
                        Action = usrg_actAvgSalaryEdit
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = nil
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                      object usrg_TBItem5: TTBItem
                        Tag = 0
                        Action = usrg_actAvgSalaryDelete
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = nil
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                      object usrg_TBItem6: TTBItem
                        Tag = 0
                        Action = nil
                        AutoCheck = False
                        Caption = 'Дубликат'
                        Checked = False
                        DisplayMode = nbdmDefault
                        Enabled = True
                        GroupIndex = 0
                        HelpContext = 0
                        Hint = 'Дубликат'
                        ImageIndex = 3
                        Images = nil
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                        ShortCut = 49237
                        Visible = False
                      end
                      object usrg_TBSeparatorItem2: TTBSeparatorItem
                        Tag = 0
                        Blank = False
                        Hint = ''
                        Visible = True
                      end
                      object usrg_TBItem7: TTBItem
                        Tag = 0
                        Action = usrg_actAvgGenerate
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = nil
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                    end
                  end
                end
                object usrg_TabSheet4: TTabSheet
                  Tag = 0
                  Cursor = crDefault
                  Hint = ''
                  HelpContext = 0
                  BorderWidth = 0
                  Caption = 'Структура больничного'
                  DragMode = dmManual
                  Enabled = True
                  Highlighted = False
                  ImageIndex = 0
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  TabVisible = False
                  object usrg_TBDock2: TTBDock
                    Tag = 0
                    Left = 0
                    Top = 0
                    Width = 811
                    Height = 26
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    AllowDrag = True
                    Background = nil
                    BackgroundOnToolbars = True
                    BoundLines = []
                    Color = clBtnFace
                    FixAlign = False
                    LimitToOneRow = False
                    PopupMenu = nil
                    Position = dpTop
                    Visible = True
                    object usrg_TBToolbar2: TTBToolbar
                      Tag = 0
                      Left = 0
                      Top = 0
                      Cursor = crDefault
                      HelpContext = 0
                      ActivateParent = True
                      Align = alNone
                      Anchors = [akLeft, akTop]
                      AutoResize = True
                      BorderStyle = bsSingle
                      Caption = 'usrg_TBToolbar2'
                      ChevronMoveItems = True
                      ChevronPriorityForNewItems = tbcpHighest
                      CloseButton = False
                      CloseButtonWhenDocked = False
                      Color = clBtnFace
                      DefaultDock = nil
                      DockableTo = [dpTop, dpBottom, dpLeft, dpRight]
                      DockMode = dmCannotFloatOrChangeDocks
                      DockPos = -1
                      DockRow = 0
                      DragHandleStyle = dhSingle
                      FloatingMode = fmOnTopOfParentForm
                      FloatingWidth = 0
                      FullSize = False
                      HideWhenInactive = True
                      Images = dmImages.il16x16
                      LinkSubitems = nil
                      MenuBar = False
                      Options = []
                      ParentFont = True
                      ParentShowHint = False
                      PopupMenu = nil
                      ProcessShortCuts = False
                      Resizable = True
                      ShowCaption = True
                      ShowHint = True
                      ShrinkMode = tbsmChevron
                      SmoothDrag = True
                      Stretch = True
                      SystemFont = True
                      TabOrder = 0
                      UpdateActions = True
                      UseLastDock = True
                      Visible = True
                      SavedAtRunTime = True
                      object usrg_TBItem8: TTBItem
                        Tag = 0
                        Action = usrg_actStrCalcOnUpdate
                        AutoCheck = False
                        DisplayMode = nbdmDefault
                        GroupIndex = 0
                        Images = dmImages.il16x16
                        InheritOptions = True
                        MaskOptions = []
                        Options = []
                        RadioItem = False
                      end
                    end
                  end
                  object usrg_grSickStr: TgsDBGrid
                    Tag = 0
                    Left = 0
                    Top = 26
                    Width = 811
                    Height = 320
                    Cursor = crDefault
                    Hint = ''
                    HelpContext = 0
                    TabStop = True
                    Align = alClient
                    Anchors = [akLeft, akTop, akRight, akBottom]
                    BorderStyle = bsSingle
                    Constraints.MaxHeight = 0
                    Constraints.MaxWidth = 0
                    Constraints.MinHeight = 0
                    Constraints.MinWidth = 0
                    Ctl3D = True
                    DataSource = usrg_dsSickStr
                    DefaultDrawing = True
                    DragCursor = crDrag
                    DragKind = dkDrag
                    DragMode = dmManual
                    Enabled = True
                    ImeMode = imDontCare
                    ImeName = ''
                    Options = [dgEditing, dgTitles, dgIndicator, dgColumnResize, dgColLines, dgTabs, dgConfirmDelete, dgCancelOnExit]
                    ParentBiDiMode = True
                    ParentColor = False
                    ParentCtl3D = False
                    ParentFont = True
                    ParentShowHint = True
                    PopupMenu = nil
                    ReadOnly = False
                    RefreshType = rtCloseOpen
                    TabOrder = 1
                    Visible = True
                    TableColor = clWindow
                    SelectedColor = clHighlight
                    TitleColor = clBtnFace
                    Striped = True
                    StripeOdd = 15201271
                    StripeEven = 14084071
                    InternalMenuKind = imkWithSeparator
                    Expands = <>
                    ExpandsActive = False
                    ExpandsSeparate = False
                    TitlesExpanding = False
                    Conditions = <>
                    ConditionsActive = False
                    CheckBox.DisplayField = ''
                    CheckBox.FieldName = ''
                    CheckBox.Visible = False
                    CheckBox.FirstColumn = False
                    ScaleColumns = True
                    MinColWidth = 40
                    ToolBar = nil
                    FinishDrawing = True
                    RememberPosition = True
                    SaveSettings = True
                    ShowTotals = True
                    ShowFooter = False
                    Columns = <
                      item
                        Expanded = False
                        FieldName = 'Дата'
                        Width = 95
                        Visible = True
                      end
                      item
                        Expanded = False
                        FieldName = 'Рабочий день'
                        Width = 86
                        Visible = True
                      end
                      item
                        Expanded = False
                        FieldName = 'Часы'
                        Width = 76
                        Visible = True
                      end
                      item
                        Expanded = False
                        FieldName = 'Процент'
                        Width = 534
                        Visible = True
                      end>
                  end
                end
              end
            end
          end
          object alBase: TActionList
            Left = 548
            Top = 8
            object actNew: TAction
            end
            object actHelp: TAction
            end
            object actSecurity: TAction
            end
            object actOk: TAction
            end
            object actCancel: TAction
            end
            object actNextRecord: TAction
            end
            object actPrevRecord: TAction
            end
            object actApply: TAction
            end
            object actFirstRecord: TAction
            end
            object actLastRecord: TAction
            end
            object actProperty: TAction
            end
            object actCopySettingsFromUser: TAction
            end
            object actAddToSetting: TAction
            end
            object actDocumentType: TAction
            end
            object actDistributeUserSettings: TAction
            end
            object actHistory: TAction
            end
            object actDetailNew: TAction
            end
            object actDetailEdit: TAction
            end
            object actDetailDelete: TAction
            end
            object actDetailDuplicate: TAction
            end
            object actDetailPrint: TAction
            end
            object actDetailCut: TAction
            end
            object actDetailCopy: TAction
            end
            object actDetailPaste: TAction
            end
            object actDetailMacro: TAction
            end
            object actDetailProp: TAction
            end
            object usrg_actAvgSalaryNew: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Добавить'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = 'Добавить'
              ImageIndex = 0
              ShortCut = 0
              Visible = True
            end
            object usrg_actAvgSalaryEdit: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Редактировать'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = 'Редактировать'
              ImageIndex = 1
              ShortCut = 0
              Visible = True
            end
            object usrg_actAvgSalaryDelete: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Удалить'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = 'Удалить'
              ImageIndex = 2
              ShortCut = 0
              Visible = True
            end
            object usrg_actStrGen: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'usrg_actStrGen'
              Checked = False
              Enabled = False
              HelpContext = 0
              Hint = ''
              ImageIndex = -1
              ShortCut = 0
              Visible = False
            end
            object usrg_actGenerate: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Рассчитать'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = 'Рассчитать'
              ImageIndex = 236
              ShortCut = 0
              Visible = True
            end
            object usrg_actAvgGenerate: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = ''
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = 'Рассчитать ср. заработок'
              ImageIndex = 236
              ShortCut = 0
              Visible = True
            end
            object usrg_actStrCalcOnUpdate: TgsAction
              Tag = 0
              Category = 'wage'
              Caption = 'Расчитать по структуре'
              Checked = False
              Enabled = False
              HelpContext = 0
              Hint = 'Расчитать по структуре'
              ImageIndex = 236
              ShortCut = 0
              Visible = True
            end
          end
          object dsgdcBase: TDataSource
            Left = 589
            Top = 7
          end
          object pm_dlgG: TPopupMenu
            Left = 472
            Top = 8
            object actSecurity1: TMenuItem
            end
            object actHistory1: TMenuItem
            end
            object N1: TMenuItem
            end
            object sepFirst: TMenuItem
            end
            object actNextRecord1: TMenuItem
            end
            object actPrevRecord1: TMenuItem
            end
            object actFirstRecord1: TMenuItem
            end
            object actLastRecord1: TMenuItem
            end
            object sepSecond: TMenuItem
            end
            object actApply1: TMenuItem
            end
            object sepThird: TMenuItem
            end
            object actProperty1: TMenuItem
            end
            object actCopySettings1: TMenuItem
            end
            object nAddToSetting1: TMenuItem
            end
          end
          object ibtrCommon: TIBTransaction
            Active = False
            Params.Strings = (
              'read_committed'
              'rec_version'
              'nowait')
            Left = 504
            Top = 8
          end
          object dsDetail: TDataSource
            Left = 293
            Top = 342
          end
          object gdMacrosMenu: TgdMacrosMenu
            Left = 441
            Top = 7
          end
          object usrg_gdcAvgSalaryStr: TgdcAttrUserDefined
            Tag = 0
            ForcedRefresh = False
            AutoCalcFields = True
            ObjectView = False
            AllowStreamedActive = False
            SubType = 'USR$WG_AVGSALARYSTR'
            MasterSource = dsgdcBase
            MasterField = 'id'
            DetailField = 'parent'
            SubSet = 'ByParent'
            SetTable = ''
            Active = True
            CachedUpdates = False
            ReadTransaction = gdcUserDocument.ibtrInternal
            Filtered = False
            Left = 644
            Top = 208
          end
          object usrg_dsAvgSalaryStr: TDataSource
            Tag = 0
            AutoEdit = True
            DataSet = usrg_gdcAvgSalaryStr
            Enabled = True
            Left = 675
            Top = 208
          end
          object usrg_dsSickStr: TDataSource
            Tag = 0
            AutoEdit = True
            Enabled = True
            Left = 769
            Top = 424
          end
        end
        
      EDITIONDATE: 2014-06-03T11:58:25+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147043669_974374174
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 520236114_2108071301
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_GetConstByIDAndDate"
      COMMENT: ~
      SCRIPT: | 
        option explicit
        function wg_GetConstByIDAndDate(ID, aDate)
          dim Creator, gdcConst
          set Creator = New TCreator
          set gdcConst = Creator.GetObject(nil, "TgdcConst", "")
          wg_GetConstByIDAndDate = gdcConst.QGetValueByIDAndDate(ID, aDate)
        end function
        
      DISPLAYSCRIPT: | 
        WG_GETCONSTBYIDANDDATE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QCAAAASUQCAAAASUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QFAAAA
        QURBVEUFAAAAQURBVEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVEZMUFI=
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2013-12-19T17:03:12+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147022904_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 520236114_2108071301
    Fields: 
      NAME: "gdc_dlgUserComplexDocument147022845_119619099"
      DESCRIPTION: ~
      PARENT: ~
      OBJECTTYPE: 0
      MACROSGROUPKEY: "147022905_119619099 Локальные макросы"
      REPORTGROUPKEY: "147022906_119619099 Отчеты(gdc_dlgUserComplexDocument147022845_119619099)"
      CLASSNAME: ""
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      SUBTYPE: ""
      EDITIONDATE: 2004-05-07T12:05:09+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 520236113_2108071301
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 520236114_2108071301
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_AvgSalaryStrGenerate_Sick_pl"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include pl_GetScriptIDByName
        '#include wg_GetConstByIDAndDate
        
        Function wg_AvgSalaryStrGenerate_Sick_pl(ByRef gdcObject, ByRef gdcSalary)
        '
          Dim T, T1, T2
          '
          Dim Creator
          '
          Dim PL, Ret, Pred, Tv, Append
          Dim PredFile, Scope
          'avg_wage
          Dim P_main, Tv_main, Q_main
          'avg_wage_sick_in
          Dim P_in, Tv_in, Q_in
          Dim EmplKey, FirstMoveKey, DateCalc, IsAvgWageDoc
          'avg_wage_run, avg_wage_sql
          Dim P_run, Tv_run, Q_run, P_sql, Tv_sql, Q_sql, P_kb
          Dim DateCalcFrom, DateCalcTo
          Dim PredicateName, Arity, SQL
          'avg_wage_out, avg_wage_sick_det
          Dim P_out, Tv_out, Q_out, P_det, Tv_det, Q_det
          Dim AvgWage, AvgWageRule
          Dim Period, PeriodRule, MonthDays, ExclDays, CalcDays, IsFullMonth, IsSpecMonth
          Dim Wage
          Dim TabDays, TabHoures, NormDays, NormHoures
        
          T1 = Timer
          wg_AvgSalaryStrGenerate_Sick_pl = False
        
          'init
          Set Creator = New TCreator
          Set PL = Creator.GetObject(nil, "TgsPLClient", "")
          Ret = PL.Initialise("")
          If Not Ret Then
            Exit Function
          End If
          'debug
          PL.Debug = True
          'load
          Ret = PL.LoadScript(pl_GetScriptIDByName("twg_avg_wage"))
          If Not Ret Then
            Exit Function
          End If
          Scope = "wg_avg_wage_sick"
          
          'params
          EmplKey = gdcObject.FieldByName("USR$EMPLKEY").AsInteger
          FirstMoveKey = gdcObject.FieldByName("USR$FIRSTMOVEKEY").AsInteger
          DateCalc = gdcObject.FieldByName("USR$FROM").AsDateTime
          IsAvgWageDoc = gdcObject.FieldByName("USR$REFERENCE").AsInteger
        
          'clean
          gdcSalary.First
          While Not gdcSalary.EOF
            gdcSalary.Delete
          Wend
          '
          gdcSalary.OwnerForm.Repaint
        
          'avg_wage_sick_in(EmplKey, FirstMoveKey, DateCalc, IsAvgWageDoc)
          P_in = "avg_wage_sick_in"
          Set Tv_in = Creator.GetObject(4, "TgsPLTermv", "")
          Set Q_in = Creator.GetObject(nil, "TgsPLQuery", "")
          Tv_in.PutInteger 0, EmplKey
          Tv_in.PutInteger 1, FirstMoveKey
          Tv_in.PutDate 2, DateCalc
          Tv_in.PutInteger 3, IsAvgWageDoc
          '
          Q_in.PredicateName = P_in
          Q_in.Termv = Tv_in
          '
          Q_in.OpenQuery
          If Q_in.EOF Then
            Exit Function
          End If
          Q_in.Close
        
          'avg_wage(Scope) - prepare data
          P_main = "avg_wage"
          Set Tv_main = Creator.GetObject(1, "TgsPLTermv", "")
          Set Q_main = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_main.PredicateName = P_main
          Q_main.Termv = Tv_main
          '
          Tv_main.PutAtom 0, Scope
          '
          Q_main.OpenQuery
          If Q_main.EOF Then
            Exit Function
          End If
          Q_main.Close
        
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          'avg_wage_run(Scope, EmplKey, FirstMoveKey, DateCalcFrom, DateCalcTo)
          P_run = "avg_wage_run"
          Set Tv_run = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_run = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_run.PredicateName = P_run
          Q_run.Termv = Tv_run
          'avg_wage_sql(Scope, EmplKey, FirstMoveKey, PredicateName, Arity, SQL)
          P_sql = "avg_wage_sql"
          P_kb = "avg_wage_kb"
          Set Tv_sql = Creator.GetObject(6, "TgsPLTermv", "")
          Set Q_sql = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_sql.PredicateName = P_sql
          Q_sql.Termv = Tv_sql
          '
          Tv_run.PutAtom 0, Scope
          '
          Q_run.OpenQuery
          If Q_run.EOF Then
            Exit Function
          End If
          '
          Append = False
          '
          Do Until Q_run.EOF
            EmplKey = Tv_run.ReadInteger(1)
            FirstMoveKey = Tv_run.ReadInteger(2)
            DateCalcFrom = Tv_run.ReadDate(3)
            DateCalcTo = Tv_run.ReadDate(4)
            '
            Tv_sql.Reset
            Tv_sql.PutAtom 0, Scope
            Tv_sql.PutInteger 1, EmplKey
            Tv_sql.PutInteger 2, FirstMoveKey
            Q_sql.OpenQuery
            '
            Do Until Q_sql.EOF
              PredicateName = Tv_sql.ReadAtom(3)
              Arity = Tv_sql.ReadInteger(4)
              SQL = Tv_sql.ReadString(5)
              '
              Ret =  PL.MakePredicatesOfSQLSelect _
                        (SQL, _
                        gdcBaseManager.ReadTransaction, _
                        PredicateName, PredicateName, Append)
              If Ret >= 0 Then
                 Ret = PL.Call(P_kb, Tv_sql)
              End If
              '
              Q_sql.NextSolution
            Loop
            Q_sql.Close
            '
            Append = True
            '
            Q_run.NextSolution
          Loop
          Q_run.Close
        
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          'avg_wage(Scope) - calc result
          Q_main.OpenQuery
          If Q_main.EOF Then
            Exit Function
          End If
          Q_main.Close
        
          'avg_wage_out(Scope, EmplKey, FirstMoveKey, AvgWage, AvgWageVariant)
          P_out = "avg_wage_out"
          Set Tv_out = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_out = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_out.PredicateName = P_out
          Q_out.Termv = Tv_out
          'avg_wage_sick_det(EmplKey, FirstMoveKey,
          '                  Period, Rule,
          '                  MonthDays, ExclDays, CalcDays, IsFullMonth, IsSpecMonth,
          '                  Wage,
          '                  TabDays, NormDays, TabHoures, NormHoures) :-
          P_det = "avg_wage_sick_det"
          Set Tv_det = Creator.GetObject(14, "TgsPLTermv", "")
          Set Q_det = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_det.PredicateName = P_det
          Q_det.Termv = Tv_det
          '
          Tv_out.PutAtom 0, Scope
          '
          Q_out.OpenQuery
          If Q_out.EOF Then
            Exit Function
          End If
          '
          Do Until Q_out.EOF
            EmplKey = Tv_out.ReadInteger(1)
            FirstMoveKey = Tv_out.ReadInteger(2)
            AvgWage = Tv_out.ReadFloat(3)
            AvgWageRule = Tv_out.ReadAtom(4)
            '
            Tv_det.Reset
            Tv_det.PutInteger 0, EmplKey
            Tv_det.PutInteger 1, FirstMoveKey
            Q_det.OpenQuery
            '
            Do Until Q_det.EOF
              Period = Tv_det.ReadDate(2)
              PeriodRule = Tv_det.ReadAtom(3)
              MonthDays = Tv_det.ReadInteger(4)
              ExclDays= Tv_det.ReadInteger(5)
              CalcDays = Tv_det.ReadInteger(6)
              IsFullMonth = Tv_det.ReadInteger(7)
              IsSpecMonth = Tv_det.ReadInteger(8)
              Wage = Tv_det.ReadFloat(9)
              TabDays = Tv_det.ReadFloat(10)
              NormDays = Tv_det.ReadFloat(11)
              TabHoures = Tv_det.ReadFloat(12)
              NormHoures = Tv_det.ReadFloat(13)
              '
              Select Case AvgWageRule
                Case "by_calc_days", "by_calc_days_doc"
                  Select Case PeriodRule
                    Case "by_cal_flex"
                      PeriodRule = "по табелю мастера"
                    Case "by_cal"
                      PeriodRule = "по табелю"
                    Case "by_orders"
                      PeriodRule = "по приказам"
                    Case Else
                      PeriodRule = ""
                  End Select
                  '
                  If Not IsFullMonth = 1 And IsSpecMonth = 1 Then
                    PeriodRule = "условно полный"
                  End If
                  '
                Case "by_budget"
                  PeriodRule = "от БПМ"
                Case "by_avg_wage"
                  PeriodRule = "по среднему заработку"
                Case "by_rate", "by_rate_doc"
                  PeriodRule = "от ставки"
                Case "by_not_full"
                  PeriodRule = "по не полным месяцам"
                Case Else
                  PeriodRule = ""
              End Select
              '
              gdcSalary.Append
              gdcSalary.FieldByName("USR$ISFULL").AsVariant = IsFullMonth
              gdcSalary.FieldByName("USR$DATE").AsVariant = Period
              gdcSalary.FieldByName("USR$CALCDAYS").AsVariant = CalcDays
              gdcSalary.FieldByName("USR$SALARY").AsVariant = Wage
              gdcSalary.FieldByName("USR$DOW").AsVariant = TabDays
              gdcSalary.FieldByName("USR$SCHEDULERDOW").AsVariant = NormDays
              gdcSalary.FieldByName("USR$HOW").AsVariant = TabHoures
              gdcSalary.FieldByName("USR$SCHEDULERHOW").AsVariant = NormHoures
              gdcSalary.FieldByName("USR$DESCRIPTION").AsVariant = PeriodRule
              gdcSalary.Post
              '
              Q_det.NextSolution
            Loop
            Q_det.Close
            '
            Q_out.NextSolution
          Loop
          Q_out.Close
          '
        
          gdcSalary.First
        
          If AvgWage > 0 then
            gdcObject.FieldByName("USR$AVGSUMMA").AsCurrency = AvgWage
          End If
          '
          Select Case AvgWageRule
            Case "by_budget"
              gdcObject.FieldByName("USR$CALCBYBUDGET").AsInteger = 1
            Case "by_rate"
              gdcObject.FieldByName("USR$THIRDMETHOD").AsInteger = 1
            Case "by_avg_wage"
              gdcObject.FieldByName("USR$AVERAGE").AsInteger = 1
          End select
          '
          gdcObject.Post
        
          wg_AvgSalaryStrGenerate_Sick_pl = True
          
          T2 = Timer
          T = T2 - T1
        '
        End function
        
      DISPLAYSCRIPT: | 
        WG_AVGSALARYSTRGENERATE_SICK_PL
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAR0RDT0JKRUNUCQAAAEdEQ09CSkVDVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAkAAABHRENTQUxBUlkJAAAAR0RDU0FMQVJZAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAEZOU1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-06-05T16:29:38+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "151158419_5956463 pl_GetScriptIDByName"
          - 
            ADDFUNCTIONKEY: "147043669_974374174 wg_GetConstByIDAndDate"
  - 
    Properties: 
      Class: "TgdcMacrosGroup"
      RUID: 147022905_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 520236114_2108071301
    Fields: 
      HASCHILDREN: 1
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      OBJECTPARENT: ~
      CLASSNAME: ""
      SUBTYPE: ""
      PARENT: ~
      NAME: "Локальные макросы"
      ISGLOBAL: 0
      DESCRIPTION: ~
      EDITIONDATE: 2004-05-07T12:05:09+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151515573_101633588
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_AvgSalaryStrGenerate_Sick"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_EmplMoveList
        
        function wg_AvgSalaryStrGenerate_Sick(ByRef Sender)
        '
        'Есть 3 варианта расчета, которые зависят от того в какой момент произошло изменение оклада (ставки):
        ' 1. Расчет стандартный:
        '    - последнее повышение было до периода расчета среднего заработка
        ' 2. Период расчета: с момента повышения зрп до начала нетрудоспособности
        '    - повышение попало с первого числа месяца расчета ср. заработка и до начала нетрудоспособности
        ' 3. Расчет стандартный, но сумма увеличивается на коэффициент повышения оклада (ставки)
        '    - повышение попало на период нетрудоспособности
          Sender.GetComponent("actApply").Execute
          'Сбрасываем кэш для Переменных
          set wg_Variable_ = Nothing
        
          set gdcObject = Sender.gdcObject
          set gdcAvgStr = Sender.FindComponent("usrg_gdcAvgSalaryStr")
          
          gdcObject.FieldByName("USR$CALCBYBUDGET").AsInteger = 0
        
          'Выключаем автоперерасчет среднего заработка
          gdcAvgStr.Tag = 1
          'Удалим старые значения
          gdcAvgStr.First
          while not gdcAvgStr.Eof
            gdcAvgStr.Delete
        '    gdcAvgStr.Next
          wend
          'Дата начала нетрудоспособности
          DateFrom = gdcObject.FieldByName("usr$from").AsDateTime
          'Первое число месяца больничного
          FirstDateBeginIll = DateSerial(Year(DateFrom), Month(DateFrom), 1)
          DateEnd = gdcObject.FieldByName("usr$dateend").AsDateTime
          AddDuration = DateDiff("m", DateFrom, DateEnd) + 1
        
          'Расчет по часам
          ByHourFlg = (gdcObject.FieldByName("usr$calcbyhour").AsInteger = 1)
        
          'Определим по карточке сотрудника (на дату окончания) прослеживать изменения оклада или ставки
          BySalaryFlg = False
          set EmplMoveList = wg_EmplMoveList.MoveCardList(gdcObject.FieldByName("usr$emplkey").AsInteger, Null)
          if Assigned(EmplMoveList) then
            set MoveCard = EmplMoveList.ExistMoveCardByDate(DateEnd)
            if Assigned(MoveCard) then
              BySalaryFlg = MoveCard.PayFormKey = gdcBaseManager.GetIDByRUIDString(wg_PayForm_Salary_RUID)
              if IsNull(BySalaryFlg) then BySalaryFlg = 0
            end if
          end if
          set AvgPeriodsObj = New Twg_AvgPeriods
          AvgPeriodsObj.EmplKey = gdcObject.FieldByName("usr$emplkey").AsInteger
          AvgPeriodsObj.FirstMoveKey = gdcObject.FieldByName("usr$firstmovekey").AsInteger
          Duration = gdcObject.FieldByName("usr$avgperiod").AsInteger
          AvgPeriodsObj.DateBegin = DateAdd("m", - Duration, FirstDateBeginIll)
          AvgPeriodsObj.Duration = Duration '+ AddDuration
          AvgPeriodsObj.FeeGroupKey = gdcObject.FieldByName("usr$feegroupkey").Value
          AvgPeriodsObj.BySalary = BySalaryFlg
          AvgPeriodsObj.ByStaffSalary = (gdcObject.FieldByName("usr$bystaffsalary").AsInteger = 1)
          AvgPeriodsObj.DateFrom = DateFrom
          AvgPeriodsObj.IsPregnancy = _
              (gdcObject.FieldByName("USR$ILLTYPEKEY").AsInteger = _
                 gdcBaseManager.GetIDByRUIDString(wg_SickType_Pregnancy_RUID))
        
          set AvgPeriodItems = AvgPeriodsObj.Items
          AvgPeriodItemsArr = AvgPeriodItems.Items
          'Дата последнего изменения
          LastDateChange = AvgPeriodsObj.LastDateChange
        
          NoMovingFlg = False
          ChangeOnIllPeriodFlg = False
          if IsNull(LastDateChange) then
            'Движений за период расчета и больничного не было
            LastDateChange = AvgPeriodsObj.DateBegin
            NoMovingFlg = True
          else
            ChangeOnIllPeriodFlg = (LastDateChange >= DateFrom and LastDateChange <= DateEnd)
            if ChangeOnIllPeriodFlg then _
              NoMovingFlg = True
          end if
        
          Coeff = 1
          NewSalary = 0
          AllSum = 0
          AllWorkDay = 0
          AllWorkHour = 0
          for i = AvgPeriodItems.Count - 1 to 0 step -1
            'Интересуют все месяцы, кроме тех, которые идут после начала больничного без движений
            if AvgPeriodItemsArr(i).DateChange <= FirstDateBeginIll or _
                (AvgPeriodItemsArr(i).DateChange > FirstDateBeginIll and AvgPeriodItemsArr(i).DateChange <= DateEnd and AvgPeriodItemsArr(i).IsChange) then
        
              'Подсчет коэффициента изменения оклада (ставки)
              if NewSalary > 0 and AvgPeriodItemsArr(i).DateChange < FirstDateBeginIll and Coeff = 1 then
                if AvgPeriodsObj.BySalary then
                  Coeff = NewSalary / AvgPeriodItemsArr(i).Salary
                else
                  Coeff = NewSalary / AvgPeriodItemsArr(i).FCRate
                end if
              end if
        
              gdcAvgStr.Insert
        '      gdcAvgStr.FieldByName("usr$ischeck").AsInteger = 0
              gdcAvgStr.FieldByName("usr$date").AsDateTime = AvgPeriodItemsArr(i).DateBegin
              gdcAvgStr.FieldByName("usr$salary").AsCurrency = AvgPeriodItemsArr(i).SumByGroup
              gdcAvgStr.FieldByName("usr$oldsalary").AsCurrency = AvgPeriodItemsArr(i).Salary
              gdcAvgStr.FieldByName("usr$newsalary").AsCurrency = AvgPeriodItemsArr(i).FCRate
              gdcAvgStr.FieldByName("usr$dow").AsCurrency = AvgPeriodItemsArr(i).WorkDays
              gdcAvgStr.FieldByName("usr$how").AsCurrency = AvgPeriodItemsArr(i).WorkHours
              gdcAvgStr.FieldByName("usr$schedulerdow").AsCurrency = AvgPeriodItemsArr(i).SchedulerDays
              gdcAvgStr.FieldByName("usr$schedulerhow").AsCurrency = AvgPeriodItemsArr(i).SchedulerHours
              gdcAvgStr.FieldByName("usr$coeff").AsCurrency = Coeff
              gdcAvgStr.FieldByName("usr$description").AsString = AvgPeriodItemsArr(i).Description
        
              ' added 19.07.13
              ' если декретный или дата > 11.07.13, то признак во всех периодах =1
              if DateFrom >= CDate("11.07.2013") or AvgPeriodsObj.IsPregnancy then
                gdcAvgStr.FieldByName("usr$ischeck").AsInteger = 1
              else
                gdcAvgStr.FieldByName("usr$ischeck").AsInteger = 0
              end if
              ' end added
        
        
        '      if (NoMovingFlg and AvgPeriodItemsArr(i).DateChange < FirstDateBeginIll) or _
        '          (AvgPeriodItemsArr(i).DateChange >= LastDateChange) then
        '        gdcAvgStr.FieldByName("usr$ischeck").AsInteger = 1
        '      end if
        
              if AvgPeriodItemsArr(i).DateChange < FirstDateBeginIll then
              'Периоды, до начала месяца болезни
                if AvgPeriodItemsArr(i).DateChange >= LastDateChange or LastDateChange >= DateFrom then
                  gdcAvgStr.FieldByName("usr$ischeck").AsInteger = 1
                end if
              else
                if AvgPeriodItemsArr(i).DateChange < DateFrom and AvgPeriodItemsArr(i).DateChange >= LastDateChange and (not NoMovingFlg) then
                  gdcAvgStr.FieldByName("usr$ischeck").AsInteger = 1
                end if
              end if
        
        '      IsCheck = AvgPeriodItemsArr(i).DateChange < FirstDateBeginIll
        
              if ChangeOnIllPeriodFlg and AvgPeriodItemsArr(i).DateChange = LastDateChange then
               'Изменение попадает в период болезни, т.е. сумма будет проиндексирована
                if AvgPeriodsObj.BySalary then
                  NewSalary = AvgPeriodItemsArr(i).Salary
                else
                  NewSalary = AvgPeriodItemsArr(i).FCRate
                end if
              end if
              if gdcAvgStr.FieldByName("usr$ischeck").AsInteger = 1 then
                AllSum = AllSum + gdcAvgStr.FieldByName("usr$salary").AsCurrency
                AllWorkDay = AllWorkDay + gdcAvgStr.FieldByName("usr$dow").AsCurrency
                AllWorkHour = AllWorkHour + gdcAvgStr.FieldByName("usr$how").AsCurrency
              end if
              gdcAvgStr.Post
            end if
          next
          AvgSum = 0
          if ByHourFlg then
            AllWorkPoint = AllWorkHour
          else
            AllWorkPoint = AllWorkDay
          end if
          if AllWorkPoint > 0 then
            AvgSum = AllSum / AllWorkPoint
          end if
          gdcAvgStr.Tag = 0
        
          gdcObject.FieldByName("usr$thirdmethod").AsInteger = 0
          if gdcObject.OwnerForm.Name = "gdc_dlgUserComplexDocument147022845_119619099" and (gdcObject.FieldByName("usr$reference").AsInteger = 1 or gdcAvgStr.RecordCount = 6) then
            dim q, Creator
            set Creator = new TCreator
            set q = Creator.GetObject(null, "TIBSQL", "")
            q.Transaction = gdcObject.Transaction
        '    q.SQL.Text = _
        '    "SELECT * " & _
        '    "FROM USR$WG_AVGSALARYSTR " & _
        '    "WHERE " & _
        '    "  USR$DOCUMENTKEY = :parent " & _
        '    " AND " & _
        '    "  EXTRACT(DAY FROM DATEADD(DAY, -1, CAST(EXTRACT(YEAR FROM USR$DATE)||'.'||(EXTRACT(MONTH FROM USR$DATE)+1)||'.01' AS DATE))) = USR$DOW "
        '    q.ParamByName("parent").AsInteger = gdcObject.ID
        '    q.ExecQuery
        
            q.SQL.Text = _
                "EXECUTE BLOCK( " & _
                "  PARENT INTEGER = :PARENT) " & _
                "RETURNS " & _
                "( " & _
                "  OK INTEGER " & _
                ") " & _
                " AS " & _
                "DECLARE VARIABLE EMPLKEY INTEGER; " & _
                "DECLARE VARIABLE FDATE DATE; " & _
                "DECLARE VARIABLE DOW INTEGER; " & _
                "DECLARE VARIABLE LEAVEDAY INTEGER; " & _
                "DECLARE VARIABLE MONTHDAY INTEGER; " & _
                "DECLARE VARIABLE TempM INTEGER; " & _
                "DECLARE VARIABLE TempY INTEGER; " & _
                "DECLARE VARIABLE TempNextDate DATE; " & _
                "BEGIN " & _
                "  OK = 0; " & _
                "  FOR " & _
                "    SELECT LIST.USR$EMPLKEY, STR.USR$DATE, STR.USR$DOW " & _
                "    FROM USR$WG_AVGSALARYSTR STR " & _
                "    JOIN USR$WG_SICKLIST LIST ON LIST.DOCUMENTKEY = STR.USR$DOCUMENTKEY " & _
                "    WHERE " & _
                "      USR$DOCUMENTKEY = :parent " & _
                "    INTO :EMPLKEY, :FDATE, :DOW " & _
                "  DO " & _
                "  BEGIN " & _
                "   " & _
                "    TempM = EXTRACT(MONTH FROM CAST(:FDATE AS DATE)); " & _
                "    TempY = EXTRACT(YEAR FROM CAST(:FDATE AS DATE)); " & _
                "    TempM = TempM + 1; " & _
                "    IF (TempM = 13) THEN " & _
                "    BEGIN " & _
                "      TempY = TempY + 1; " & _
                "      TempM = 1; " & _
                "    END " & _
                "    TempNextDate = CAST('01.' ||  RIGHT('0' || TempM, 2) || '.' || TempY  AS DATE); " & _
                "    MONTHDAY = EXTRACT(DAY FROM( DATEADD(DAY, -1, TempNextDate))); " & _
                "    SELECT " & _
                "      SUM(CASE " & _
                "      WHEN EXTRACT(MONTH FROM U.USR$DATEBEGIN) = EXTRACT(MONTH FROM U.USR$DATEEND) THEN U.USR$DATEEND - U.USR$DATEBEGIN + 1 " & _
                "      WHEN EXTRACT(MONTH FROM U.USR$DATEBEGIN) < EXTRACT(MONTH FROM U.USR$DATEEND) AND EXTRACT(MONTH FROM U.USR$DATEBEGIN) = EXTRACT(MONTH FROM CAST(:FDATE AS DATE)) THEN DATEADD(DAY, -1, :TempNextDate) - U.USR$DATEBEGIN + 1 " & _
                "      WHEN EXTRACT(MONTH FROM U.USR$DATEBEGIN) < EXTRACT(MONTH FROM U.USR$DATEEND) AND EXTRACT(MONTH FROM U.USR$DATEEND) = EXTRACT(MONTH FROM CAST(:FDATE AS DATE)) THEN U.USR$DATEEND - :FDATE + 1 " & _
                "      END) AS LEAVEDAY " & _
                "    FROM GD_DOCUMENT Z " & _
                "    JOIN USR$WG_LEAVEDOCLINE U ON Z.ID = U.DOCUMENTKEY " & _
                "    WHERE " & _
                "      Z.DOCUMENTTYPEKEY = 328606656 " & _
                "     AND " & _
                "      U.USR$EMPLKEY = :EMPLKEY " & _
                "     AND " & _
                "      EXTRACT(MONTH FROM CAST(:FDATE AS DATE)) BETWEEN EXTRACT(MONTH FROM U.USR$DATEBEGIN) AND EXTRACT(MONTH FROM U.USR$DATEEND) " & _
                "    INTO :LEAVEDAY; " & _
                "    IF (LEAVEDAY IS NULL) THEN " & _
                "        LEAVEDAY = 0; " & _
                " " & _
                " " & _
                "    IF (DOW + LEAVEDAY = MONTHDAY) THEN " & _
                "        OK = OK + 1; " & _
                "  END " & _
                "  SUSPEND; " & _
                "END "
        
        
            q.ParamByName("parent").AsInteger = gdcObject.ID
            q.ExecQuery
        
            if q.FieldByName("OK").AsInteger = 0 or (gdcObject.FieldByName("usr$reference").AsInteger = 1) then
              q.Close
              q.SQL.Text = _
              "SELECT FIRST 1 COALESCE(ML.USR$THOURRATE, 0) AS RATE " & _
              "FROM USR$WG_TOTAL T " & _
              "JOIN USR$WG_MOVEMENTLINE ML ON ML.USR$DATEBEGIN <= T.USR$DATEBEGIN " & _
              "WHERE " & _
              "  T.DOCUMENTKEY = :totalkey " & _
              "  AND ML.USR$EMPLKEY = :emplkey " & _
              "ORDER BY ML.USR$DATEBEGIN DESC "
              q.ParamByName("totalkey").AsInteger = gdcObject.FieldByName("USR$TOTALDOCKEY").AsInteger
              q.ParamByName("emplkey").AsInteger = gdcObject.FieldByName("USR$EMPLKEY").AsInteger
              q.ExecQuery
        
              gdcObject.FieldByName("usr$thirdmethod").AsInteger = 1
        
              if not q.EOF then
                AvgSum = 8*q.FieldByName("RATE").AsCurrency
              else
                AvgSum = 0
              end if
            end if
          end if
          gdcObject.FieldByName("usr$avgsumma").AsCurrency = Round(AvgSum)
        end function
        
        
      DISPLAYSCRIPT: | 
        WG_AVGSALARYSTRGENERATE_SICK
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-04-03T17:26:34+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147743985_374487969 wg_EmplMoveList"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 520236116_2108071301
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 520236114_2108071301
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      MODULE: "MACROS"
      LANGUAGE: "VBScript"
      NAME: "Macros_AvgSalaryStrGenerate_Sick"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include wg_AvgSalaryStrGenerate_Sick
        
        Sub Macros_AvgSalaryStrGenerate_Sick(OwnerForm)
        '
          call wg_AvgSalaryStrGenerate_Sick(OwnerForm)
        '
        End Sub
        
      DISPLAYSCRIPT: | 
        MACROS_AVGSALARYSTRGENERATE_SICK
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147022904_119619099 gdc_dlgUserComplexDocument147022845_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNURkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-04-03T17:00:17+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "151515573_101633588 wg_AvgSalaryStrGenerate_Sick"
  - 
    Properties: 
      Class: "TgdcMacros"
      RUID: 520236114_2108071301
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      MACROSGROUPKEY: "147022905_119619099 Локальные макросы"
      FUNCTIONKEY: "520236116_2108071301 Macros_AvgSalaryStrGenerate_Sick"
      NAME: "Расчет структуры ср. заработка"
      SERVERKEY: ~
      ISLOCALEXECUTE: 0
      ISREBUILD: 0
      EXECUTEDATE: ~
      SHORTCUT: 0
      EDITIONDATE: 2014-04-03T15:20:01+03:00
      DISPLAYINMENU: 1
      RUNONLOGIN: 0
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 528605649_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 528605678_99701464
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_AvgSalaryDetailGenerate_Sick_pl"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include pl_GetScriptIDByName
        
        Function wg_AvgSalaryDetailGenerate_Sick_pl(ByRef gdcObject, ByRef gdcDetail)
        '
          Dim Creator
          '
          Dim PL, Ret, Pred, Tv, Append
          Dim PredFile
          'struct_sick_sql
          Dim P_sql, Tv_sql, Q_sql
          Dim EmplKey, FirstMoveKey, DateBegin, DateEnd, PredicateName, Arity, SQL
          'struct_sick_in
          Dim P_in, Tv_in, Q_in
          Dim DateCalc, AvgWage, CalcType, BudgetOption, IsPregnancy, IllType
          'struct_sick_out
          Dim P_out, Tv_out, Q_out
          Dim AccDate, IncludeDate, Percent, DOI, HOI, Summa
        
          wg_AvgSalaryDetailGenerate_Sick_pl = False
        
          'init
          Set Creator = New TCreator
          Set PL = Creator.GetObject(nil, "TgsPLClient", "")
          Ret = PL.Initialise("")
          If Not Ret Then
            Exit Function
          End If
          'debug
          PL.Debug = True
          'load
          Ret = PL.LoadScript(pl_GetScriptIDByName("twg_avg_wage"))
          If Not Ret Then
            Exit Function
          End If
        
          'params
          EmplKey = gdcObject.FieldByName("USR$EMPLKEY").AsInteger
          FirstMoveKey = gdcObject.FieldByName("USR$FIRSTMOVEKEY").AsInteger
          DateCalc = gdcObject.FieldByName("USR$FROM").AsDateTime
          DateBegin = gdcObject.FieldByName("USR$DATEBEGIN").AsDateTime
          DateEnd = gdcObject.FieldByName("USR$DATEEND").AsDateTime
          AvgWage = gdcObject.FieldByName("USR$AVGSUMMA").AsCurrency
          BudgetOption = gdcObject.FieldByName("USR$CALCBYBUDGET").AsInteger
          IsPregnancy = abs(gdcObject.FieldByName("USR$ILLTYPEKEY").AsInteger = _
                 gdcBaseManager.GetIDByRUIDString(wg_SickType_Pregnancy_RUID))
          IllType = gdcObject.FieldByName("USR$ILLTYPEKEY").AsInteger
          
          Dim IBSQL
          '
          Set IBSQL = Creator.GetObject(nil, "TIBSQL", "")
          IBSQL.Transaction = gdcBaseManager.ReadTransaction
          IBSQL.SQL.Text = _
              "SELECT " & _
              "  it.USR$CALCTYPE " & _
              "FROM " & _
              "  USR$WG_ILLTYPE it " & _
              "WHERE " & _
              "  it.ID = :ILLTYPEKEY "
          IBSQL.ParamByName("ILLTYPEKEY").AsInteger = IllType
          IBSQL.ExecQuery
          '
          CalcType = IBSQL.FieldByName("USR$CALCTYPE").AsInteger
          '
          IBSQL.Close
        
          'clean
          gdcDetail.First
          While Not gdcDetail.EOF
            gdcDetail.Delete
          Wend
          '
          gdcDetail.OwnerForm.Repaint
        
          'struct_sick_sql(EmplKey, FirstMoveKey, DateBegin, DateEnd, PredicateName, Arity, SQL)
          P_sql = "struct_sick_sql"
          Set Tv_sql = Creator.GetObject(7, "TgsPLTermv", "")
          Set Q_sql = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_sql.PredicateName = P_sql
          Q_sql.Termv = Tv_sql
          '
          Append = False
          '
          Tv_sql.PutInteger 0, EmplKey
          Tv_sql.PutInteger 1, FirstMoveKey
          Tv_sql.PutDate 2, DateBegin
          Tv_sql.PutDate 3, DateEnd
          '
          Q_sql.OpenQuery
          If Q_sql.EOF Then
            Exit Function
          End If
          '
          Do Until Q_sql.EOF
            PredicateName = Tv_sql.ReadAtom(4)
            Arity = Tv_sql.ReadInteger(5)
            SQL = Tv_sql.ReadString(6)
            '
            Ret =  PL.MakePredicatesOfSQLSelect _
                      (SQL, _
                      gdcBaseManager.ReadTransaction, _
                      PredicateName, PredicateName, Append)
            '
            Q_sql.NextSolution
          Loop
          Q_sql.Close
          
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          'struct_sick_in(DateCalc, DateBegin, DateEnd, AvgWage, CalcType, BudgetOption, IsPregnancy, IllType)
          P_in = "struct_sick_in"
          Set Tv_in = Creator.GetObject(8, "TgsPLTermv", "")
          Set Q_in = Creator.GetObject(nil, "TgsPLQuery", "")
          Tv_in.PutDate 0, DateCalc
          Tv_in.PutDate 1, DateBegin
          Tv_in.PutDate 2, DateEnd
          Tv_in.PutFloat 3, AvgWage
          Tv_in.PutInteger 4, CalcType
          Tv_in.PutInteger 5, BudgetOption
          Tv_in.PutInteger 6, IsPregnancy
          Tv_in.PutInteger 7, IllType
          '
          Q_in.PredicateName = P_in
          Q_in.Termv = Tv_in
          '
          Q_in.OpenQuery
          If Q_in.EOF Then
            Exit Function
          End If
          Q_in.Close
        
          'struct_sick_out(AccDate, IncludeDate, Percent, DOI, HOI, Summa, DateBegin, DateEnd)
          P_out = "struct_sick_out"
          Set Tv_out = Creator.GetObject(8, "TgsPLTermv", "")
          Set Q_out = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_out.PredicateName = P_out
          Q_out.Termv = Tv_out
          Q_out.OpenQuery
          If Q_out.EOF Then
            Exit Function
          End If
          '
          Do Until Q_out.EOF
            '
            AccDate = Tv_out.ReadDate(0)
            IncludeDate = Tv_out.ReadDate(1)
            Percent = Tv_out.ReadFloat(2)
            DOI = Tv_out.ReadFloat(3)
            HOI = Tv_out.ReadFloat(4)
            Summa = Tv_out.ReadFloat(5)
            DateBegin = Tv_out.ReadDate(6)
            DateEnd = Tv_out.ReadDate(7)
            '
            gdcDetail.Append
            gdcDetail.FieldByName("USR$ACCDATE").AsVariant = AccDate
            gdcDetail.FieldByName("USR$INCLUDEDATE").AsVariant = IncludeDate
            gdcDetail.FieldByName("USR$PERCENT").AsVariant = Percent
            gdcDetail.FieldByName("USR$DOI").AsVariant = DOI
            gdcDetail.FieldByName("USR$HOI").AsVariant = HOI
            gdcDetail.FieldByName("USR$SUMMA").AsVariant = Summa
            gdcDetail.FieldByName("USR$DATEBEGIN").AsVariant = DateBegin
            gdcDetail.FieldByName("USR$DATEEND").AsVariant = DateEnd
            gdcDetail.Post
            '
            Q_out.NextSolution
          Loop
          Q_out.Close
          '
          gdcDetail.First
        
          wg_AvgSalaryDetailGenerate_Sick_pl = True
        '
        End function
        
      DISPLAYSCRIPT: | 
        WG_AVGSALARYDETAILGENERATE_SICK_PL
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAR0RDT0JKRUNUCQAAAEdEQ09CSkVDVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAkAAABHRENERVRBSUwJAAAAR0RDREVUQUlMAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAEZOU1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-06-05T11:04:14+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "151158419_5956463 pl_GetScriptIDByName"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151515700_101633588
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_AvgSalaryDetailGenerate_Sick"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_LastDayInMonth
        sub wg_AvgSalaryDetailGenerate_Sick(ByVal Sender)
          if not Sender.OwnerForm.gdcObject.VariableExists("DontRecalcLine") then
            Sender.OwnerForm.gdcObject.AddVariableItem("DontRecalcLine")
          end if
          Sender.OwnerForm.gdcObject.Variables("DontRecalcLine") = True
          'Сбрасываем кэш для Переменных
          set wg_Variable_ = Nothing
        
          ' added 18.07.13   FromDate checking
          if gdcBaseManager.GetIDByRUIDString(wg_SickType_Pregnancy_RUID) = _
             Sender.OwnerForm.gdcObject.FieldByName("USR$ILLTYPEKEY").AsInteger or _
             Sender.OwnerForm.gdcObject.FieldByName("USR$FROM").AsDateTime >= CDate("11.07.2013")   then
            if Sender.OwnerForm.gdcObject.FieldByName("USR$CALCBYBUDGET").AsInteger = 0 then
              dim gdcAvgStr, MonthNum
              set gdcAvgStr = Sender.OwnerForm.GetComponent("usrg_gdcAvgSalaryStr")
              gdcAvgStr.First
              while not gdcAvgStr.EoF
                gdcAvgStr.Next
              wend
              MonthNum = gdcAvgStr.RecNo
              if MonthNum < Sender.OwnerForm.gdcObject.FieldByName("USR$AVGPERIOD").AsInteger then
                if Application.MessageBox("Позиций среднего заработка " & MonthNum & _
                  " , это меньше, чем период формирования ( " & _
                  Sender.OwnerForm.gdcObject.FieldByName("USR$AVGPERIOD").AsInteger& " )." & VBCR & _
                  "Рассчитать средний заработок как 50% от бюджета прожиточного минимума?", _
                  "Внимание", vbSystemModal + vbYesNo) = vbYes then
                  if not (Sender.OwnerForm.gdcObject.State = dsEdit or Sender.OwnerForm.gdcObject.State = dsInsert) then
                    Sender.OwnerForm.gdcObject.Edit
                  end if
                  Sender.OwnerForm.gdcObject.FieldByName("USR$CALCBYBUDGET").AsInteger = 1
                  Sender.OwnerForm.gdcObject.Post
                end if
              end if
            end if
          end if
          Sender.OwnerForm.GetComponent("ibgrDetail").SetFocus
        
          set wg_Structure = Sender.OwnerForm.Objects("Structure")
          call wg_Structure.CreateSickStructure(Sender.OwnerForm)
        
          Sender.OwnerForm.gdcObject.Variables("DontRecalcLine") = False
        end sub
        
      DISPLAYSCRIPT: | 
        WG_AVGSALARYDETAILGENERATE_SICK
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-04-03T17:45:34+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147022228_119619099 wg_LastDayInMonth"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 528605680_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 528605678_99701464
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      MODULE: "MACROS"
      LANGUAGE: "VBScript"
      NAME: "Macros_AvgSalaryDetailGenerate_Sick"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include wg_AvgSalaryDetailGenerate_Sick
        
        Sub Macros_AvgSalaryDetailGenerate_Sick(OwnerForm)
        '
          Call wg_AvgSalaryDetailGenerate_Sick(OwnerForm)
        '
        End Sub
        
      DISPLAYSCRIPT: | 
        MACROS_AVGSALARYDETAILGENERATE_SICK
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147022904_119619099 gdc_dlgUserComplexDocument147022845_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNURkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-04-03T17:43:26+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "151515700_101633588 wg_AvgSalaryDetailGenerate_Sick"
  - 
    Properties: 
      Class: "TgdcMacros"
      RUID: 528605678_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      MACROSGROUPKEY: "147022905_119619099 Локальные макросы"
      FUNCTIONKEY: "528605680_99701464 Macros_AvgSalaryDetailGenerate_Sick"
      NAME: "Расчет структуры больничного"
      SERVERKEY: ~
      ISLOCALEXECUTE: 0
      ISREBUILD: 0
      EXECUTEDATE: ~
      SHORTCUT: 0
      EDITIONDATE: 2014-04-03T17:43:26+03:00
      DISPLAYINMENU: 1
      RUNONLOGIN: 0
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147489068_336327731
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147489069_336327731
    Fields: 
      NAME: "usrg_actAvgGenerate"
      DESCRIPTION: ~
      PARENT: "147022904_119619099 gdc_dlgUserComplexDocument147022845_119619099"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_actAvgGenerate"
      SUBTYPE: ""
      EDITIONDATE: 2005-03-18T12:54:01+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147489071_336327731
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147489069_336327731
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_actAvgGenerateOnExecute"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include wg_AvgSalaryStrGenerate_Sick_pl
        '#include wg_Prolog
        
        Sub usrg_actAvgGenerateOnExecute(ByVal Sender)
        '
          Dim gdcObject, gdcSalary, Ret
        
          Sender.OwnerForm.GetComponent("actApply").Execute
        
          Call wg_Prolog.SyncField(Sender.OwnerForm.gdcObject, True)
        
          Set gdcObject = Sender.OwnerForm.gdcObject
          '
          gdcObject.FieldByName("USR$AVGSUMMA").Clear
          gdcObject.FieldByName("USR$THIRDMETHOD").AsInteger = 0
          gdcObject.FieldByName("USR$CALCBYBUDGET").AsInteger = 0
          gdcObject.FieldByName("USR$AVERAGE").AsInteger = 0
          
          Set gdcSalary = Sender.OwnerForm.GetComponent("usrg_gdcAvgSalaryStr")
        
          Ret = wg_AvgSalaryStrGenerate_Sick_pl(gdcObject, gdcSalary)
        
          Call wg_Prolog.SyncField(Sender.OwnerForm.gdcObject, False)
        '
        End Sub
        
        
        
        
      DISPLAYSCRIPT: | 
        USRG_ACTAVGGENERATEONEXECUTE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONEXECUTE"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147022904_119619099 gdc_dlgUserComplexDocument147022845_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-05-05T12:05:20+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "520236113_2108071301 wg_AvgSalaryStrGenerate_Sick_pl"
          - 
            ADDFUNCTIONKEY: "528612032_99701464 wg_Prolog"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147489069_336327731
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_actAvgGenerate"
      PARENTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      OBJECTKEY: "147489068_336327731 gdc_dlgUserComplexDocument147022845_119619099\\usrg_actAvgGenerate"
      EVENTNAME: "ONEXECUTE"
      FUNCTIONKEY: "147489071_336327731 usrg_actAvgGenerateOnExecute"
      DISABLE: ~
      EDITIONDATE: 2014-05-05T12:05:20+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147015827_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147368562_274788016
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_dayInMonth"
      COMMENT: ~
      SCRIPT: | 
        option explicit
        function wg_dayInMonth(ByVal TheDate)
        ' возвращает количество дней в месяце
        
          wg_dayInMonth = Day(DateSerial(Year(TheDate), Month(TheDate) + 1, 1) -1)
          
        end function
        
      DISPLAYSCRIPT: | 
        WG_DAYINMONTH
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QHAAAAVEhFREFURQcAAABUSEVEQVRFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZO
        U1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2005-03-24T10:25:24+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147022228_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147368562_274788016
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_LastDayInMonth"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_dayInMonth
        function wg_LastDayInMonth(ByVal TheDate)
        ' проверяет, является ли дата TheDate последним днем месяца
        
          D = Day(TheDate)
          wg_LastDayInMonth = (D = wg_DayInMonth(TheDate))
        
        end function
        
      DISPLAYSCRIPT: | 
        WG_LASTDAYINMONTH
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QHAAAAVEhFREFURQcAAABUSEVEQVRFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZO
        U1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2005-03-24T10:25:35+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147015827_119619099 wg_dayInMonth"
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147368561_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147368562_274788016
    Fields: 
      NAME: "usrg_actGenerate"
      DESCRIPTION: ~
      PARENT: "147022904_119619099 gdc_dlgUserComplexDocument147022845_119619099"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_actGenerate"
      SUBTYPE: ""
      EDITIONDATE: 2005-01-26T11:39:41+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147368564_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147368562_274788016
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_actGenerateOnExecute"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include wg_AvgSalaryDetailGenerate_Sick_pl
        
        Sub usrg_actGenerateOnExecute(ByVal Sender)
        '
          Dim gdcObject, gdcDetail, Ret
        
          If Not Sender.OwnerForm.gdcObject.VariableExists("DontRecalcLine") Then
            Sender.OwnerForm.gdcObject.AddVariableItem("DontRecalcLine")
          End If
          '
          Sender.OwnerForm.gdcObject.Variables("DontRecalcLine") = True
        
          Sender.OwnerForm.GetComponent("actApply").Execute
        
          Set gdcObject = Sender.OwnerForm.gdcObject
          Set gdcDetail = Sender.OwnerForm.gdcDetailObject
        
          Ret = wg_AvgSalaryDetailGenerate_Sick_pl(gdcObject, gdcDetail)
        
          Sender.OwnerForm.gdcObject.Variables("DontRecalcLine") = False
        '
        end sub
        
      DISPLAYSCRIPT: | 
        USRG_ACTGENERATEONEXECUTE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONEXECUTE"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147022904_119619099 gdc_dlgUserComplexDocument147022845_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-04-03T17:42:33+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "528605649_99701464 wg_AvgSalaryDetailGenerate_Sick_pl"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147368562_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_actGenerate"
      PARENTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      OBJECTKEY: "147368561_274788016 gdc_dlgUserComplexDocument147022845_119619099\\usrg_actGenerate"
      EVENTNAME: "ONEXECUTE"
      FUNCTIONKEY: "147368564_274788016 usrg_actGenerateOnExecute"
      DISABLE: ~
      EDITIONDATE: 2014-04-03T17:42:33+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147302770_531940465
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147489065_336327731
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_SetSilkAvgSum"
      COMMENT: ~
      SCRIPT: | 
        function wg_SetSilkAvgSum(ByRef DataSet)
          'Ф-ция расчитывает и записывает средний заработок
          'Нужно получить (только для записей включенных в расчет):
          'сумму, кол-во дней, кол-во часов
          if DataSet.Tag <> 1 then
            AvgSumma = 0
            if Assigned(DataSet.MasterSource) then
              call gdcBaseManager.ExecSingleQueryResult(_
                "SELECT SUM(usr$modernsalary), SUM(usr$dow), SUM(usr$how) " & _
                "FROM USR$WG_AVGSALARYSTR " & _
                "WHERE usr$ischeck = 1 and usr$documentkey = :masterkey ", _
                  DataSet.FieldByName("usr$documentkey").AsInteger, Result, DataSet.ReadTransaction)
              if not IsEmpty(Result) then
                AllSum = Result(0,0)
                AllWDay = Result(1,0)
                AllWHour = Result(2,0)
                if DataSet.MasterSource.DataSet.FieldByName("usr$calcbyhour").AsInteger = 0 then
                  WPoint = AllWDay
                else
                  WPoint = AllWHour
                end if
                if WPoint > 0 then
                  AvgSumma = AllSum / WPoint
                end if
              end if
            end if
            if DataSet.MasterSource.DataSet.State = dsBrowse then
              DataSet.MasterSource.DataSet.Edit
            end if
            DataSet.MasterSource.DataSet.FieldByName("usr$avgsumma").AsCurrency = Round(AvgSumma)
            
          end if
        end function
        
      DISPLAYSCRIPT: | 
        WG_SETSILKAVGSUM
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QHAAAAREFUQVNFVAcAAABEQVRBU0VUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZO
        U1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2013-08-21T14:36:43+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147368583_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147489065_336327731
    Fields: 
      NAME: "usrg_gdcAvgSalaryStr"
      DESCRIPTION: ~
      PARENT: "147022904_119619099 gdc_dlgUserComplexDocument147022845_119619099"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_gdcAvgSalaryStr"
      SUBTYPE: ""
      EDITIONDATE: 2005-01-26T12:28:17+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147489067_336327731
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147489065_336327731
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_gdcAvgSalaryStrAfterDelete"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_GetAvgSalarySum
        '#include wg_EnableFieldChange
        '#include wg_SetSilkAvgSum
        option explicit
        sub usrg_gdcAvgSalaryStrAfterDelete(ByVal DataSet)
          Exit Sub 'отключено
        ' пересчитываем сумму среднего заработка
          wg_SetSilkAvgSum(DataSet)
        '  if wg_EnabledFieldChange(DataSet, "AVGSALARYCALC") then
        '    wg_GetAvgSalarySum(DataSet)
        '  end if
        
        end sub
        
      DISPLAYSCRIPT: | 
        USRG_GDCAVGSALARYSTRAFTERDELETE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "AFTERDELETE"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147022904_119619099 gdc_dlgUserComplexDocument147022845_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QHAAAAREFUQVNFVAcAAABEQVRBU0VUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZO
        U1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-12T10:57:53+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147368587_274788016 wg_GetAvgSalarySum"
          - 
            ADDFUNCTIONKEY: "147016040_119619099 wg_EnableFieldChange"
          - 
            ADDFUNCTIONKEY: "147302770_531940465 wg_SetSilkAvgSum"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147489065_336327731
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_gdcAvgSalaryStr"
      PARENTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      OBJECTKEY: "147368583_274788016 gdc_dlgUserComplexDocument147022845_119619099\\usrg_gdcAvgSalaryStr"
      EVENTNAME: "AFTERDELETE"
      FUNCTIONKEY: "147489067_336327731 usrg_gdcAvgSalaryStrAfterDelete"
      DISABLE: 1
      EDITIONDATE: 2014-03-12T10:57:53+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147368586_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147368584_274788016
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_gdcAvgSalaryStrAfterPost"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_GetAvgSalarySum
        '#include wg_EnableFieldChange
        '#include wg_SetSilkAvgSum
        option explicit
        sub usrg_gdcAvgSalaryStrAfterPost(ByVal DataSet)
          Exit Sub 'отключено
        ' пересчитываем сумму среднего заработка
        '  if wg_EnabledFieldChange(DataSet, "AVGSALARYCALC") then
        '    wg_GetAvgSalarySum(DataSet)
        '  end if
          call wg_SetSilkAvgSum(DataSet)
        end sub
        
      DISPLAYSCRIPT: | 
        USRG_GDCAVGSALARYSTRAFTERPOST
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "AFTERPOST"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147022904_119619099 gdc_dlgUserComplexDocument147022845_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QHAAAAREFUQVNFVAcAAABEQVRBU0VUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZO
        U1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-12T10:46:17+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147368587_274788016 wg_GetAvgSalarySum"
          - 
            ADDFUNCTIONKEY: "147016040_119619099 wg_EnableFieldChange"
          - 
            ADDFUNCTIONKEY: "147302770_531940465 wg_SetSilkAvgSum"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147368584_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_gdcAvgSalaryStr"
      PARENTNAME: "gdc_dlgUserComplexDocument147022845_119619099"
      OBJECTKEY: "147368583_274788016 gdc_dlgUserComplexDocument147022845_119619099\\usrg_gdcAvgSalaryStr"
      EVENTNAME: "AFTERPOST"
      FUNCTIONKEY: "147368586_274788016 usrg_gdcAvgSalaryStrAfterPost"
      DISABLE: 1
      EDITIONDATE: 2014-03-12T10:46:18+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147022925_119619099
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147368574_274788016
    Fields: 
      NAME: "Tgdc_dlgUserComplexDocument147022845_119619099"
      DESCRIPTION: ~
      PARENT: "147005312_31587988 TgdcCreateableForm\\Tgdc_dlgG\\Tgdc_dlgTR\\Tgdc_dlgHGR\\Tgdc_dlgUserComplexDocument"
      OBJECTTYPE: 1
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: "Tgdc_dlgUserComplexDocument"
      OBJECTNAME: ""
      SUBTYPE: "147022845_119619099"
      EDITIONDATE: 2004-05-07T14:03:57+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147368576_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147368574_274788016
    Fields: 
      OBJECTNAME: "Tgdc_dlgUserComplexDocument147022845_119619099"
      MODULE: "METHOD"
      LANGUAGE: "VBScript"
      NAME: "Tgdc_dlgUserComplexDocument147022845_119619099SyncField"
      COMMENT: ~
      SCRIPT: | 
        '#include WG_GETCONSTBYIDANDDATE
        '#include WG_CALCSICLLISTCOEFF
        '#include wg_SetWageDocLookupParams
        '#include wg_MonthHour
        '#include wg_RoundSum
        '#include wg_CalcSchedulerWorkTime
        '#include wg_Total
        '#include wg_Prolog
        option explicit
        sub Tgdc_dlgUserComplexDocument147022845_119619099SyncField(Self, Field, SyncList)
        '*** Данный код необходим для вызова кода определенного в gdc-классе.***
        '*** При его удаления  возможно нарушение  правильной работы системы.***
          call Inherited(Self, "SyncField", Array(Self, Field, SyncList))
        '***               Конец кода поддержки gdc-класса.                  ***
          dim MoveCardList, TotalDateEnd, MoveCard, LineSum
          dim gdcDetailObject, gdcObject, FeeTypeKey, IBSQL
          dim LimitPercent, ByHour, ByBudget, DateFrom, AvgSalaryByRB, LastDay
          dim Creator, DT, Pregnancy, DB, DE, WorkDays, WorkHours
          dim Scheduler, ShedulerKey, wg_EmployeeMovement
          dim K
        
          set Creator = New TCreator
          set IBSQL = Creator.GetObject(nil, "TIBSQL", "")
          IBSQL.Transaction = Self.gdcObject.ReadTransaction
          IBSQL.SQL.Text = " SELECT " + _
            " USR$DATEBEGIN, USR$DATEEND " + _
            " FROM USR$WG_SICKLIST SICK " + _
            " WHERE SICK.USR$FROM = :DT " + _
            " AND SICK.USR$EMPLKEY = :emplkey "
            
          dim q
          set q = creator.GetObject(nil, "TIBSQL", "")
          q.Transaction = Self.gdcObject.ReadTransaction
        
          if Field.DataSet.Self = Self.gdcObject.Self then
            select case Field.FieldName
              case "USR$TOTALDOCKEY"
                wg_SetWageDocLookupParams(Self)
                
        
        
              case "USR$EMPLKEY"
                'Определим карточку сотрудника на конец месяца начисления
                if not Self.gdcObject.FieldByName("usr$totaldockey").IsNull then
                  Self.gdcObject.FieldByName("usr$calcbyhour").AsInteger = 0
                  set MoveCardList = wg_EmplMoveList.MoveCardList(Field.AsInteger, Null)
                  if Assigned(MoveCardList) then
                    TotalDateEnd = wg_Total.DateEnd(Self.gdcObject.FieldByName("usr$totaldockey").AsInteger)
                    set MoveCard = MoveCardList.ExistMoveCardByDate(TotalDateEnd)
                    if Assigned(MoveCard) then
                      if MoveCard.PayFormKey = gdcBaseManager.GetIDByRUIDString(wg_PayForm_Salary_RUID) and not(MoveCard.ByHour) then
                        Self.gdcObject.FieldByName("usr$calcbyhour").AsInteger = 0
                      end if
                    end if
                  end if
                end if
        
        
                wg_SetWageDocLookupParams(Self)
        
              case "USR$ILLTYPEKEY"
                q.Close
                q.SQL.Text = _
                "select it.USR$CALCTYPE as ctype " & _
                "from USR$WG_ILLTYPE it " & _
                "where it.ID = :id "
                q.ParamByName("id").AsInteger = Field.AsInteger
                q.ExecQuery
                Self.GetComponent("usrg_cbCalcType").ItemIndex = q.FieldByName("ctype").AsInteger
                Field.DataSet.FieldByName("usr$calctype").AsInteger = q.FieldByName("ctype").AsInteger
        
                  Pregnancy = (gdcBaseManager.GetIDByRUIDString(wg_SickType_Pregnancy_RUID) = Self.gdcObject.FieldByName("USR$ILLTYPEKEY").AsInteger)
                  if Pregnancy then
                    Field.DataSet.FieldByName("USR$AVGPERIOD").AsInteger = 6
                    Self.GetComponent("usrg_cbCalcType").ItemIndex = wg_SickType100
                    Field.DataSet.FieldByName("usr$calctype").AsInteger = wg_SickType100
                    Field.DataSet.FieldByName("USR$CALCBYHOUR").AsInteger = 0
                  'added 18.07.13
                  elseif Field.DataSet.FieldByName("USR$FROM").AsDateTime < CDate("11.07.2013") then
                    Field.DataSet.FieldByName("USR$AVGPERIOD").AsInteger = 2
                  elseif Field.DataSet.FieldByName("USR$FROM").AsDateTime >= CDate("11.07.2013") then
                    Field.DataSet.FieldByName("USR$AVGPERIOD").AsInteger = 6
                  'end added
                  end if
        
            'added 18.07.13
            case "USR$FROM"
              Pregnancy = (gdcBaseManager.GetIDByRUIDString(wg_SickType_Pregnancy_RUID) = Self.gdcObject.FieldByName("USR$ILLTYPEKEY").AsInteger)
              if Field.DataSet.FieldByName("USR$FROM").AsDateTime >= CDate("11.07.2013") or Pregnancy then
                Field.DataSet.FieldByName("USR$AVGPERIOD").AsInteger = 6
              else
                Field.DataSet.FieldByName("USR$AVGPERIOD").AsInteger = 2
              end if
            ' added end
                
              case wg_Prolog.SyncField_Name(Self.gdcObject, "USR$AVGSUMMA")
                set gdcDetailObject = Self.gdcDetailObject
                set gdcObject = Self.gdcObject
                FeeTypeKey = gdcBaseManager.GetIDByRUIDString(wg_FeeType_SickList_RUID)
                'Декретный или нет
                Pregnancy = (gdcBaseManager.GetIDByRUIDString(wg_SickType_Pregnancy_RUID) = gdcObject.FieldByName("USR$ILLTYPEKEY").AsInteger)
                gdcDetailObject.Cancel
                gdcDetailObject.First
                if not gdcObject.FieldByName("usr$percent").IsNull then
                  LimitPercent = gdcObject.FieldByName("usr$percent").AsCurrency
                else
                  LimitPercent = 100
                end if
                ByHour = (gdcObject.FieldByName("usr$calcbyhour").AsInteger = 1)
                ByBudget = (gdcObject.FieldByName("USR$CALCBYBUDGET").AsInteger = 1)
        
                'Максимальный размер пособий, исчисленных в соответствии с настоящим Положением,
                'кроме пособий по беременности и родам, исчисленных в соответствии с пунктами 39 и 40 настоящего Положения,
                'за календарный месяц по каждому месту работы устанавливается в размере трехкратной величины
                'средней заработной платы рабочих и служащих в республике в месяце, предшествующем каждому месяцу
                'временной нетрудоспособности, отпуска по беременности и родам.
                '
                'Максимальный размер пособий за неполный месяц устанавливается в размере величины,
                'получаемой путем деления трехкратной величины средней заработной платы рабочих и служащих в
                'республике в месяце, предшествующем месяцу временной нетрудоспособности, отпуска по беременности и родам,
                'на количество рабочих дней (часов) по графику работы работника в месяце временной нетрудоспособности,
                'отпуска по беременности и родам с последующим умножением полученного результата на
                'количество рабочих дней (часов) временной нетрудоспособности, отпуска по беременности и родам, в этом месяце.
        
                while (not gdcDetailObject.EOF)
                  gdcDetailObject.Edit
                  if not ByBudget then
                    if not ByHour then
                      LineSum = _
                        gdcDetailObject.FieldByName("USR$DOI").AsCurrency * gdcDetailObject.FieldByName("USR$PERCENT").AsCurrency * _
                        Self.gdcObject.FieldByName("USR$AVGSUMMA").AsCurrency / 100
                    else
                      LineSum = _
                        gdcDetailObject.FieldByName("USR$HOI").AsCurrency * gdcDetailObject.FieldByName("USR$PERCENT").AsCurrency * _
                        Self.gdcObject.FieldByName("USR$AVGSUMMA").AsCurrency / 100
                    end if
                    K = wg_CalcSiclListCoeff(gdcObject.FieldByName("USR$DATEBEGIN").AsDateTime, _
                      gdcDetailObject.FieldByName("USR$DATEBEGIN").AsDateTime)
        
                    LineSum = LineSum * LimitPercent / 100 * K
                  else
                    LastDay = Day(DateAdd("m", 1, DateSerial( _
                      Year(gdcDetailObject.FieldByName("USR$DATEBEGIN").AsDateTime), _
                      Month(gdcDetailObject.FieldByName("USR$DATEBEGIN").AsDateTime), 1)) - 1)
                    if LastDay > 0 then
                      LineSum = _
                        Self.gdcObject.FieldByName("USR$AVGSUMMA").AsCurrency * _
                        gdcDetailObject.FieldByName("USR$DOI").AsInteger / LastDay
                    else
                      LineSum = 0
                    end if
                  end if
                  'if not Pregnancy then
                    set wg_EmployeeMovement = wg_EmplMoveList.MoveCardList(gdcObject.FieldByName("USR$EMPLKEY").AsInteger, Null)
                    if Assigned(wg_EmployeeMovement) then
                      'Зредняя зрп за месяц предыдущий месяцу болезни
                      DateFrom = gdcDetailObject.FieldByName("USR$INCLUDEDATE").AsDateTime
                      set MoveCard = wg_EmployeeMovement.ExistMoveCardByDate(DateFrom)
                      if Assigned(MoveCard) then
                        WorkDays = 0
                        WorkHours = 0
                        ' определяем период начала и конца итогового начисления
                        DB = wg_Total.DateBegin(wg_Total.TotalDocByDate(DateFrom))
                        DE = wg_Total.DateEnd(wg_Total.TotalDocByDate(DateFrom))
                        call wg_CalcSchedulerWorkTime(gdcObject.FieldByName("usr$emplkey").AsInteger, _
                          MoveCard.FirstMoveKey, DB, DE, gdcObject.ReadTransaction, True, WorkDays, WorkHours)
        
                        if not ByHour then
                          if WorkDays > 0 then
                            AvgSalaryByRB = 3 * wg_MonthHour.AvgSalaryByRB(_
                              DateSerial(Year(DateFrom), Month(DateFrom), 1) -1) / WorkDays * gdcDetailObject.FieldByName("USR$DOI").AsCurrency
                          else
                            AvgSalaryByRB = 0
                          end if
                        else
                          if WorkHours > 0 then
                            AvgSalaryByRB = 3 * wg_MonthHour.AvgSalaryByRB(_
                              DateSerial(Year(DateFrom), Month(DateFrom), 1) -1) / WorkHours * gdcDetailObject.FieldByName("USR$HOI").AsCurrency
                          else
                            AvgSalaryByRB = 0
                          end if
                        end if
                        
                        if AvgSalaryByRB <> 0 and LineSum > AvgSalaryByRB then
                          LineSum = AvgSalaryByRB
                        end if
                      end if
                   ' end if
                  end if
                  Self.gdcDetailObject.FieldByName("usr$summa").AsCurrency = wg_RoundSum(FeeTypeKey, LineSum)
                  gdcDetailObject.Post
                  gdcDetailObject.Next
                wend
                gdcDetailObject.First
        
              ' 50% от бюджета прожиточного минимума
              ' срабатывает, если при пересчете декрета пользователь выбрал "50% БМП"
              case wg_Prolog.SyncField_Name(Self.gdcObject, "USR$CALCBYBUDGET")
                if Field.AsInteger = 0 then
                  Self.gdcObject.FieldByName("USR$AVGSUMMA").AsCurrency = 0
                else
                  dim gdcAvgStr
                  set gdcAvgStr = Self.GetComponent("usrg_gdcAvgSalaryStr")
                  'Выключаем автоперерасчет среднего заработка
                  gdcAvgStr.Tag = 1
                  'Удалим старые значения
                  gdcAvgStr.First
                  while not gdcAvgStr.Eof
                    gdcAvgStr.Delete
                  wend
                  call Tgdc_dlgUserComplexDocument147022845_119619099SyncField_CalcAvgSumBudget(Self.gdcObject)
                  gdcAvgStr.Tag = 0
                end if
              case "USR$FROM"
                if (not Field.IsNull) and Self.gdcObject.FieldByName("USR$CALCBYBUDGET").AsInteger = 1 then
                  call Tgdc_dlgUserComplexDocument147022845_119619099SyncField_CalcAvgSumBudget(Self.gdcObject)
                end if
            end select
          end if
        end sub
        
        ' 50% от бюджета прожиточного минимума
        sub Tgdc_dlgUserComplexDocument147022845_119619099SyncField_CalcAvgSumBudget(gdcO)
          dim AvgSum, OnDate
          if gdcO.FieldByName("USR$FROM").IsNull then
            OnDate = Date
          else
            OnDate = gdcO.FieldByName("USR$FROM").AsDateTime
          end if
          ' бюджет прожиточного минимума
          AvgSum = wg_GetConstByIDAndDate(gdcBaseManager.GetIDByRUIDString(wg_cnst_LivingWage_RUID), OnDate)
          gdcO.FieldByName("usr$avgsumma").AsCurrency = Round(AvgSum  / 2)
        end sub
        
      DISPLAYSCRIPT: | 
        TGDC_DLGUSERCOMPLEXDOCUMENT147022845_119619099SYNCFIELD
        TGDC_DLGUSERCOMPLEXDOCUMENT147022845_119619099SYNCFIELD_CALCAVGSUMBUDGET
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147022925_119619099 TgdcCreateableForm\\Tgdc_dlgG\\Tgdc_dlgTR\\Tgdc_dlgHGR\\Tgdc_dlgUserComplexDocument\\Tgdc_dlgUserComplexDocument147022845_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QEAAAAU0VMRgQAAABTRUxGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNU
        BQAAAEZJRUxEBQAAAEZJRUxEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUCAAAAFNZ
        TkNMSVNUCAAAAFNZTkNMSVNUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RGTFBS
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-03-26T13:18:56+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147043669_974374174 wg_GetConstByIDAndDate"
          - 
            ADDFUNCTIONKEY: "155074107_1698257362 wg_CalcSiclListCoeff"
          - 
            ADDFUNCTIONKEY: "147025267_449804462 wg_SetWageDocLookupParams"
          - 
            ADDFUNCTIONKEY: "147019334_119619099 wg_MonthHour"
          - 
            ADDFUNCTIONKEY: "147804276_375143752 wg_RoundSum"
          - 
            ADDFUNCTIONKEY: "147523125_336327731 wg_CalcSchedulerWorkTime"
          - 
            ADDFUNCTIONKEY: "147586119_119619099 wg_Total"
          - 
            ADDFUNCTIONKEY: "528612032_99701464 wg_Prolog"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147368574_274788016
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "Tgdc_dlgUserComplexDocument147022845_119619099"
      PARENTNAME: "Tgdc_dlgUserComplexDocument"
      OBJECTKEY: "147022925_119619099 TgdcCreateableForm\\Tgdc_dlgG\\Tgdc_dlgTR\\Tgdc_dlgHGR\\Tgdc_dlgUserComplexDocument\\Tgdc_dlgUserComplexDocument147022845_119619099"
      EVENTNAME: "SYNCFIELD"
      FUNCTIONKEY: "147368576_274788016 Tgdc_dlgUserComplexDocument147022845_119619099SyncField"
      DISABLE: ~
      EDITIONDATE: 2014-03-26T13:18:58+03:00
  - 
    Properties: 
      Class: "TgdcStorageFolder"
      RUID: 147063986_1439110857
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
    Fields: 
      PARENT: "990010_17 USER - Administrator"
      NAME: "gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)"
      DATA_TYPE: "F"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2010-04-20T13:32:16+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 154648252_119200397
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 147063986_1439110857
    Fields: 
      PARENT: "147063986_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "WS"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: 2
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2013-08-12T19:08:11+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 154648251_119200397
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 147063986_1439110857
    Fields: 
      PARENT: "147063986_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "Width"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: 1382
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-05-12T10:46:27+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 154648250_119200397
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 147063986_1439110857
    Fields: 
      PARENT: "147063986_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "Left"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: -8
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-02-26T10:01:11+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 154648249_119200397
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 147063986_1439110857
    Fields: 
      PARENT: "147063986_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "Top"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: -8
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-02-26T10:01:11+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 154648248_119200397
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 147063986_1439110857
    Fields: 
      PARENT: "147063986_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "Height"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: 744
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-05-12T10:46:27+03:00
  - 
    Properties: 
      Class: "TgdcStorageFolder"
      RUID: 147063987_1439110857
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
    Fields: 
      PARENT: "147063986_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "ibgrDetail(TgsIBGrid)"
      DATA_TYPE: "F"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2010-04-20T13:32:16+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 147123779_1439110857
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 147063987_1439110857
    Fields: 
      PARENT: "147063987_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)\\ibgrDetail(TgsIBGrid)"
      NAME: "data"
      DATA_TYPE: "B"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: !!binary > 
        VFBGMAYNR1JJRF9TVFJFQU1fNAEGBlRhaG9tYQYMY2xXaW5kb3dUZXh0AvUAAggAA8wAAAYIY2xX
        aW5kb3cBBgZUYWhvbWEGD2NsSGlnaGxpZ2h0VGV4dAL1AAIIAAPMAAAGC2NsSGlnaGxpZ2h0AQYG
        VGFob21hBgxjbFdpbmRvd1RleHQC9QACCAADzAAABgljbEJ0bkZhY2UJBgkkMDBFN0YzRjcGCSQw
        MEQ2RTdFNw4ACAgOAAgOAQhFeHBhbmRlZAgJRmllbGROYW1lBgtVU1IkQUNDREFURQ1UaXRsZS5D
        YXB0aW9uBg/E4PLgIO3g9+jx6+Xt6P8FV2lkdGgCbAdWaXNpYmxlCQABCEV4cGFuZGVkCAlGaWVs
        ZE5hbWUGD1VTUiRJTkNMVURFREFURQ1UaXRsZS5DYXB0aW9uBg/E4PLgIOfg9+jx6+Xt6P8FV2lk
        dGgCbAdWaXNpYmxlCQABCUFsaWdubWVudAcOdGFSaWdodEp1c3RpZnkIRXhwYW5kZWQICUZpZWxk
        TmFtZQYMVVNSJERVUkFUSU9ODVRpdGxlLkNhcHRpb24GA8Tt6AVXaWR0aAIkB1Zpc2libGUJCVRv
        dGFsVHlwZQcFdHRTdW0AAQlBbGlnbm1lbnQHDnRhUmlnaHRKdXN0aWZ5CEV4cGFuZGVkCAlGaWVs
        ZE5hbWUGCVVTUiRTVU1NQQ1UaXRsZS5DYXB0aW9uBgXR8+zs4AVXaWR0aAJIB1Zpc2libGUJDURp
        c3BsYXlGb3JtYXQGBCMuIyMJVG90YWxUeXBlBwV0dFN1bQABCEV4cGFuZGVkCAlGaWVsZE5hbWUG
        DVVTUiREQVRFQkVHSU4NVGl0bGUuQ2FwdGlvbgYLxODy4CDt4Pfg6+AFV2lkdGgCbAdWaXNpYmxl
        CQABCEV4cGFuZGVkCAlGaWVsZE5hbWUGC1VTUiREQVRFRU5EDVRpdGxlLkNhcHRpb24GDsTg8uAg
        7uru7ffg7ej/BVdpZHRoAmwHVmlzaWJsZQkAAQlBbGlnbm1lbnQHDnRhUmlnaHRKdXN0aWZ5CEV4
        cGFuZGVkCAlGaWVsZE5hbWUGBlNVTU5DVQ1UaXRsZS5DYXB0aW9uBgZzdW1uY3UFV2lkdGgC/wdW
        aXNpYmxlCAABCEV4cGFuZGVkCAlGaWVsZE5hbWUGDERPQ1VNRU5UREFURQ1UaXRsZS5DYXB0aW9u
        BgTE4PLgBVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1lBgtERVNDUklQVElP
        Tg1UaXRsZS5DYXB0aW9uBgjO7+jx4O3o5QVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZp
        ZWxkTmFtZQYOVVNSJFNPUlROVU1CRVIIUmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GFM3u7OXwIOTr
        /yDx7vDy6PDu4uroBVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1lBgJJRA1U
        aXRsZS5DYXB0aW9uBgTK6/73BVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1l
        BgZQQVJFTlQNVGl0bGUuQ2FwdGlvbgYI0O7k6PLl6/wFV2lkdGgC/wdWaXNpYmxlCAABCEV4cGFu
        ZGVkCAlGaWVsZE5hbWUGD0RPQ1VNRU5UVFlQRUtFWQ1UaXRsZS5DYXB0aW9uBg3S6O8g5O7q8+zl
        7fLgBVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1lBglUUlRZUEVLRVkNVGl0
        bGUuQ2FwdGlvbgYO0ujvIPLw4O3n4Or26OgFV2lkdGgC/wdWaXNpYmxlCAABCEV4cGFuZGVkCAlG
        aWVsZE5hbWUGDlRSQU5TQUNUSU9OS0VZDVRpdGxlLkNhcHRpb24GCtLw4O3n4Or26P8FV2lkdGgC
        /wdWaXNpYmxlCAABCEV4cGFuZGVkCAlGaWVsZE5hbWUGBk5VTUJFUg1UaXRsZS5DYXB0aW9uBgXN
        7uzl8AVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYHU1VNQ1VSUg1UaXRs
        ZS5DYXB0aW9uBg7R8+zs4CDiIOLg6/7y5QVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZp
        ZWxkTmFtZQYHREVMQVlFRA1UaXRsZS5DYXB0aW9uBgrO8uvu5uXt7fvpBVdpZHRoAv8HVmlzaWJs
        ZQgAAQhFeHBhbmRlZAgJRmllbGROYW1lBgdDVVJSS0VZDVRpdGxlLkNhcHRpb24GBsLg6/7y4AVX
        aWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYKQ09NUEFOWUtFWQ1UaXRsZS5D
        YXB0aW9uBgjK7uzv4O3o/wVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYK
        Q1JFQVRPUktFWQ1UaXRsZS5DYXB0aW9uBgrK8u4g8e7n5ODrBVdpZHRoAv8HVmlzaWJsZQgAAQhF
        eHBhbmRlZAgJRmllbGROYW1lBgxDUkVBVElPTkRBVEUNVGl0bGUuQ2FwdGlvbgYNxODy4CDx7ufk
        4O3o/wVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYJRURJVE9SS0VZDVRp
        dGxlLkNhcHRpb24GDMry7iDo8e/w4OLo6wVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZp
        ZWxkTmFtZQYLRURJVElPTkRBVEUNVGl0bGUuQ2FwdGlvbgYOxODy4CDo5+zl7eXt6P8FV2lkdGgC
        /wdWaXNpYmxlCAABCEV4cGFuZGVkCAlGaWVsZE5hbWUGCVBSSU5UREFURQ1UaXRsZS5DYXB0aW9u
        BgvE4PLgIO/l9+Dy6AVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYIRElT
        QUJMRUQNVGl0bGUuQ2FwdGlvbgYJzvLq6/735e3uBVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRl
        ZAgJRmllbGROYW1lBghSRVNFUlZFRA1UaXRsZS5DYXB0aW9uBg/H4PDl5+Xw4ujw7uLg7e4FV2lk
        dGgC/wdWaXNpYmxlCAABCEV4cGFuZGVkCAlGaWVsZE5hbWUGC0RPQ1VNRU5US0VZCFJlYWRPbmx5
        CQ1UaXRsZS5DYXB0aW9uBg7K6/73IOTu6vPs5e3y4AVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5k
        ZWQICUZpZWxkTmFtZQYJTUFTVEVSS0VZCFJlYWRPbmx5CQ1UaXRsZS5DYXB0aW9uBifQ7uTo8uXr
        /CAozeD36PHr5e3o5SDu8u/z8eru4ijv7ufo9uj/KSkFV2lkdGgC/wdWaXNpYmxlCAABCEV4cGFu
        ZGVkCAlGaWVsZE5hbWUGCVJFU0VSVkVEMQhSZWFkT25seQkNVGl0bGUuQ2FwdGlvbgYux+Dw5efl
        8OLo8O7i4O3uICjN4Pfo8evl7ejlIO7y7/Px6u7iKO/u5+j26P8pKQVXaWR0aAL/B1Zpc2libGUI
        AAEIRXhwYW5kZWQICUZpZWxkTmFtZQYFU1VNRVENVGl0bGUuQ2FwdGlvbgYT0fPs7OAg4iD96uLo
        4uDr5e3y5QVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYKVVNSJEVRUkFU
        RQ1UaXRsZS5DYXB0aW9uBgnK8/DxIP3q4i4FV2lkdGgC/wdWaXNpYmxlCAABCUFsaWdubWVudAcO
        dGFSaWdodEp1c3RpZnkIRXhwYW5kZWQICUZpZWxkTmFtZQYFQUZVTEwNVGl0bGUuQ2FwdGlvbgYN
        z+7r7fvpIOTu8fLz7wVXaWR0aAL/B1Zpc2libGUIAAEJQWxpZ25tZW50Bw50YVJpZ2h0SnVzdGlm
        eQhFeHBhbmRlZAgJRmllbGROYW1lBgVBQ0hBRw1UaXRsZS5DYXB0aW9uBhnP8O7x7O7y8CDoIPDl
        5ODq8ujw7uLg7ejlBVdpZHRoAv8HVmlzaWJsZQgAAQlBbGlnbm1lbnQHDnRhUmlnaHRKdXN0aWZ5
        CEV4cGFuZGVkCAlGaWVsZE5hbWUGBUFWSUVXDVRpdGxlLkNhcHRpb24GD9Lu6/zq7iDv8O7x7O7y
        8AVXaWR0aAL/B1Zpc2libGUIAAAICP0cCQg=
      EDITIONDATE: 2014-02-26T15:58:19+03:00
  - 
    Properties: 
      Class: "TgdcStorageFolder"
      RUID: 154648246_77029543
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
    Fields: 
      PARENT: "147063986_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "pnlMaster(TPanel)"
      DATA_TYPE: "F"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2013-08-12T19:08:11+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 154648247_119200397
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 154648246_77029543
    Fields: 
      PARENT: "154648246_77029543 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)\\pnlMaster(TPanel)"
      NAME: "Height"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: 273
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-03-03T17:40:45+03:00
  - 
    Properties: 
      Class: "TgdcStorageFolder"
      RUID: 147063989_1439110857
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
    Fields: 
      PARENT: "147063986_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "usrg_grAvgSalaryStr(TgsIBGrid)"
      DATA_TYPE: "F"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2010-04-20T13:32:16+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 147123780_1439110857
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 147063989_1439110857
    Fields: 
      PARENT: "147063989_1439110857 USER - Administrator\\gdc_dlgUserComplexDocument147020774_119619099(Tgdc_dlgUserComplexDocument)\\usrg_grAvgSalaryStr(TgsIBGrid)"
      NAME: "data"
      DATA_TYPE: "B"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: !!binary > 
        VFBGMAYNR1JJRF9TVFJFQU1fNAEGBlRhaG9tYQYMY2xXaW5kb3dUZXh0AvUAAggAA8wAAAYIY2xX
        aW5kb3cBBgZUYWhvbWEGD2NsSGlnaGxpZ2h0VGV4dAL1AAIIAAPMAAAGC2NsSGlnaGxpZ2h0AQYG
        VGFob21hBgxjbFdpbmRvd1RleHQC9QACCAADzAAABgljbEJ0bkZhY2UJBgkkMDBFN0YzRjcGCSQw
        MEQ2RTdFNw4BDERpc3BsYXlGaWVsZAYHVVNSJERPVwlGaWVsZE5hbWUGB1VTUiRIT1cJTGluZUNv
        dW50AgEHT3B0aW9ucwsLY2VvQWRkRmllbGQAAAEMRGlzcGxheUZpZWxkBhBVU1IkU0NIRURVTEVS
        RE9XCUZpZWxkTmFtZQYQVVNSJFNDSEVEVUxFUkhPVwlMaW5lQ291bnQCAQdPcHRpb25zCwtjZW9B
        ZGRGaWVsZAAAAQxEaXNwbGF5RmllbGQGDVVTUiRORVdTQUxBUlkJRmllbGROYW1lBg1VU1IkT0xE
        U0FMQVJZCUxpbmVDb3VudAIBB09wdGlvbnMLC2Nlb0FkZEZpZWxkAAABDERpc3BsYXlGaWVsZAYK
        VVNSJFNBTEFSWQlGaWVsZE5hbWUGEFVTUiRNT0RFUk5TQUxBUlkJTGluZUNvdW50AgEHT3B0aW9u
        cwsLY2VvQWRkRmllbGQAAAAICA4ACA4BCUFsaWdubWVudAcNdGFMZWZ0SnVzdGlmeQhFeHBhbmRl
        ZAgJRmllbGROYW1lBgpVU1IkSVNGVUxMCFJlYWRPbmx5CA1UaXRsZS5DYXB0aW9uBgzP7uvt++kg
        7OXx//YFV2lkdGgCMAdWaXNpYmxlCQABCUFsaWdubWVudAcNdGFMZWZ0SnVzdGlmeQhFeHBhbmRl
        ZAgJRmllbGROYW1lBgtVU1IkSVNDSEVDSwhSZWFkT25seQgNVGl0bGUuQ2FwdGlvbgYEwurrLgVX
        aWR0aAIwB1Zpc2libGUJCVRvdGFsVHlwZQcFdHRTdW0AAQlBbGlnbm1lbnQHDXRhTGVmdEp1c3Rp
        ZnkIRXhwYW5kZWQICUZpZWxkTmFtZQYIVVNSJERBVEUIUmVhZE9ubHkIDVRpdGxlLkNhcHRpb24G
        BMTg8uAFV2lkdGgCSAdWaXNpYmxlCQABCUFsaWdubWVudAcOdGFSaWdodEp1c3RpZnkIRXhwYW5k
        ZWQICUZpZWxkTmFtZQYKVVNSJFNBTEFSWQhSZWFkT25seQgNVGl0bGUuQ2FwdGlvbgYIx+Dw7+vg
        8uAFV2lkdGgCSAdWaXNpYmxlCQ1EaXNwbGF5Rm9ybWF0BgQjLiMjAAEJQWxpZ25tZW50Bw50YVJp
        Z2h0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBglVU1IkQ09FRkYIUmVhZE9ubHkIDVRpdGxl
        LkNhcHRpb24GBsru/fQt8gVXaWR0aAI0B1Zpc2libGUJAAEJQWxpZ25tZW50Bw50YVJpZ2h0SnVz
        dGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBhBVU1IkTU9ERVJOU0FMQVJZCFJlYWRPbmx5CA1UaXRs
        ZS5DYXB0aW9uBhTR7uLw5ezl7e3g/yDn4PDv6+Dy4AVXaWR0aAJUB1Zpc2libGUJDURpc3BsYXlG
        b3JtYXQGBCMuIyMJVG90YWxUeXBlBwV0dFN1bQABCUFsaWdubWVudAcOdGFSaWdodEp1c3RpZnkI
        RXhwYW5kZWQICUZpZWxkTmFtZQYHVVNSJERPVwhSZWFkT25seQgNVGl0bGUuQ2FwdGlvbgYDxO3o
        BVdpZHRoAiQHVmlzaWJsZQkJVG90YWxUeXBlBwV0dFN1bQABCUFsaWdubWVudAcNdGFMZWZ0SnVz
        dGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBhBVU1IkU0NIRURVTEVSRE9XCFJlYWRPbmx5CA1UaXRs
        ZS5DYXB0aW9uBgvE7eXpIO/uIOPwLgVXaWR0aAJIB1Zpc2libGUJAAEJQWxpZ25tZW50Bw50YVJp
        Z2h0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBgdVU1IkSE9XCFJlYWRPbmx5CA1UaXRsZS5D
        YXB0aW9uBgTX4PH7BVdpZHRoAisHVmlzaWJsZQkJVG90YWxUeXBlBwV0dFN1bQABCUFsaWdubWVu
        dAcNdGFMZWZ0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBhBVU1IkU0NIRURVTEVSSE9XCFJl
        YWRPbmx5CA1UaXRsZS5DYXB0aW9uBgzX4PHu4iDv7iDj8C4FV2lkdGgCTAdWaXNpYmxlCQABCUFs
        aWdubWVudAcNdGFMZWZ0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBg9VU1IkREVTQ1JJUFRJ
        T04IUmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GCM7v6PHg7ejlBVdpZHRoA94AB1Zpc2libGUJAAEJ
        QWxpZ25tZW50Bw50YVJpZ2h0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBg1VU1IkT0xEU0FM
        QVJZCFJlYWRPbmx5CA1UaXRsZS5DYXB0aW9uBgXO6uvg5AVXaWR0aAI8B1Zpc2libGUJAAEJQWxp
        Z25tZW50Bw50YVJpZ2h0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBg1VU1IkTkVXU0FMQVJZ
        CFJlYWRPbmx5CA1UaXRsZS5DYXB0aW9uBg3S5erz+ejpIO7q6+DkBVdpZHRoAmAHVmlzaWJsZQkA
        AQlBbGlnbm1lbnQHDXRhTGVmdEp1c3RpZnkIRXhwYW5kZWQICUZpZWxkTmFtZQYCSUQNVGl0bGUu
        Q2FwdGlvbgYNyOTl7fLo9Ojq4PLu8AVXaWR0aAL/B1Zpc2libGUIAAEJQWxpZ25tZW50Bw10YUxl
        ZnRKdXN0aWZ5CEV4cGFuZGVkCAlGaWVsZE5hbWUGD1VTUiRET0NVTUVOVEtFWQhSZWFkT25seQgN
        VGl0bGUuQ2FwdGlvbgYIxO7q8+zl7fIFV2lkdGgC/wdWaXNpYmxlCAABCUFsaWdubWVudAcNdGFM
        ZWZ0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBhhaX1VTUiRET0NVTUVOVEtFWV9OVU1CRVII
        UmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GBc3u7OXwBVdpZHRoAv8HVmlzaWJsZQgAAQlBbGlnbm1l
        bnQHDXRhTGVmdEp1c3RpZnkIRXhwYW5kZWQICUZpZWxkTmFtZQYeWl9VU1IkRE9DVU1FTlRLRVlf
        RE9DVU1FTlREQVRFCFJlYWRPbmx5CA1UaXRsZS5DYXB0aW9uBgTE4PLgBVdpZHRoAv8HVmlzaWJs
        ZQgAAQlBbGlnbm1lbnQHDXRhTGVmdEp1c3RpZnkIRXhwYW5kZWQICUZpZWxkTmFtZQYfWl9VU1Ik
        RE9DVU1FTlRLRVlfRE9DMjcxNTI2MDQ3OAhSZWFkT25seQgNVGl0bGUuQ2FwdGlvbgYN0ujvIOTu
        6vPs5e3y4AVXaWR0aAL/B1Zpc2libGUIAAEJQWxpZ25tZW50Bw10YUxlZnRKdXN0aWZ5CEV4cGFu
        ZGVkCAlGaWVsZE5hbWUGDFVTUiRDQUxDREFZUwhSZWFkT25seQgNVGl0bGUuQ2FwdGlvbgYLxO3o
        IPDg8ffl8i4FV2lkdGgC/wdWaXNpYmxlCAAACAj9DAkI
      EDITIONDATE: 2014-04-23T11:07:04+03:00
  - 
    Properties: 
      Class: "TgdcStorageFolder"
      RUID: 394420819_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
    Fields: 
      PARENT: "990010_17 USER - Administrator"
      NAME: "gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)"
      DATA_TYPE: "F"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2012-02-21T12:09:30+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 394420826_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 394420819_99701464
    Fields: 
      PARENT: "394420819_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "WS"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: 2
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-06-02T17:27:06+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 394420825_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 394420819_99701464
    Fields: 
      PARENT: "394420819_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "Width"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: 1382
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-06-02T17:27:06+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 394420824_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 394420819_99701464
    Fields: 
      PARENT: "394420819_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "Left"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: -8
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-06-02T17:27:06+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 394420823_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 394420819_99701464
    Fields: 
      PARENT: "394420819_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "Top"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: -8
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-06-02T17:27:06+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 394420822_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 394420819_99701464
    Fields: 
      PARENT: "394420819_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "Height"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: 744
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-06-02T17:27:06+03:00
  - 
    Properties: 
      Class: "TgdcStorageFolder"
      RUID: 497125569_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
    Fields: 
      PARENT: "394420819_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "ibgrDetail(TgsIBGrid)"
      DATA_TYPE: "F"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2013-09-12T10:36:15+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 497125570_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 497125569_99701464
    Fields: 
      PARENT: "497125569_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)\\ibgrDetail(TgsIBGrid)"
      NAME: "data"
      DATA_TYPE: "B"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: !!binary > 
        VFBGMAYNR1JJRF9TVFJFQU1fNAEGBlRhaG9tYQYMY2xXaW5kb3dUZXh0AvUAAggAA8wAAAYIY2xX
        aW5kb3cBBgZUYWhvbWEGD2NsSGlnaGxpZ2h0VGV4dAL1AAIIAAPMAAAGC2NsSGlnaGxpZ2h0AQYG
        VGFob21hBgxjbFdpbmRvd1RleHQC9QACCAADzAAABgljbEJ0bkZhY2UJBgkkMDBFN0YzRjcGCSQw
        MEQ2RTdFNw4ACAgOAAgOAQhFeHBhbmRlZAgJRmllbGROYW1lBg9VU1IkSU5DTFVERURBVEUNVGl0
        bGUuQ2FwdGlvbgYQzOXx//Yg5+D36PHr5e3o/wVXaWR0aAJsB1Zpc2libGUJAAEJQWxpZ25tZW50
        Bw50YVJpZ2h0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBgtVU1IkUEVSQ0VOVA1UaXRsZS5D
        YXB0aW9uBgElBVdpZHRoAiQHVmlzaWJsZQkAAQlBbGlnbm1lbnQHDnRhUmlnaHRKdXN0aWZ5CEV4
        cGFuZGVkCAlGaWVsZE5hbWUGB1VTUiRET0kNVGl0bGUuQ2FwdGlvbgYDxO3oBVdpZHRoAjAHVmlz
        aWJsZQkJVG90YWxUeXBlBwV0dFN1bQABCUFsaWdubWVudAcOdGFSaWdodEp1c3RpZnkIRXhwYW5k
        ZWQICUZpZWxkTmFtZQYHVVNSJEhPSQ1UaXRsZS5DYXB0aW9uBgTX4PH7BVdpZHRoAjAHVmlzaWJs
        ZQkJVG90YWxUeXBlBwV0dFN1bQABCUFsaWdubWVudAcOdGFSaWdodEp1c3RpZnkIRXhwYW5kZWQI
        CUZpZWxkTmFtZQYJVVNSJFNVTU1BDVRpdGxlLkNhcHRpb24GBdHz7OzgBVdpZHRoAkgHVmlzaWJs
        ZQkJVG90YWxUeXBlBwV0dFN1bQABCEV4cGFuZGVkCAlGaWVsZE5hbWUGDVVTUiREQVRFQkVHSU4N
        VGl0bGUuQ2FwdGlvbgYLxODy4CDt4Pfg6+AFV2lkdGgCVAdWaXNpYmxlCQABCEV4cGFuZGVkCAlG
        aWVsZE5hbWUGC1VTUiREQVRFRU5EDVRpdGxlLkNhcHRpb24GDsTg8uAg7uru7ffg7ej/BVdpZHRo
        AmwHVmlzaWJsZQkAAQlBbGlnbm1lbnQHDnRhUmlnaHRKdXN0aWZ5CEV4cGFuZGVkCAlGaWVsZE5h
        bWUGBlNVTU5DVQ1UaXRsZS5DYXB0aW9uBgnN4Pfo8evl7e4FV2lkdGgC/wdWaXNpYmxlCAABCEV4
        cGFuZGVkCAlGaWVsZE5hbWUGDERPQ1VNRU5UREFURQ1UaXRsZS5DYXB0aW9uBgTE4PLgBVdpZHRo
        Av8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1lBgtERVNDUklQVElPTg1UaXRsZS5DYXB0
        aW9uBgjO7+jx4O3o5QVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYOVVNS
        JFNPUlROVU1CRVIIUmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GFM3u7OXwIOTr/yDx7vDy6PDu4uro
        BVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1lBgJJRA1UaXRsZS5DYXB0aW9u
        BgTK6/73BVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1lBgZQQVJFTlQNVGl0
        bGUuQ2FwdGlvbgYI0O7k6PLl6/wFV2lkdGgC/wdWaXNpYmxlCAABCEV4cGFuZGVkCAlGaWVsZE5h
        bWUGD0RPQ1VNRU5UVFlQRUtFWQ1UaXRsZS5DYXB0aW9uBg3S6O8g5O7q8+zl7fLgBVdpZHRoAv8H
        VmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1lBglUUlRZUEVLRVkNVGl0bGUuQ2FwdGlvbgYO
        0ujvIPLw4O3n4Or26OgFV2lkdGgC/wdWaXNpYmxlCAABCEV4cGFuZGVkCAlGaWVsZE5hbWUGDlRS
        QU5TQUNUSU9OS0VZDVRpdGxlLkNhcHRpb24GCtLw4O3n4Or26P8FV2lkdGgC/wdWaXNpYmxlCAAB
        CEV4cGFuZGVkCAlGaWVsZE5hbWUGBk5VTUJFUg1UaXRsZS5DYXB0aW9uBgXN7uzl8AVXaWR0aAL/
        B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYHU1VNQ1VSUg1UaXRsZS5DYXB0aW9uBg7R
        8+zs4CDiIOLg6/7y5QVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYHREVM
        QVlFRA1UaXRsZS5DYXB0aW9uBgrO8uvu5uXt7fvpBVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRl
        ZAgJRmllbGROYW1lBgdDVVJSS0VZDVRpdGxlLkNhcHRpb24GBsLg6/7y4AVXaWR0aAL/B1Zpc2li
        bGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYKQ09NUEFOWUtFWQ1UaXRsZS5DYXB0aW9uBgjK7uzv
        4O3o/wVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYKQ1JFQVRPUktFWQ1U
        aXRsZS5DYXB0aW9uBgrK8u4g8e7n5ODrBVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmll
        bGROYW1lBgxDUkVBVElPTkRBVEUNVGl0bGUuQ2FwdGlvbgYNxODy4CDx7ufk4O3o/wVXaWR0aAL/
        B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYJRURJVE9SS0VZDVRpdGxlLkNhcHRpb24G
        DMry7iDo8e/w4OLo6wVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYLRURJ
        VElPTkRBVEUNVGl0bGUuQ2FwdGlvbgYOxODy4CDo5+zl7eXt6P8FV2lkdGgC/wdWaXNpYmxlCAAB
        CEV4cGFuZGVkCAlGaWVsZE5hbWUGCVBSSU5UREFURQ1UaXRsZS5DYXB0aW9uBgvE4PLgIO/l9+Dy
        6AVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFtZQYIRElTQUJMRUQNVGl0bGUu
        Q2FwdGlvbgYJzvLq6/735e3uBVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1l
        BghSRVNFUlZFRA1UaXRsZS5DYXB0aW9uBg/H4PDl5+Xw4ujw7uLg7e4FV2lkdGgC/wdWaXNpYmxl
        CAABCEV4cGFuZGVkCAlGaWVsZE5hbWUGC0RPQ1VNRU5US0VZCFJlYWRPbmx5CQ1UaXRsZS5DYXB0
        aW9uBg7K6/73IOTu6vPs5e3y4AVXaWR0aAL/B1Zpc2libGUIAAEIRXhwYW5kZWQICUZpZWxkTmFt
        ZQYJTUFTVEVSS0VZCFJlYWRPbmx5CQ1UaXRsZS5DYXB0aW9uBivQ7uTo8uXr/CAoMDUuzeD36PHr
        5e3o5SDh7uvt6Pft+/Uo7+7n6Pbo/ykpBVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmll
        bGROYW1lBglSRVNFUlZFRDEIUmVhZE9ubHkJDVRpdGxlLkNhcHRpb24GMsfg8OXn5fDi6PDu4uDt
        7iAoMDUuzeD36PHr5e3o5SDh7uvt6Pft+/Uo7+7n6Pbo/ykpBVdpZHRoAv8HVmlzaWJsZQgAAQhF
        eHBhbmRlZAgJRmllbGROYW1lBgtVU1IkQUNDREFURQ1UaXRsZS5DYXB0aW9uBhDM5fH/9iDt4Pfo
        8evl7ej/BVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRlZAgJRmllbGROYW1lBgVTVU1FUQ1UaXRs
        ZS5DYXB0aW9uBhPR8+zs4CDiIP3q4uji4Ovl7fLlBVdpZHRoAv8HVmlzaWJsZQgAAQhFeHBhbmRl
        ZAgJRmllbGROYW1lBgpVU1IkRVFSQVRFDVRpdGxlLkNhcHRpb24GCcrz8PEg/eriLgVXaWR0aAL/
        B1Zpc2libGUIAAEJQWxpZ25tZW50Bw50YVJpZ2h0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1l
        BgVBRlVMTA1UaXRsZS5DYXB0aW9uBg3P7uvt++kg5O7x8vPvBVdpZHRoAv8HVmlzaWJsZQgAAQlB
        bGlnbm1lbnQHDnRhUmlnaHRKdXN0aWZ5CEV4cGFuZGVkCAlGaWVsZE5hbWUGBUFDSEFHDVRpdGxl
        LkNhcHRpb24GGc/w7vHs7vLwIOgg8OXk4Ory6PDu4uDt6OUFV2lkdGgC/wdWaXNpYmxlCAABCUFs
        aWdubWVudAcOdGFSaWdodEp1c3RpZnkIRXhwYW5kZWQICUZpZWxkTmFtZQYFQVZJRVcNVGl0bGUu
        Q2FwdGlvbgYP0u7r/OruIO/w7vHs7vLwBVdpZHRoAv8HVmlzaWJsZQgAAAgI/RwJCA==
      EDITIONDATE: 2014-04-08T17:59:41+03:00
  - 
    Properties: 
      Class: "TgdcStorageFolder"
      RUID: 394420820_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
    Fields: 
      PARENT: "394420819_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "pnlMaster(TPanel)"
      DATA_TYPE: "F"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2012-02-21T12:09:30+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 394420821_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 394420820_99701464
    Fields: 
      PARENT: "394420820_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)\\pnlMaster(TPanel)"
      NAME: "Height"
      DATA_TYPE: "I"
      STR_DATA: ~
      INT_DATA: 287
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2014-06-03T11:58:45+03:00
  - 
    Properties: 
      Class: "TgdcStorageFolder"
      RUID: 489119204_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
    Fields: 
      PARENT: "394420819_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)"
      NAME: "usrg_grAvgSalaryStr(TgsIBGrid)"
      DATA_TYPE: "F"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: ~
      EDITIONDATE: 2013-07-30T17:00:30+03:00
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 489119205_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: True
      HeadObject: 489119204_99701464
    Fields: 
      PARENT: "489119204_99701464 USER - Administrator\\gdc_dlgUserComplexDocument147022845_119619099(Tgdc_dlgUserComplexDocument)\\usrg_grAvgSalaryStr(TgsIBGrid)"
      NAME: "data"
      DATA_TYPE: "B"
      STR_DATA: ~
      INT_DATA: ~
      DATETIME_DATA: ~
      CURR_DATA: ~
      BLOB_DATA: !!binary > 
        VFBGMAYNR1JJRF9TVFJFQU1fNAEGBlRhaG9tYQYMY2xXaW5kb3dUZXh0AvUAAggAA8wAAAYIY2xX
        aW5kb3cBBgZUYWhvbWEGD2NsSGlnaGxpZ2h0VGV4dAL1AAIIAAPMAAAGC2NsSGlnaGxpZ2h0AQYG
        VGFob21hBgxjbFdpbmRvd1RleHQC9QACCAADzAAABgljbEJ0bkZhY2UJBgkkMDBFN0YzRjcGCSQw
        MEQ2RTdFNw4ACAgOAAgOAQlBbGlnbm1lbnQHDXRhTGVmdEp1c3RpZnkIRXhwYW5kZWQICUZpZWxk
        TmFtZQYKVVNSJElTRlVMTAhSZWFkT25seQgNVGl0bGUuQ2FwdGlvbgYMz+7r7fvpIOzl8f/2BVdp
        ZHRoAjYHVmlzaWJsZQkAAQlBbGlnbm1lbnQHDXRhTGVmdEp1c3RpZnkIRXhwYW5kZWQICUZpZWxk
        TmFtZQYIVVNSJERBVEUIUmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GBMTg8uAFV2lkdGgCSAdWaXNp
        YmxlCQABCUFsaWdubWVudAcNdGFMZWZ0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBgxVU1Ik
        Q0FMQ0RBWVMIUmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GC8Tt6CDw4PH35fIuBVdpZHRoAk4HVmlz
        aWJsZQkJVG90YWxUeXBlBwV0dFN1bQABCUFsaWdubWVudAcOdGFSaWdodEp1c3RpZnkIRXhwYW5k
        ZWQICUZpZWxkTmFtZQYKVVNSJFNBTEFSWQhSZWFkT25seQgNVGl0bGUuQ2FwdGlvbgYIx+Dw7+vg
        8uAFV2lkdGgCSAdWaXNpYmxlCQ1EaXNwbGF5Rm9ybWF0BgQjLiMjCVRvdGFsVHlwZQcFdHRTdW0A
        AQlBbGlnbm1lbnQHDnRhUmlnaHRKdXN0aWZ5CEV4cGFuZGVkCAlGaWVsZE5hbWUGB1VTUiRET1cI
        UmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GCsTt6CDw4OHu8vsFV2lkdGgCPAdWaXNpYmxlCQlUb3Rh
        bFR5cGUHBXR0U3VtAAEJQWxpZ25tZW50Bw10YUxlZnRKdXN0aWZ5CEV4cGFuZGVkCAlGaWVsZE5h
        bWUGEFVTUiRTQ0hFRFVMRVJET1cIUmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GD8Tt5ekg7+4g4/Dg
        9Ojq8wVXaWR0aAJUB1Zpc2libGUJAAEJQWxpZ25tZW50Bw50YVJpZ2h0SnVzdGlmeQhFeHBhbmRl
        ZAgJRmllbGROYW1lBgdVU1IkSE9XCFJlYWRPbmx5CA1UaXRsZS5DYXB0aW9uBgvX4PH7IPDg4e7y
        +wVXaWR0aAJCB1Zpc2libGUJCVRvdGFsVHlwZQcFdHRTdW0AAQlBbGlnbm1lbnQHDXRhTGVmdEp1
        c3RpZnkIRXhwYW5kZWQICUZpZWxkTmFtZQYQVVNSJFNDSEVEVUxFUkhPVwhSZWFkT25seQgNVGl0
        bGUuQ2FwdGlvbgYQ1+Dx7uIg7+4g4/Dg9Ojq8wVXaWR0aAJaB1Zpc2libGUJAAEJQWxpZ25tZW50
        Bw10YUxlZnRKdXN0aWZ5CEV4cGFuZGVkCAlGaWVsZE5hbWUGD1VTUiRERVNDUklQVElPTghSZWFk
        T25seQgNVGl0bGUuQ2FwdGlvbgYIzu/o8eDt6OUFV2lkdGgCUwdWaXNpYmxlCQABCUFsaWdubWVu
        dAcNdGFMZWZ0SnVzdGlmeQVDb2xvcgcHY2xXaGl0ZQhFeHBhbmRlZAgJRmllbGROYW1lBhBVU1Ik
        TU9ERVJOU0FMQVJZCFJlYWRPbmx5CA1UaXRsZS5DYXB0aW9uBhTR7uLw5ezl7e3g/yDn4PDv6+Dy
        4AVXaWR0aAL/B1Zpc2libGUIDURpc3BsYXlGb3JtYXQGBCMuIyMAAQlBbGlnbm1lbnQHDXRhTGVm
        dEp1c3RpZnkIRXhwYW5kZWQICUZpZWxkTmFtZQYJVVNSJENPRUZGCFJlYWRPbmx5CA1UaXRsZS5D
        YXB0aW9uBgbK7v30LfIFV2lkdGgC/wdWaXNpYmxlCAABCUFsaWdubWVudAcNdGFMZWZ0SnVzdGlm
        eQhFeHBhbmRlZAgJRmllbGROYW1lBgtVU1IkSVNDSEVDSwhSZWFkT25seQgNVGl0bGUuQ2FwdGlv
        bgYEwurrLgVXaWR0aAL/B1Zpc2libGUIAAEJQWxpZ25tZW50Bw10YUxlZnRKdXN0aWZ5CEV4cGFu
        ZGVkCAlGaWVsZE5hbWUGDVVTUiRPTERTQUxBUlkIUmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GBc7q
        6+DkBVdpZHRoAv8HVmlzaWJsZQgAAQlBbGlnbm1lbnQHDXRhTGVmdEp1c3RpZnkIRXhwYW5kZWQI
        CUZpZWxkTmFtZQYNVVNSJE5FV1NBTEFSWQhSZWFkT25seQgNVGl0bGUuQ2FwdGlvbgYG0fLg4urg
        BVdpZHRoAv8HVmlzaWJsZQgAAQlBbGlnbm1lbnQHDXRhTGVmdEp1c3RpZnkIRXhwYW5kZWQICUZp
        ZWxkTmFtZQYCSUQNVGl0bGUuQ2FwdGlvbgYNyOTl7fLo9Ojq4PLu8AVXaWR0aAL/B1Zpc2libGUI
        AAEJQWxpZ25tZW50Bw10YUxlZnRKdXN0aWZ5CEV4cGFuZGVkCAlGaWVsZE5hbWUGD1VTUiRET0NV
        TUVOVEtFWQhSZWFkT25seQgNVGl0bGUuQ2FwdGlvbgYIxO7q8+zl7fIFV2lkdGgC/wdWaXNpYmxl
        CAABCUFsaWdubWVudAcNdGFMZWZ0SnVzdGlmeQhFeHBhbmRlZAgJRmllbGROYW1lBhhaX1VTUiRE
        T0NVTUVOVEtFWV9OVU1CRVIIUmVhZE9ubHkIDVRpdGxlLkNhcHRpb24GBc3u7OXwBVdpZHRoAv8H
        VmlzaWJsZQgAAQlBbGlnbm1lbnQHDXRhTGVmdEp1c3RpZnkIRXhwYW5kZWQICUZpZWxkTmFtZQYe
        Wl9VU1IkRE9DVU1FTlRLRVlfRE9DVU1FTlREQVRFCFJlYWRPbmx5CA1UaXRsZS5DYXB0aW9uBgTE
        4PLgBVdpZHRoAv8HVmlzaWJsZQgAAQlBbGlnbm1lbnQHDXRhTGVmdEp1c3RpZnkIRXhwYW5kZWQI
        CUZpZWxkTmFtZQYfWl9VU1IkRE9DVU1FTlRLRVlfRE9DMjcxNTI2MDQ3OAhSZWFkT25seQgNVGl0
        bGUuQ2FwdGlvbgYN0ujvIOTu6vPs5e3y4AVXaWR0aAL/B1Zpc2libGUIAAAICP0cCQg=
      EDITIONDATE: 2014-04-23T15:29:08+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 151516266_101633588
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 151516264_101633588
    Fields: 
      OBJECTNAME: "gdc_frmUserComplexDocument147022845_119619099"
      MODULE: "MACROS"
      LANGUAGE: "VBScript"
      NAME: "Macros_Sick_Recalc"
      COMMENT: ~
      SCRIPT: | 
        Option Explicit
        '#include wg_AvgSalaryStrGenerate_Sick_pl
        '#include wg_Prolog
        '#include wg_AvgSalaryDetailGenerate_Sick_pl
        
        Sub Macros_Sick_Recalc(OwnerForm)
        '
          Dim gdcObject, gdcDetail, gdcAvgStr, Creator, inID, Ret
          Set gdcObject = OwnerForm.gdcObject
          Set gdcDetail = OwnerForm.gdcDetailObject
        
          Call wg_Prolog.SyncField(OwnerForm.gdcObject, True)
        
          If Not OwnerForm.gdcObject.VariableExists("DontRecalcLine") Then
            OwnerForm.gdcObject.AddVariableItem("DontRecalcLine")
          End If
          '
          OwnerForm.gdcObject.Variables("DontRecalcLine") = True
        
          gdcObject.First
          inID = ""
          '
          While Not gdcObject.eof
            If inID = "" Then
              inID = gdcObject.ID
            Else
              inID = inID & ", " & gdcObject.ID
            End If
            '
            gdcObject.Next
          Wend
          '
          inID = "(" & inID & ")"
          gdcObject.ExtraConditions.Add(" z.id in " & inID )
        
          Set Creator = New TCreator
          Set gdcAvgStr = Creator.GetObject(OwnerForm, "TgdcAttrUserDefined", "")
          gdcAvgStr.SubType = "USR$WG_AVGSALARYSTR"
          gdcAvgStr.Transaction = gdcObject.Transaction
          gdcAvgStr.ReadTransaction = gdcObject.ReadTransaction
          gdcAvgStr.SubSet = "ByParent"
          gdcAvgStr.MasterSource = OwnerForm.GetComponent("dsMain")
          gdcAvgStr.MasterField = "ID"
          gdcAvgStr.DetailField = "PARENT"
          gdcAvgStr.Open
        
          gdcObject.First
          '
          While Not gdcObject.EOF
            gdcObject.Edit
            gdcObject.FieldByName("USR$AVGSUMMA").Clear
            gdcObject.FieldByName("USR$THIRDMETHOD").AsInteger = 0
            gdcObject.FieldByName("USR$CALCBYBUDGET").AsInteger = 0
            gdcObject.FieldByName("USR$AVERAGE").AsInteger = 0
        
            Ret = wg_AvgSalaryStrGenerate_Sick_pl(gdcObject, gdcAvgStr)
            Ret = wg_AvgSalaryDetailGenerate_Sick_pl(gdcObject, gdcDetail)
            '
            gdcObject.Next
          Wend
        
          OwnerForm.gdcObject.Variables("DontRecalcLine") = False
          Call wg_Prolog.SyncField(OwnerForm.gdcObject, False)
          gdcObject.ExtraConditions.Clear
        '
        End Sub
        
      DISPLAYSCRIPT: | 
        MACROS_SICK_RECALC
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147014155_274788016 gdc_frmUserComplexDocument147022845_119619099"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNURkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-05-05T12:05:29+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "520236113_2108071301 wg_AvgSalaryStrGenerate_Sick_pl"
          - 
            ADDFUNCTIONKEY: "528612032_99701464 wg_Prolog"
          - 
            ADDFUNCTIONKEY: "528605649_99701464 wg_AvgSalaryDetailGenerate_Sick_pl"
  - 
    Properties: 
      Class: "TgdcMacros"
      RUID: 151516264_101633588
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "gdc_frmUserComplexDocument147022845_119619099"
      MACROSGROUPKEY: "147071380_375139087 Локальные макросы"
      FUNCTIONKEY: "151516266_101633588 Macros_Sick_Recalc"
      NAME: "Пересчет больничных (Пролог-скрипт)"
      SERVERKEY: ~
      ISLOCALEXECUTE: 0
      ISREBUILD: 0
      EXECUTEDATE: ~
      SHORTCUT: 0
      EDITIONDATE: 2014-05-05T12:05:29+03:00
      DISPLAYINMENU: 1
      RUNONLOGIN: 0
  - 
    Properties: 
      Class: "TgdcTableCalendar"
      RUID: 156913837_131572570
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "Ненормированный график"
      MON: 1
      TUE: 1
      WED: 1
      THU: 1
      FRI: 1
      SAT: 0
      SUN: 0
      HOLIDAYISWORK: 0
      W1_START1: 1899-12-30T00:00:00+03:00
      W1_END1: 1899-12-30T00:00:00+03:00
      W1_START2: 1899-12-30T00:00:00+03:00
      W1_END2: 1899-12-30T00:00:00+03:00
      W1_START3: 1899-12-30T00:00:00+03:00
      W1_END3: 1899-12-30T00:00:00+03:00
      W1_START4: 1899-12-30T00:00:00+03:00
      W1_END4: 1899-12-30T00:00:00+03:00
      W2_START1: 1899-12-30T00:00:00+03:00
      W2_END1: 1899-12-30T00:00:00+03:00
      W2_START2: 1899-12-30T00:00:00+03:00
      W2_END2: 1899-12-30T00:00:00+03:00
      W2_START3: 1899-12-30T00:00:00+03:00
      W2_END3: 1899-12-30T00:00:00+03:00
      W2_START4: 1899-12-30T00:00:00+03:00
      W2_END4: 1899-12-30T00:00:00+03:00
      W3_START1: 1899-12-30T00:00:00+03:00
      W3_END1: 1899-12-30T00:00:00+03:00
      W3_START2: 1899-12-30T00:00:00+03:00
      W3_END2: 1899-12-30T00:00:00+03:00
      W3_START3: 1899-12-30T00:00:00+03:00
      W3_END3: 1899-12-30T00:00:00+03:00
      W3_START4: 1899-12-30T00:00:00+03:00
      W3_END4: 1899-12-30T00:00:00+03:00
      W4_START1: 1899-12-30T00:00:00+03:00
      W4_END1: 1899-12-30T00:00:00+03:00
      W4_START2: 1899-12-30T00:00:00+03:00
      W4_END2: 1899-12-30T00:00:00+03:00
      W4_START3: 1899-12-30T00:00:00+03:00
      W4_END3: 1899-12-30T00:00:00+03:00
      W4_START4: 1899-12-30T00:00:00+03:00
      W4_END4: 1899-12-30T00:00:00+03:00
      W5_START1: 1899-12-30T00:00:00+03:00
      W5_END1: 1899-12-30T00:00:00+03:00
      W5_START2: 1899-12-30T00:00:00+03:00
      W5_END2: 1899-12-30T00:00:00+03:00
      W5_START3: 1899-12-30T00:00:00+03:00
      W5_END3: 1899-12-30T00:00:00+03:00
      W5_START4: 1899-12-30T00:00:00+03:00
      W5_END4: 1899-12-30T00:00:00+03:00
      W6_START1: 1899-12-30T00:00:00+03:00
      W6_END1: 1899-12-30T00:00:00+03:00
      W6_START2: 1899-12-30T00:00:00+03:00
      W6_END2: 1899-12-30T00:00:00+03:00
      W6_START3: 1899-12-30T00:00:00+03:00
      W6_END3: 1899-12-30T00:00:00+03:00
      W6_START4: 1899-12-30T00:00:00+03:00
      W6_END4: 1899-12-30T00:00:00+03:00
      W7_START1: 1899-12-30T00:00:00+03:00
      W7_END1: 1899-12-30T00:00:00+03:00
      W7_START2: 1899-12-30T00:00:00+03:00
      W7_END2: 1899-12-30T00:00:00+03:00
      W7_START3: 1899-12-30T00:00:00+03:00
      W7_END3: 1899-12-30T00:00:00+03:00
      W7_START4: 1899-12-30T00:00:00+03:00
      W7_END4: 1899-12-30T00:00:00+03:00
      W8_START1: 1899-12-30T00:00:00+03:00
      W8_END1: 1899-12-30T00:00:00+03:00
      W8_START2: 1899-12-30T00:00:00+03:00
      W8_END2: 1899-12-30T00:00:00+03:00
      W8_START3: 1899-12-30T00:00:00+03:00
      W8_END3: 1899-12-30T00:00:00+03:00
      W8_START4: 1899-12-30T00:00:00+03:00
      W8_END4: 1899-12-30T00:00:00+03:00
      W1_OFFSET: 0
      W2_OFFSET: 0
      W3_OFFSET: 0
      W4_OFFSET: 0
      W5_OFFSET: 0
      W6_OFFSET: 0
      W7_OFFSET: 0
      W8_OFFSET: 0
      EDITIONDATE: 2014-03-14T15:54:21+03:00
      USR$DAYCICLECOUNT: 7
      USR$WAGE_OLDKEY: ~
      USR$CALENDARTYPE: ~
      USR$FIRSTDAYDATE: ~
      USR$HOLIDAYISWORK: 0
      USR$DAYSDATA: ~
      USR$ISLINKDAYWEEK: 1
      USR$MON: 0
      USR$TUE: 0
      USR$WED: 0
      USR$THU: 0
      USR$FRI: 0
      USR$SAT: 0
      USR$SUN: 0
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 540049114_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "APPLICATION"
      MODULE: "UNKNOWN"
      LANGUAGE: "VBScript"
      NAME: "wg_CalcAvgAddPay_pl"
      COMMENT: ~
      SCRIPT: | 
        '#include pl_GetScriptIDByName
        Option Explicit
        
        Function wg_CalcAvgAddPay_pl(ByRef gdcObject, ByRef gdcDetailObject, ByRef gdcSalary, ByVal MonthBefore)
        '
          Dim T, T1, T2
          '
          Dim Creator
          '
          Dim PL, Ret, Pred, Tv, Append
          Dim PredFile, Scope
          'avg_wage
          Dim P_main, Tv_main, Q_main
          'avg_wage_avg_in
          Dim P_in, Tv_in, Q_in
          Dim EmplKey, FirstMoveKey, DateCalc, CalcByHoure
          'avg_wage_run, avg_wage_sql
          Dim P_run, Tv_run, Q_run, P_sql, Tv_sql, Q_sql, P_kb
          Dim DateCalcFrom, DateCalcTo
          Dim PredicateName, Arity, SQL
          'avg_wage_out, avg_wage_avg_det
          Dim P_out, Tv_out, Q_out, P_det, Tv_det, Q_det
          Dim AvgWage, AvgWageRule
          Dim Period, Wage
          Dim TabDays, TabHoures, NormDays, NormHoures
        
          T1 = Timer
          wg_CalcAvgAddPay_pl = ""
        
          'init
          Set Creator = New TCreator
          Set PL = Creator.GetObject(nil, "TgsPLClient", "")
          Ret = PL.Initialise("")
          If Not Ret Then
            Exit Function
          End If
          'debug
          PL.Debug = True
          'load
          Ret = PL.LoadScript(pl_GetScriptIDByName("twg_avg_wage"))
          If Not Ret Then
            Exit Function
          End If
          Scope = "wg_avg_wage_avg"
        
          'params
          CalcByHoure = gdcObject.FieldByName("USR$CALCBYHOUR").AsInteger
          EmplKey = gdcDetailObject.FieldByName("usr$emplkey").AsInteger
          FirstMoveKey = gdcDetailObject.FieldByName("usr$firstmovekey").AsInteger
          '
          Dim IBSQL
          '
          Set IBSQL = Creator.GetObject(nil, "TIBSQL", "")
          IBSQL.Transaction = gdcBaseManager.ReadTransaction
          IBSQL.SQL.Text = _
              "SELECT " & _
              "  t.USR$DATEBEGIN " & _
              "FROM " & _
              "  USR$WG_TOTAL t " & _
              "WHERE " & _
              "  t.DOCUMENTKEY = :TDK "
          IBSQL.ParamByName("TDK").AsInteger = gdcObject.FieldByName("USR$TOTALDOCKEY").AsInteger
          IBSQL.ExecQuery
          '
          DateCalc = IBSQL.FieldByName("USR$DATEBEGIN").AsDateTime
          '
          IBSQL.Close
          '
        
          'clean
          gdcSalary.First
          While Not gdcSalary.EOF
            gdcSalary.Delete
          Wend
          '
          gdcSalary.OwnerForm.Repaint
        
          'avg_wage_avg_in(EmplKey, FirstMoveKey, DateCalc, CalcByHoure, MonthBefore)
          P_in = "avg_wage_avg_in"
          Set Tv_in = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_in = Creator.GetObject(nil, "TgsPLQuery", "")
          Tv_in.PutInteger 0, EmplKey
          Tv_in.PutInteger 1, FirstMoveKey
          Tv_in.PutDate 2, DateCalc
          Tv_in.PutInteger 3, CalcByHoure
          Tv_in.PutInteger 4, MonthBefore
          '
          Q_in.PredicateName = P_in
          Q_in.Termv = Tv_in
          '
          Q_in.OpenQuery
          If Q_in.EOF Then
            Exit Function
          End If
          Q_in.Close
        
          'avg_wage(Scope) - prepare data
          P_main = "avg_wage"
          Set Tv_main = Creator.GetObject(1, "TgsPLTermv", "")
          Set Q_main = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_main.PredicateName = P_main
          Q_main.Termv = Tv_main
          '
          Tv_main.PutAtom 0, Scope
          '
          Q_main.OpenQuery
          If Q_main.EOF Then
            Exit Function
          End If
          Q_main.Close
        
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          'avg_wage_run(Scope, EmplKey, FirstMoveKey, DateCalcFrom, DateCalcTo)
          P_run = "avg_wage_run"
          Set Tv_run = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_run = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_run.PredicateName = P_run
          Q_run.Termv = Tv_run
          'avg_wage_sql(Scope, EmplKey, FirstMoveKey, PredicateName, Arity, SQL)
          P_sql = "avg_wage_sql"
          P_kb = "avg_wage_kb"
          Set Tv_sql = Creator.GetObject(6, "TgsPLTermv", "")
          Set Q_sql = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_sql.PredicateName = P_sql
          Q_sql.Termv = Tv_sql
          '
          Tv_run.PutAtom 0, Scope
          '
          Q_run.OpenQuery
          If Q_run.EOF Then
            Exit Function
          End If
          '
          Append = False
          '
          Do Until Q_run.EOF
            EmplKey = Tv_run.ReadInteger(1)
            FirstMoveKey = Tv_run.ReadInteger(2)
            DateCalcFrom = Tv_run.ReadDate(3)
            DateCalcTo = Tv_run.ReadDate(4)
            '
            Tv_sql.Reset
            Tv_sql.PutAtom 0, Scope
            Tv_sql.PutInteger 1, EmplKey
            Tv_sql.PutInteger 2, FirstMoveKey
            Q_sql.OpenQuery
            '
            Do Until Q_sql.EOF
              PredicateName = Tv_sql.ReadAtom(3)
              Arity = Tv_sql.ReadInteger(4)
              SQL = Tv_sql.ReadString(5)
              '
              Ret =  PL.MakePredicatesOfSQLSelect _
                        (SQL, _
                        gdcBaseManager.ReadTransaction, _
                        PredicateName, PredicateName, Append)
              If Ret >= 0 Then
                 Ret = PL.Call(P_kb, Tv_sql)
              End If
              '
              Q_sql.NextSolution
            Loop
            Q_sql.Close
            '
            Append = True
            '
            Q_run.NextSolution
          Loop
          Q_run.Close
        
          'save param_list
          If PL.Debug Then
            Pred = "param_list"
            PredFile = "param_list"
            Set Tv = Creator.GetObject(3, "TgsPLTermv", "")
            PL.SavePredicatesToFile Pred, Tv, PredFile
          End If
        
          'avg_wage(Scope) - calc result
          Q_main.OpenQuery
          If Q_main.EOF Then
            Exit Function
          End If
          Q_main.Close
        
          'avg_wage_out(Scope, EmplKey, FirstMoveKey, AvgWage, AvgWageVariant)
          P_out = "avg_wage_out"
          Set Tv_out = Creator.GetObject(5, "TgsPLTermv", "")
          Set Q_out = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_out.PredicateName = P_out
          Q_out.Termv = Tv_out
          'avg_wage_avg_det(EmplKey, FirstMoveKey,
          '                  Period, Wage,
          '                  TabDays, NormDays, TabHoures, NormHoures) :-
          P_det = "avg_wage_avg_det"
          Set Tv_det = Creator.GetObject(8, "TgsPLTermv", "")
          Set Q_det = Creator.GetObject(nil, "TgsPLQuery", "")
          Q_det.PredicateName = P_det
          Q_det.Termv = Tv_det
          '
          Tv_out.PutAtom 0, Scope
          '
          Q_out.OpenQuery
          If Q_out.EOF Then
            Exit Function
          End If
          '
          Do Until Q_out.EOF
            EmplKey = Tv_out.ReadInteger(1)
            FirstMoveKey = Tv_out.ReadInteger(2)
            AvgWage = Tv_out.ReadFloat(3)
            AvgWageRule = Tv_out.ReadAtom(4)
            '
            wg_CalcAvgAddPay_pl = AvgWageRule
            Select Case AvgWageRule
              Case "avg_houre", "avg_day"
                '
              Case Else
                Exit Function
            End Select
            '
            Tv_det.Reset
            Tv_det.PutInteger 0, EmplKey
            Tv_det.PutInteger 1, FirstMoveKey
            Q_det.OpenQuery
            '
            Do Until Q_det.EOF
              Period = Tv_det.ReadDate(2)
              Wage = Tv_det.ReadFloat(3)
              TabDays = Tv_det.ReadFloat(4)
              NormDays = Tv_det.ReadFloat(5)
              TabHoures = Tv_det.ReadFloat(6)
              NormHoures = Tv_det.ReadFloat(7)
              '
              gdcSalary.Append
              gdcSalary.FieldByName("USR$ISCHECK").AsVariant = Abs( Wage > 0 )
              gdcSalary.FieldByName("USR$DATE").AsVariant = Period
              If Wage > 0 Then
                gdcSalary.FieldByName("USR$SALARY").AsVariant = Wage
                gdcSalary.FieldByName("USR$DOW").AsVariant = TabDays
                gdcSalary.FieldByName("USR$SCHEDULERDOW").AsVariant = NormDays
                gdcSalary.FieldByName("USR$HOW").AsVariant = TabHoures
                gdcSalary.FieldByName("USR$SCHEDULERHOW").AsVariant = NormHoures
              End If
              gdcSalary.Post
              '
              Q_det.NextSolution
            Loop
            Q_det.Close
            '
            Q_out.NextSolution
          Loop
          Q_out.Close
          '
        
          gdcSalary.First
        
          gdcDetailObject.Edit
          gdcDetailObject.FieldByName("USR$AVGSUM").AsCurrency = AvgWage
          gdcDetailObject.Post
        
          T2 = Timer
          T = T2 - T1
        '
        End function
        
      DISPLAYSCRIPT: | 
        WG_CALCAVGADDPAY_PL
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "1010001_17 APPLICATION"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAR0RDT0JKRUNUCQAAAEdEQ09CSkVDVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVA8AAABHRENERVRBSUxPQkpFQ1QPAAAAR0RDREVUQUlMT0JKRUNUAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUCQAAAEdEQ1NBTEFSWQkAAABHRENTQUxBUlkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QLAAAATU9OVEhCRUZPUkULAAAATU9OVEhCRUZPUkUA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVEZMUFI=
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-06-06T11:30:40+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "151158419_5956463 pl_GetScriptIDByName"
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147113651_1354510846
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 540049106_99701464
    Fields: 
      NAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      DESCRIPTION: ~
      PARENT: ~
      OBJECTTYPE: 0
      MACROSGROUPKEY: "147113652_1354510846 Локальные макросы"
      REPORTGROUPKEY: "147113653_1354510846 Отчеты(gdc_dlgUserComplexDocument147113610_1354510846)"
      CLASSNAME: ""
      OBJECTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      SUBTYPE: ""
      EDITIONDATE: 2010-03-31T16:02:14+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 540049108_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 540049106_99701464
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      MODULE: "MACROS"
      LANGUAGE: "VBScript"
      NAME: "Macros_CalcAvgAddPay"
      COMMENT: ~
      SCRIPT: | 
        '#include WG_CALCAVGADDPAY
        option explicit
        sub Macros_CalcAvgAddPay(OwnerForm)
          call wg_CalcAvgAddPay(OwnerForm)
        end sub
        
        
      DISPLAYSCRIPT: | 
        MACROS_CALCAVGADDPAY
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147113651_1354510846 gdc_dlgUserComplexDocument147113610_1354510846"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNURkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-06-06T11:40:43+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147113827_1354510846 wg_CalcAvgAddPay"
  - 
    Properties: 
      Class: "TgdcMacrosGroup"
      RUID: 147113652_1354510846
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 540049106_99701464
    Fields: 
      HASCHILDREN: 1
      OBJECTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      OBJECTPARENT: ~
      CLASSNAME: ""
      SUBTYPE: ""
      PARENT: ~
      NAME: "Локальные макросы"
      ISGLOBAL: 0
      DESCRIPTION: ~
      EDITIONDATE: 2010-03-31T16:02:14+03:00
  - 
    Properties: 
      Class: "TgdcMacros"
      RUID: 540049106_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      MACROSGROUPKEY: "147113652_1354510846 Локальные макросы"
      FUNCTIONKEY: "540049108_99701464 Macros_CalcAvgAddPay"
      NAME: "Расчет структуры ср. заработка"
      SERVERKEY: ~
      ISLOCALEXECUTE: 0
      ISREBUILD: 0
      EXECUTEDATE: ~
      SHORTCUT: 0
      EDITIONDATE: 2014-06-06T11:40:43+03:00
      DISPLAYINMENU: 1
      RUNONLOGIN: 0
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 540049113_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 540049109_99701464
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      MODULE: "MACROS"
      LANGUAGE: "VBScript"
      NAME: "Macros_CalcAvgAddPay_Total"
      COMMENT: ~
      SCRIPT: | 
        '#include WG_CALCAVGADDPAY
        option explicit
        sub Macros_CalcAvgAddPay_Total(OwnerForm)
          dim gdcObject, gdcDetailObject
          set gdcObject = OwnerForm.gdcObject
          set gdcDetailObject = OwnerForm.gdcDetailObject
        
          if (gdcObject.State = dsEdit) then gdcObject.Post
          if (gdcDetailObject.State = dsEdit) or (gdcDetailObject.State = dsInsert) then gdcDetailObject.Post
          gdcDetailObject.First
          while not gdcDetailObject.EoF
            call wg_CalcAvgAddPay(OwnerForm)
            gdcDetailObject.Next
          wend
        end sub
        
        
      DISPLAYSCRIPT: | 
        MACROS_CALCAVGADDPAY_TOTAL
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: ~
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147113651_1354510846 gdc_dlgUserComplexDocument147113610_1354510846"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAT1dORVJGT1JNCQAAAE9XTkVSRk9STQAAAAAAAAAAAAAAAAsAAAAAAAAAAAAA
        AABGTlNURkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: 0
      EDITIONDATE: 2014-06-06T11:46:26+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147113827_1354510846 wg_CalcAvgAddPay"
  - 
    Properties: 
      Class: "TgdcMacros"
      RUID: 540049109_99701464
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      MACROSGROUPKEY: "147113652_1354510846 Локальные макросы"
      FUNCTIONKEY: "540049113_99701464 Macros_CalcAvgAddPay_Total"
      NAME: "Произвести итоговый расчет"
      SERVERKEY: ~
      ISLOCALEXECUTE: 0
      ISREBUILD: 0
      EXECUTEDATE: ~
      SHORTCUT: 0
      EDITIONDATE: 2014-06-06T11:46:26+03:00
      DISPLAYINMENU: 1
      RUNONLOGIN: 0
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147113745_1354510846
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147113746_1354510846
    Fields: 
      NAME: "usrg_actAvgGenerate"
      DESCRIPTION: ~
      PARENT: "147113651_1354510846 gdc_dlgUserComplexDocument147113610_1354510846"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_actAvgGenerate"
      SUBTYPE: ""
      EDITIONDATE: 2010-03-31T16:53:56+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147113748_1354510846
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147113746_1354510846
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_actAvgGenerateOnExecute"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_CalcAvgAddPay_pl
        Option Explicit
        
        Sub usrg_actAvgGenerateOnExecute(ByVal Sender)
        '
          Dim gdcObject, gdcDetailObject, gdcSalary, Ret
        
          Sender.OwnerForm.GetComponent("actApply").Execute
        
          Set gdcObject = Sender.OwnerForm.gdcObject
          Set gdcDetailObject = Sender.OwnerForm.gdcDetailObject
          Set gdcSalary = Sender.OwnerForm.GetComponent("usrg_gdcAvgSalaryStr")
        
          Dim MonthBefore
          MonthBefore = 0
          Do
            Ret = wg_CalcAvgAddPay_pl(gdcObject, gdcDetailObject, gdcSalary, MonthBefore)
            Select Case Ret
              Case "need_more"
                MonthBefore = MonthBefore + 1
              Case Else
                Exit Do
            End Select
          Loop
        '
        End Sub
        
        
        
      DISPLAYSCRIPT: | 
        USRG_ACTAVGGENERATEONEXECUTE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONEXECUTE"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147113651_1354510846 gdc_dlgUserComplexDocument147113610_1354510846"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-06-06T11:36:52+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "540049114_99701464 wg_CalcAvgAddPay_pl"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147113746_1354510846
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_actAvgGenerate"
      PARENTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      OBJECTKEY: "147113745_1354510846 gdc_dlgUserComplexDocument147113610_1354510846\\usrg_actAvgGenerate"
      EVENTNAME: "ONEXECUTE"
      FUNCTIONKEY: "147113748_1354510846 usrg_actAvgGenerateOnExecute"
      DISABLE: ~
      EDITIONDATE: 2014-06-06T11:36:53+03:00
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147113836_1354510846
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147113842_1354510846
    Fields: 
      NAME: "usrg_actGenerate"
      DESCRIPTION: ~
      PARENT: "147113651_1354510846 gdc_dlgUserComplexDocument147113610_1354510846"
      OBJECTTYPE: 0
      MACROSGROUPKEY: ~
      REPORTGROUPKEY: ~
      CLASSNAME: ""
      OBJECTNAME: "usrg_actGenerate"
      SUBTYPE: ""
      EDITIONDATE: 2010-03-31T18:03:13+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147113844_1354510846
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147113842_1354510846
    Fields: 
      OBJECTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      MODULE: "EVENTS"
      LANGUAGE: "VBScript"
      NAME: "usrg_actGenerateOnExecute"
      COMMENT: ~
      SCRIPT: | 
        '#include wg_CalcAvgAddPay_pl
        Option Explicit
        
        Sub usrg_actGenerateOnExecute(ByVal Sender)
        '
          Dim gdcObject, gdcDetailObject, gdcSalary, Ret
        
          Sender.OwnerForm.GetComponent("actApply").Execute
        
          Set gdcObject = Sender.OwnerForm.gdcObject
          Set gdcDetailObject = Sender.OwnerForm.gdcDetailObject
          Set gdcSalary = Sender.OwnerForm.GetComponent("usrg_gdcAvgSalaryStr")
        
          Dim MonthBefore
        
          gdcDetailObject.First
          While Not gdcDetailObject.EoF
            '
            MonthBefore = 0
            Do
              Ret = wg_CalcAvgAddPay_pl(gdcObject, gdcDetailObject, gdcSalary, MonthBefore)
              Select Case Ret
                Case "need_more"
                  MonthBefore = MonthBefore + 1
                Case Else
                  Exit Do
              End Select
            Loop
            '
            gdcDetailObject.Next
          Wend
        '
        End Sub
        
        
      DISPLAYSCRIPT: | 
        USRG_ACTGENERATEONEXECUTE
        
      MODIFYDATE: ~
      OWNERNAME: ~
      FUNCTIONTYPE: ~
      EVENT: "ONEXECUTE"
      LOCALNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      GROUPNAME: ~
      MODULECODE: "147113651_1354510846 gdc_dlgUserComplexDocument147113610_1354510846"
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      INHERITEDRULE: 0
      USEDEBUGINFO: ~
      EDITIONDATE: 2014-06-06T11:46:22+03:00
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "540049114_99701464 wg_CalcAvgAddPay_pl"
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147113842_1354510846
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      OBJECTNAME: "usrg_actGenerate"
      PARENTNAME: "gdc_dlgUserComplexDocument147113610_1354510846"
      OBJECTKEY: "147113836_1354510846 gdc_dlgUserComplexDocument147113610_1354510846\\usrg_actGenerate"
      EVENTNAME: "ONEXECUTE"
      FUNCTIONKEY: "147113844_1354510846 usrg_actGenerateOnExecute"
      DISABLE: ~
      EDITIONDATE: 2014-06-06T11:46:22+03:00